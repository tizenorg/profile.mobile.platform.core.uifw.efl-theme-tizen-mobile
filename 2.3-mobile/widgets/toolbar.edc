#define ITEM_STATE_ENABLED 0
#define ITEM_STATE_DISABLED 1
#define TAG \
      tag: "br" "\n"; \
      tag: "ps" "ps"; \
      tag: "hilight" "+ font_weight=Bold"; \
      tag: "b" "+ font_weight=Bold"; \
      tag: "tab" "\t";

#define TABBAR_ITEM_TEXT_STYLE(_font_size, _font_class) \
   style { name: "tabbar_icon_text_style_"_font_class; \
      base: "font=Tizen:style=regular font_size="_font_size" align=center color=#FFFFFF wrap=word ellipsis=1 text_class=T111 color_class="_font_class" linegap=0"; \
      TAG \
   }

#define TABBAR_TEXT_STYLE(_font_size, _font_class) \
   style { name: "tabbar_text_style_"_font_class; \
      base: "font=Tizen:style=regular font_size="_font_size" align=center color=#FFFFFF wrap=word ellipsis=1 text_class=T1117 color_class="_font_class" linegap=0"; \
      TAG \
   }

#define TABBAR_NAVI_TEXT_STYLE(_font_size, _font_class) \
   style { name: "tabbar_navi_text_style_"_font_class; \
      base: "font=Tizen:style=regular font_size="_font_size" align=center color=#FFFFFF wrap=word ellipsis=1 text_class=T042 color_class="_font_class" linegap=0"; \
      TAG \
   }

styles{
   TABBAR_ITEM_TEXT_STYLE(14, "T111")
   TABBAR_ITEM_TEXT_STYLE(14, "T111P")
   TABBAR_ITEM_TEXT_STYLE(14, "T111S")
   TABBAR_ITEM_TEXT_STYLE(14, "T111D")
   TABBAR_TEXT_STYLE(18, "T1117")
   TABBAR_TEXT_STYLE(18, "T1117P")
   TABBAR_TEXT_STYLE(18, "T1117S")
   TABBAR_TEXT_STYLE(18, "T1117D")
   TABBAR_NAVI_TEXT_STYLE(18, "T042")
   TABBAR_NAVI_TEXT_STYLE(18, "T042P")
   TABBAR_NAVI_TEXT_STYLE(18, "T042D")
}

group { name: "elm/toolbar/base/default";
   alias: "elm/toolbar/base/tabbar";
   parts {
      part { name: "base";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
         }
      }
      part { name: "base_bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            rel2.offset: -1 -1;
            color_class: "B011";
         }
      }
     part { name: "clipper";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            rel2.offset: -1 -1;
         }
      }
      part { name: "elm.swallow.content";
         clip_to: "clipper";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            rel2.offset: -1 -1;
         }
      }
   }
}

group { name: "elm/toolbar/item/tabbar";
   alias: "elm/toolbar/item/default";
   script {
      public selected = 0;
      public pressed = 0;
      public item_state = ITEM_STATE_ENABLED;
      public items_number = 0;
      public icon_text = 0;
      public mouse_down = 0;
      public multi_down = 0;
      public landscape = 0;
      public item_text = 0;
   }
   parts {
      part { name: "bg";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
         }
         description { state: "2items" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_TWO_ITEMS_SIZE_INC;
         }
         description { state: "3items" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_THREE_ITEMS_SIZE_INC;
         }
         description { state: "4items" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_FOUR_ITEMS_SIZE_INC;
         }
         description { state: "scrollable" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_SCROLLABLE_ITEMS_SIZE_INC;
         }
         description { state: "2items_land" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_LANDSCAPE_TWO_ITEMS_SIZE_INC;
         }
         description { state: "3items_land" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_LANDSCAPE_THREE_ITEMS_SIZE_INC;
         }
         description { state: "4items_land" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_LANDSCAPE_FOUR_ITEMS_SIZE_INC;
         }
         description { state: "scrollable_land" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_LANDSCAPE_SCROLLABLE_ITEMS_SIZE_INC;
         }
      }
      part { name: "padding_center";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1 {
                to: "elm.text";
                relative: 0.0 1.0;
            }
            rel2 {
                to: "elm.text";
                relative: 1.0 1.0;
            }
            fixed: 0 1;
            min: TABBAR_TEXT_CENTER_PADDING_SIZE_INC;
            align: 0.5 0.0;
         }
      }
      part { name: "selected_line";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1 {
                to: "padding_center";
                relative: 0.0 1.0;
            }
            rel2 {
                to: "padding_center";
                relative: 1.0 1.0;
            }
            fixed: 0 1;
            min: TABBAR_SELECTED_LINE_SIZE_INC;
            visible: 0;
            color_class: "B0514S";
            align: 0.5 0.0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "bg_cover";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color_class: "B0514";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color_class: "B0514P";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "padding_left_top";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            rel2.relative: 0.0 0.0;
            min: 0 0;
            fixed: 1 1;
         }
         description { state: "text" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_TEXT_LEFT_TOP_PADDING_SIZE_INC;
         }
         description { state: "icon_text" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_ICON_TEXT_LEFT_TOP_PADDING_SIZE_INC;
         }
         description { state: "icon_text_land" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_ICON_TEXT_LAND_LEFT_TOP_PADDING_SIZE_INC;
         }
      }
      part { name: "padding_right_bottom";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            align: 1.0 1.0;
            rel1.relative: 1.0 1.0;
            min: 0 0;
            fixed: 1 1;
         }
         description { state: "text" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_TEXT_RIGHT_BOTTOM_PADDING_SIZE_INC;
         }
         description { state: "icon_text" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_ICON_TEXT_RIGHT_BOTTOM_PADDING_SIZE_INC;
         }
         description { state: "icon_text_land" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_ICON_TEXT_LAND_RIGHT_BOTTOM_PADDING_SIZE_INC;
         }
      }
      part {
         name: "icon_rect";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 0 0;
            fixed: 0 1;
            rel1 {
               to_y: "padding_left_top";
               relative: 0.0 1.0;
            }
            rel2 {
               to_y: "padding_left_top";
               relative: 1.0 1.0;
            }
            align: 0.5 0.0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_ICON_SIZE_INC;
         }
         description { state: "visible_land" 0.0;
            min: TABBAR_ICON_SIZE_INC;
            fixed: 1 0;
            rel2 {
               relative: 0.0 1.0;
            }
            align: 0.0 0.5;
         }
      }
      part { name: "elm.swallow.icon";
         type: SWALLOW;
         scale: 1;
         clip_to: "elm.icon.clipper";
         description { state: "default" 0.0;
            visible: 0;
            min: TABBAR_ICON_SIZE_INC;
            aspect: 1.0 1.0;
            aspect_preference: HORIZONTAL;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0.5 1.0;
            fixed: 1 1;
            rel1 {
               to_y: "elm.text";
               relative: 0.0 0.0;
            }
            rel2 {
               to_y: "elm.text";
               relative: 1.0 0.0;
            }
         }
         description { state: "visible_icon_only" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0.5 0.5;
            fixed: 1 1;
            rel1 {
               to: "padding_left_top";
               relative: 1.0 1.0;
            }
            rel2 {
               to: "padding_right_bottom";
               relative: 0.0 0.0;
            }
         }
         description { state: "visible_land" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 1.0 0.5;
            fixed: 1 1;
            rel1 {
               to_x: "elm.text";
               relative: 0.0 0.0;
            }
            rel2 {
               to_x: "elm.text";
               relative: 0.0 1.0;
            }
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         clip_to: "elm.text.clipper";
         description { state: "default" 0.0;
            visible: 0;
         }
         description { state: "text" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            rel1 {
               to: "padding_left_top";
               relative: 1.0 1.0;
            }
            rel2 {
               to: "padding_right_bottom";
               relative: 0.0 0.0;
            }
            fixed: 1 1;
            text {
               style: "tabbar_text_style_T1117";
               min: 0 1;
               max: 1 0;
            }
         }
         description { state:"text_pressed" 0.0;
            inherit: "text" 0.0;
            text.style: "tabbar_text_style_T1117P";
         }
         description { state:"text_selected" 0.0;
            inherit: "text" 0.0;
            text.style: "tabbar_text_style_T1117S";
         }
         description { state:"text_disabled" 0.0;
            inherit: "text" 0.0;
            text.style: "tabbar_text_style_T1117D";
         }
         description { state: "icon_text" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            rel1 {
               to_x: "padding_left_top";
               to_y: "icon_rect";
               relative: 1.0 1.0;
            }
            rel2 {
               to: "padding_right_bottom";
               relative: 0.0 0.0;
            }
            fixed: 1 1;
            text {
               style: "tabbar_icon_text_style_T111";
               min: 0 1;
               max: 1 0;
            }
         }
         description { state:"icon_text_pressed" 0.0;
            inherit: "icon_text" 0.0;
            text.style: "tabbar_icon_text_style_T111P";
         }
         description { state:"icon_text_selected" 0.0;
            inherit: "icon_text" 0.0;
            text.style: "tabbar_icon_text_style_T111S";
         }
         description { state:"icon_text_disabled" 0.0;
            inherit: "icon_text" 0.0;
            text.style: "tabbar_icon_text_style_T111D";
         }
         description { state: "icon_text_land" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            rel1 {
               to_x: "icon_rect";
               to_y: "padding_left_top";
               relative: 1.0 1.0;
            }
            rel2 {
               to: "padding_right_bottom";
               relative: 0.0 0.0;
            }
            fixed: 1 1;
            text {
               style: "tabbar_icon_text_style_T111";
               min: 0 1;
               max: 1 0;
            }
         }
         description { state:"icon_text_land_pressed" 0.0;
            inherit: "icon_text_land" 0.0;
            text.style: "tabbar_icon_text_style_T111P";
         }
         description { state:"icon_text_land_selected" 0.0;
            inherit: "icon_text_land" 0.0;
            text.style: "tabbar_icon_text_style_T111S";
         }
         description { state:"icon_text_land_disabled" 0.0;
            inherit: "icon_text_land" 0.0;
            text.style: "tabbar_icon_text_style_T111D";
         }
      }
      part { name: "elm.icon.clipper";
         type: RECT;
         description { state: "default" 0.0;
            color_class: "B052L6";
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            color_class: "B052L6S";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color_class: "B052L6P";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color_class: "B052L6D";
         }
      }
      part { name: "elm.text.clipper";
         type: RECT;
         description { state: "default" 0.0;
            color: 255 255 255 255;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }
      part { name: "event";
         type: RECT;
         mouse_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
   }
   programs {
      program { name: "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "elm.icon.clipper";
         target:  "selected_line";
         after: "selected_text";
      }
      program { name: "selected_text";
         script{
            set_int(selected, 1);
            if (!get_int(icon_text))
              set_state(PART:"elm.text", "text_selected", 0.0);
            else if (!get_int(landscape))
              set_state(PART:"elm.text", "icon_text_selected", 0.0);
            else
              set_state(PART:"elm.text", "icon_text_land_selected", 0.0);
         }
      }
      program { name: "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "elm.icon.clipper";
         target:  "selected_line";
         after: "unselected_text";
      }
      program { name: "unselected_text";
         script{
            set_int(selected, 0);
            if (!get_int(icon_text))
              set_state(PART:"elm.text", "text", 0.0);
            else if (!get_int(landscape))
              set_state(PART:"elm.text", "icon_text", 0.0);
            else
              set_state(PART:"elm.text", "icon_text_land", 0.0);
         }
      }
      program { name: "key,pressed";
         signal: "elm,action,pressed";
         source: "elm";
         after: "pressed";
      }
      program { name: "pressed";
         signal:  "mouse,down,1";
         source:  "event";
         script {
            if ((get_int(item_state) != ITEM_STATE_DISABLED)
                && get_int(multi_down) == 0
                && get_int(mouse_down) == 0)
              {
                set_int(mouse_down, 1);
                set_state(PART:"bg_cover", "pressed", 0.0);
                if (!get_int(icon_text))
                  set_state(PART:"elm.text", "text_pressed", 0.0);
                else if (!get_int(landscape))
                  set_state(PART:"elm.text", "icon_text_pressed", 0.0);
                else
                  set_state(PART:"elm.text", "icon_text_land_pressed", 0.0);
                set_state(PART:"elm.icon.clipper", "pressed", 0.0);
                set_int(pressed, 1);
              }
         }
      }
      program { name: "key,unpressed";
         signal: "elm,action,unpressed";
         source: "elm";
         after: "unpressed";
      }
      program { name: "unpressed";
         signal:  "mouse,up,1";
         source:  "event";
         script {
            if ((get_int(item_state) != ITEM_STATE_DISABLED)
                && get_int(mouse_down) == 1)
              {
                set_int(mouse_down, 0);
                set_int(pressed, 0);
                set_state(PART:"bg_cover", "default", 0.0);
                if (get_int(selected))
                  {
                     if (!get_int(icon_text))
                       set_state(PART:"elm.text", "text_selected", 0.0);
                     else if (!get_int(landscape))
                       set_state(PART:"elm.text", "icon_text_selected", 0.0);
                     else
                       set_state(PART:"elm.text", "icon_text_land_selected", 0.0);
                    set_state(PART:"elm.icon.clipper", "selected", 0.0);
                  }
                else
                  {
                     if (!get_int(icon_text))
                       set_state(PART:"elm.text", "text", 0.0);
                     else if (!get_int(landscape))
                       set_state(PART:"elm.text", "icon_text", 0.0);
                     else
                       set_state(PART:"elm.text", "icon_text_land", 0.0);
                    set_state(PART:"elm.icon.clipper", "default", 0.0);
                  }
              }
         }
      }
      program { name: "go";
         signal:  "mouse,clicked,1";
         source:  "event";
         script {
            if (get_int(multi_down) == 0) {
               emit("elm,action,click", "elm");
               if (get_int(item_state) != ITEM_STATE_DISABLED)
                  run_program(PROGRAM:"touch_sound");
            }
         }
      }
      program { name: "touch_sound";
         action: RUN_PLUGIN "touch_sound";
      }
      program { name: "mouse,in";
         signal:  "mouse,in";
         source:  "event";
         script {
            if (get_int(multi_down) == 0)
              emit("elm,mouse,in", "elm");
         }
      }
      program { name: "mouse,out";
         signal:  "mouse,out";
         source:  "event";
         script {
            if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
              emit("elm,mouse,out", "elm");
         }
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            set_int(item_state, ITEM_STATE_ENABLED);
            set_state(PART:"bg_cover", "default", 0.0);
            if (!get_int(icon_text))
              set_state(PART:"elm.text", "text", 0.0);
            else if (!get_int(landscape))
              set_state(PART:"elm.text", "icon_text", 0.0);
            else
              set_state(PART:"elm.text", "icon_text_land", 0.0);
            set_state(PART:"elm.text.clipper", "default", 0.0);
            set_state(PART:"elm.icon.clipper", "default", 0.0);
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            set_int(item_state, ITEM_STATE_DISABLED);
            set_state(PART:"bg_cover", "disabled", 0.0);
            if (!get_int(icon_text))
              set_state(PART:"elm.text", "text_disabled", 0.0);
            else if (!get_int(landscape))
              set_state(PART:"elm.text", "icon_text_disabled", 0.0);
            else
              set_state(PART:"elm.text", "icon_text_land_disabled", 0.0);
            set_state(PART:"elm.text.clipper", "disabled", 0.0);
            set_state(PART:"elm.icon.clipper", "disabled", 0.0);
         }
      }
      program {name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program {name: "multi_up";
         signal: "elm,action,multi,cancel";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
      program { name: "text_show";
         signal: "elm,state,text,visible";
         source: "elm";
         script {
            set_int(item_text, 1);
            if (!get_int(icon_text))
              {
                if (get_int(selected))
                  set_state(PART:"elm.text", "text_selected", 0.0);
                else
                  set_state(PART:"elm.text", "text", 0.0);
                set_state(PART:"padding_left_top", "text", 0.0);
                set_state(PART:"padding_right_bottom", "text", 0.0);
              }
            else
              {
                set_state(PART:"elm.swallow.icon", "visible", 0.0);
                set_state(PART:"icon_rect", "visible", 0.0);
                if (!get_int(landscape))
                  {
                    if (get_int(selected))
                      set_state(PART:"elm.text", "icon_text_selected", 0.0);
                    else
                      set_state(PART:"elm.text", "icon_text", 0.0);
                    set_state(PART:"padding_left_top", "icon_text", 0.0);
                    set_state(PART:"padding_right_bottom", "icon_text", 0.0);
                  }
                else
                  {
                    if (get_int(selected))
                      set_state(PART:"elm.text", "icon_text_land_selected", 0.0);
                    else
                      set_state(PART:"elm.text", "icon_text_land", 0.0);
                    set_state(PART:"padding_left_top", "icon_text_land", 0.0);
                    set_state(PART:"padding_right_bottom", "icon_text_land", 0.0);
                  }
              }
         }
      }
      program { name: "text_hide";
         signal: "elm,state,text,hidden";
         source: "elm";
         script {
            set_int(item_text, 0);
            set_state(PART:"elm.text", "default", 0.0);
         }
      }
      program { name: "icon_show";
         signal: "elm,state,icon,visible";
         source: "elm";
         script {
            set_int(icon_text, 1);
            if (!get_int(landscape))
              {
                if (get_int(item_text))
                  {
                    set_state(PART:"elm.swallow.icon", "visible", 0.0);
                    set_state(PART:"icon_rect", "visible", 0.0);
                    set_state(PART:"elm.text", "icon_text", 0.0);
                  }
                else
                  set_state(PART:"elm.swallow.icon", "visible_icon_only", 0.0);
                set_state(PART:"padding_left_top", "icon_text", 0.0);
                set_state(PART:"padding_right_bottom", "icon_text", 0.0);
              }
            else
              {
                if (get_int(item_text))
                  {
                    set_state(PART:"elm.swallow.icon", "visible_land", 0.0);
                    set_state(PART:"icon_rect", "visible_land", 0.0);
                    set_state(PART:"elm.text", "icon_text_land", 0.0);
                  }
                else
                  set_state(PART:"elm.swallow.icon", "visible_icon_only", 0.0);
                set_state(PART:"padding_left_top", "icon_text_land", 0.0);
                set_state(PART:"padding_right_bottom", "icon_text_land", 0.0);
              }
         }
      }
      program { name: "icon_hide";
         signal: "elm,state,icon,hidden";
         source: "elm";
         script {
            set_int(icon_text, 0);
            set_state(PART:"elm.swallow.icon", "default", 0.0);
            set_state(PART:"elm.text", "text", 0.0);
            set_state(PART:"padding_left_top", "text", 0.0);
            set_state(PART:"padding_right_bottom", "text", 0.0);
         }
      }
      program { name: "tab_item_2";
         signal: "elm,number,item,2";
         source: "elm";
         script {
            set_int(items_number, 2);
            set_state(PART:"bg", "2items", 0.0);
         }
      }
      program { name: "tab_item_3";
         signal: "elm,number,item,3";
         source: "elm";
         script {
            set_int(items_number, 3);
            set_state(PART:"bg", "3items", 0.0);
         }
      }
      program { name: "tab_item_4";
         signal: "elm,number,item,4";
         source: "elm";
         script {
            set_int(items_number, 4);
            if (get_int(icon_text))
              {
                if (get_int(landscape))
                  set_state(PART:"bg", "4items_land", 0.0);
                else
                  set_state(PART:"bg", "4items", 0.0);
              }
            else
              {
                if (get_int(landscape))
                  set_state(PART:"bg", "scrollable_land", 0.0);
                else
                  set_state(PART:"bg", "scrollable", 0.0);
              }
         }
      }
      program { name: "tab_item_5";
         signal: "elm,number,item,5";
         source: "elm";
         script {
            set_int(items_number, 5);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_6";
         signal: "elm,number,item,6";
         source: "elm";
         script {
            set_int(items_number, 6);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_7";
         signal: "elm,number,item,7";
         source: "elm";
         script {
            set_int(items_number, 7);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_8";
         signal: "elm,number,item,8";
         source: "elm";
         script {
            set_int(items_number, 8);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_9";
         signal: "elm,number,item,9";
         source: "elm";
         script {
            set_int(items_number, 9);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_10";
         signal: "elm,number,item,10";
         source: "elm";
         script {
            set_int(items_number, 10);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_upper_5";
         script {
            if (get_int(landscape))
              set_state(PART:"bg", "scrollable_land", 0.0);
            else
              set_state(PART:"bg", "scrollable", 0.0);
         }
      }
      program {
         name: "change_to_landscape";
         script {
            if (!get_int(landscape)) {
               set_int(landscape, 1);
               if (get_int(items_number) == 4)
                 set_state(PART:"bg", "4items_land", 0.0);
               else if (get_int(items_number) == 3)
                 set_state(PART:"bg", "3items_land", 0.0);
               else if (get_int(items_number) == 2)
                 set_state(PART:"bg", "2items_land", 0.0);
               else if (get_int(items_number) > 4)
                 set_state(PART:"bg", "scrollable_land", 0.0);

               if (get_int(icon_text)) {
                 set_state(PART:"padding_left_top", "icon_text_land", 0.0);
                 set_state(PART:"padding_right_bottom", "icon_text_land", 0.0);
                 set_state(PART:"icon_rect", "visible_land", 0.0);
                 set_state(PART:"elm.swallow.icon", "visible_land", 0.0);
                 if (get_int(selected))
                   {
                     set_state(PART:"elm.text", "icon_text_land_selected", 0.0);
                     set_state(PART:"elm.icon.clipper", "selected", 0.0);
                   }
                 else if (get_int(pressed))
                   {
                     set_state(PART:"elm.text", "icon_text_land_pressed", 0.0);
                     set_state(PART:"elm.icon.clipper", "pressed", 0.0);
                   }
                 else if (get_int(item_state))
                   {
                     set_state(PART:"elm.text", "icon_text_land", 0.0);
                     set_state(PART:"elm.icon.clipper", "disabled", 0.0);
                   }
                 else
                   {
                     set_state(PART:"elm.text", "icon_text_land", 0.0);
                     set_state(PART:"elm.icon.clipper", "default", 0.0);
                   }
                 }
            }
         }
      }
      program {
         name: "change_to_portrait";
         script {
            if (get_int(landscape)) {
              set_int(landscape, 0);
               if (get_int(items_number) == 4)
                 {
                   if (get_int(icon_text))
                     set_state(PART:"bg", "4items", 0.0);
                   else
                     set_state(PART:"bg", "scrollable", 0.0);
                 }
               else if (get_int(items_number) == 3)
                 set_state(PART:"bg", "3items", 0.0);
               else if (get_int(items_number) == 2)
                 set_state(PART:"bg", "2items", 0.0);
               else if (get_int(items_number) > 4)
                 set_state(PART:"bg", "scrollable", 0.0);

               if (get_int(icon_text)) {
                 set_state(PART:"padding_left_top", "icon_text", 0.0);
                 set_state(PART:"padding_right_bottom", "icon_text", 0.0);
                 set_state(PART:"icon_rect", "visible", 0.0);
                 set_state(PART:"elm.swallow.icon", "visible", 0.0);
                 if (get_int(selected))
                   {
                     set_state(PART:"elm.text", "icon_text_selected", 0.0);
                     set_state(PART:"elm.icon.clipper", "selected", 0.0);
                   }
                 else if (get_int(pressed))
                   {
                     set_state(PART:"elm.text", "icon_text_pressed", 0.0);
                     set_state(PART:"elm.icon.clipper", "pressed", 0.0);
                   }
                 else if (get_int(item_state))
                   {
                     set_state(PART:"elm.text", "icon_text", 0.0);
                     set_state(PART:"elm.icon.clipper", "disabled", 0.0);
                   }
                 else
                   {
                     set_state(PART:"elm.text", "icon_text", 0.0);
                     set_state(PART:"elm.icon.clipper", "default", 0.0);
                   }
               }
            }
         }
      }
      program { name: "landscape_mode";
         source: "elm";
         signal: "elm,state,orient,90";
         after: "change_to_landscape";
      }
      program { name: "landscape_mode2";
         source: "elm";
         signal: "elm,state,orient,270";
         after: "change_to_landscape";
      }
      program { name: "portrait_mode";
         source: "elm";
         signal: "elm,state,orient,0";
         after: "change_to_portrait";
      }
      program { name: "portrait_mode2";
         source: "elm";
         signal: "elm,state,orient,180";
         after: "change_to_portrait";
      }
   }
}

group { name: "elm/toolbar/object/default";
   parts {
      part { name: "elm.swallow.object"; // object group
         type: SWALLOW;
         description {
             state: "default" 0.0;
         }
      }
   }
}

group { name: "elm/toolbar/base/tabbar_with_title";
   parts {
      part { name: "base";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
         }
      }
      part { name: "base_bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            rel2.offset: -1 -1;
            color_class: "B011";
         }
      }
     part { name: "clipper";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            rel2.offset: -1 -1;
         }
      }
      part { name: "elm.swallow.content";
         clip_to: "clipper";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            rel2.offset: -1 -1;
         }
      }
   }
}

group { name: "elm/toolbar/item/tabbar_with_title";
   script {
      public selected = 0;
      public pressed = 0;
      public item_state = ITEM_STATE_ENABLED;
      public items_number = 0;
      public icon_text = 0;
      public mouse_down = 0;
      public multi_down = 0;
      public landscape = 0;
      public item_text = 0;
   }
   parts {
      part { name: "bg";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
         }
         description { state: "2items" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_TWO_ITEMS_SIZE_INC;
         }
         description { state: "3items" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_THREE_ITEMS_SIZE_INC;
         }
         description { state: "scrollable" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_SCROLLABLE_ITEMS_SIZE_INC;
         }
         description { state: "2items_land" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_LANDSCAPE_TWO_ITEMS_SIZE_INC;
         }
         description { state: "3items_land" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_LANDSCAPE_THREE_ITEMS_SIZE_INC;
         }
         description { state: "4items_land" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_LANDSCAPE_FOUR_ITEMS_SIZE_INC;
         }
         description { state: "scrollable_land" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_LANDSCAPE_SCROLLABLE_ITEMS_SIZE_INC;
         }
      }
      part { name: "selected_line";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1 {
                to: "elm.text";
                relative: 0.0 1.0;
            }
            rel2 {
                to: "elm.text";
                relative: 1.0 1.0;
            }
            fixed: 0 1;
            min: TABBAR_SELECTED_LINE_SIZE_INC;
            visible: 0;
            color_class: "B0514S";
            align: 0.5 0.0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "bg_cover";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            color_class: "B0514";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color_class: "B0514P";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "padding_left_top";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            rel2.relative: 0.0 0.0;
            min: 0 0;
            fixed: 1 1;
         }
         description { state: "text" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_TEXT_LEFT_TOP_PADDING_SIZE_INC;
         }
         description { state: "icon_text" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_ICON_TEXT_LAND_LEFT_TOP_PADDING_SIZE_INC;
         }
      }
      part { name: "padding_right_bottom";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            align: 1.0 1.0;
            rel1.relative: 1.0 1.0;
            min: 0 0;
            fixed: 1 1;
         }
         description { state: "text" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_TEXT_RIGHT_BOTTOM_PADDING_SIZE_INC;
         }
         description { state: "icon_text" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_ICON_TEXT_LAND_RIGHT_BOTTOM_PADDING_SIZE_INC;
         }
      }
      part {
         name: "icon_rect";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 0 0;
            fixed: 1 0;
            rel2 {
               relative: 0.0 1.0;
            }
            align: 0.0 0.5;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_ICON_RECT_SIZE_INC;
         }
      }

      part { name: "padding_icon_text";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 0;
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               to_x: "elm.text";
               relative: 0.0 0.0;
            }
            rel2 {
               to_x: "elm.text";
               relative: 0.0 1.0;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            min: TABBAR_ICON_TEXT_PAD_INC;
         }
      }

      part { name: "elm.swallow.icon";
         type: SWALLOW;
         scale: 1;
         clip_to: "elm.icon.clipper";
         description { state: "default" 0.0;
            visible: 0;
            min: TABBAR_ICON_SIZE_INC;
            aspect: 1.0 1.0;
            aspect_preference: HORIZONTAL;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 1.0 0.5;
            fixed: 1 1;
            rel1 {
               to_x: "padding_icon_text";
               relative: 0.0 0.0;
            }
            rel2 {
               to_x: "padding_icon_text";
               relative: 0.0 1.0;
            }
         }
         description { state: "visible_icon_only" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0.5 0.5;
            fixed: 1 1;
            rel1 {
               to: "padding_left_top";
               relative: 1.0 1.0;
            }
            rel2 {
               to: "padding_right_bottom";
               relative: 0.0 0.0;
            }
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         clip_to: "elm.text.clipper";
         description { state: "default" 0.0;
            visible: 0;
         }
         description { state: "text" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            rel1 {
               to: "padding_left_top";
               relative: 1.0 1.0;
            }
            rel2 {
               to: "padding_right_bottom";
               relative: 0.0 0.0;
            }
            fixed: 1 1;
            text {
               style: "tabbar_text_style_T1117";
               min: 0 1;
               max: 1 0;
            }
         }
         description { state:"text_pressed" 0.0;
            inherit: "text" 0.0;
            text.style: "tabbar_text_style_T1117P";
         }
         description { state:"text_selected" 0.0;
            inherit: "text" 0.0;
            text.style: "tabbar_text_style_T1117S";
         }
         description { state:"text_disabled" 0.0;
            inherit: "text" 0.0;
            text.style: "tabbar_text_style_T1117D";
         }
         description { state: "icon_text" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            rel1 {
               to_x: "icon_rect";
               to_y: "padding_left_top";
               relative: 1.0 1.0;
            }
            rel2 {
               to: "padding_right_bottom";
               relative: 0.0 0.0;
            }
            fixed: 1 1;
            text {
               style: "tabbar_icon_text_style_T111";
               min: 0 1;
               max: 1 0;
            }
         }
         description { state:"icon_text_pressed" 0.0;
            inherit: "icon_text" 0.0;
            text.style: "tabbar_icon_text_style_T111P";
         }
         description { state:"icon_text_selected" 0.0;
            inherit: "icon_text" 0.0;
            text.style: "tabbar_icon_text_style_T111S";
         }
         description { state:"icon_text_disabled" 0.0;
            inherit: "icon_text" 0.0;
            text.style: "tabbar_icon_text_style_T111D";
         }
      }
      part { name: "elm.icon.clipper";
         type: RECT;
         description { state: "default" 0.0;
            color_class: "B052L6";
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            color_class: "B052L6S";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color_class: "B052L6P";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color_class: "B052L6D";
         }
      }
      part { name: "elm.text.clipper";
         type: RECT;
         description { state: "default" 0.0;
            color: 255 255 255 255;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }
      part { name: "event";
         type: RECT;
         mouse_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
   }
   programs {
      program { name: "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "elm.icon.clipper";
         target:  "selected_line";
         after: "selected_text";
      }
      program { name: "selected_text";
         script{
            set_int(selected, 1);
            if (!get_int(icon_text))
              set_state(PART:"elm.text", "text_selected", 0.0);
            else
              set_state(PART:"elm.text", "icon_text_selected", 0.0);
         }
      }
      program { name: "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "elm.icon.clipper";
         target:  "selected_line";
         after: "unselected_text";
      }
      program { name: "unselected_text";
         script{
            set_int(selected, 0);
            if (!get_int(icon_text))
              set_state(PART:"elm.text", "text", 0.0);
            else
              set_state(PART:"elm.text", "icon_text", 0.0);
         }
      }
      program { name: "key,pressed";
         signal: "elm,action,pressed";
         source: "elm";
         after: "pressed";
      }
      program { name: "pressed";
         signal:  "mouse,down,1";
         source:  "event";
         script {
            if ((get_int(item_state) != ITEM_STATE_DISABLED)
                && get_int(multi_down) == 0
                && get_int(mouse_down) == 0)
              {
                set_int(mouse_down, 1);
                set_state(PART:"bg_cover", "pressed", 0.0);
                if (!get_int(icon_text))
                  set_state(PART:"elm.text", "text_pressed", 0.0);
                else
                  set_state(PART:"elm.text", "icon_text_pressed", 0.0);
                set_state(PART:"elm.icon.clipper", "pressed", 0.0);
                set_int(pressed, 1);
              }
         }
      }
      program { name: "key,unpressed";
         signal: "elm,action,unpressed";
         source: "elm";
         after: "unpressed";
      }
      program { name: "unpressed";
         signal:  "mouse,up,1";
         source:  "event";
         script {
            if ((get_int(item_state) != ITEM_STATE_DISABLED)
                && get_int(mouse_down) == 1)
              {
                set_int(mouse_down, 0);
                set_int(pressed, 0);
                set_state(PART:"bg_cover", "default", 0.0);
                if (get_int(selected))
                  {
                     if (!get_int(icon_text))
                       set_state(PART:"elm.text", "text_selected", 0.0);
                     else
                       set_state(PART:"elm.text", "icon_text_selected", 0.0);
                    set_state(PART:"elm.icon.clipper", "selected", 0.0);
                  }
                else
                  {
                     if (!get_int(icon_text))
                       set_state(PART:"elm.text", "text", 0.0);
                     else
                       set_state(PART:"elm.text", "icon_text", 0.0);
                    set_state(PART:"elm.icon.clipper", "default", 0.0);
                  }
              }
         }
      }
      program { name: "go";
         signal:  "mouse,clicked,1";
         source:  "event";
         script {
            if (get_int(multi_down) == 0) {
               emit("elm,action,click", "elm");
               if (get_int(item_state) != ITEM_STATE_DISABLED)
                  run_program(PROGRAM:"touch_sound");
            }
         }
      }
      program { name: "touch_sound";
         action: RUN_PLUGIN "touch_sound";
      }
      program { name: "mouse,in";
         signal:  "mouse,in";
         source:  "event";
         script {
            if (get_int(multi_down) == 0)
              emit("elm,mouse,in", "elm");
         }
      }
      program { name: "mouse,out";
         signal:  "mouse,out";
         source:  "event";
         script {
            if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
              emit("elm,mouse,out", "elm");
         }
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            set_int(item_state, ITEM_STATE_ENABLED);
            set_state(PART:"bg_cover", "default", 0.0);
            if (!get_int(icon_text))
              set_state(PART:"elm.text", "text", 0.0);
            else
              set_state(PART:"elm.text", "icon_text", 0.0);
            set_state(PART:"elm.text.clipper", "default", 0.0);
            set_state(PART:"elm.icon.clipper", "default", 0.0);
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            set_int(item_state, ITEM_STATE_DISABLED);
            set_state(PART:"bg_cover", "disabled", 0.0);
            if (!get_int(icon_text))
              set_state(PART:"elm.text", "text_disabled", 0.0);
            else
              set_state(PART:"elm.text", "icon_text_disabled", 0.0);
            set_state(PART:"elm.text.clipper", "disabled", 0.0);
            set_state(PART:"elm.icon.clipper", "disabled", 0.0);
         }
      }
      program {name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program {name: "multi_up";
         signal: "elm,action,multi,cancel";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
      program { name: "text_show";
         signal: "elm,state,text,visible";
         source: "elm";
         script {
            set_int(item_text, 1);
            if (!get_int(icon_text))
              {
                set_state(PART:"elm.text", "text", 0.0);
                set_state(PART:"padding_left_top", "text", 0.0);
                set_state(PART:"padding_right_bottom", "text", 0.0);
              }
            else
              {
                set_state(PART:"elm.swallow.icon", "visible", 0.0);
                set_state(PART:"icon_rect", "visible", 0.0);
                set_state(PART:"elm.text", "icon_text", 0.0);
                set_state(PART:"padding_left_top", "icon_text", 0.0);
                set_state(PART:"padding_right_bottom", "icon_text", 0.0);
              }
         }
      }
      program { name: "text_hide";
         signal: "elm,state,text,hidden";
         source: "elm";
         script {
            set_int(item_text, 0);
            set_state(PART:"elm.text", "default", 0.0);
         }
      }
      program { name: "icon_show";
         signal: "elm,state,icon,visible";
         source: "elm";
         script {
            set_int(icon_text, 1);
            if (get_int(item_text))
              {
                set_state(PART:"elm.swallow.icon", "visible", 0.0);
                set_state(PART:"padding_icon_text", "visible", 0.0);
                set_state(PART:"icon_rect", "visible", 0.0);
                set_state(PART:"elm.text", "icon_text", 0.0);
              }
            else
              set_state(PART:"elm.swallow.icon", "visible_icon_only", 0.0);
            set_state(PART:"padding_left_top", "icon_text", 0.0);
            set_state(PART:"padding_right_bottom", "icon_text", 0.0);
         }
      }
      program { name: "icon_hide";
         signal: "elm,state,icon,hidden";
         source: "elm";
         script {
            set_int(icon_text, 0);
            set_state(PART:"elm.swallow.icon", "default", 0.0);
            set_state(PART:"padding_icon_text", "default", 0.0);
            set_state(PART:"elm.text", "text", 0.0);
            set_state(PART:"padding_left_top", "text", 0.0);
            set_state(PART:"padding_right_bottom", "text", 0.0);
         }
      }
      program { name: "tab_item_2";
         signal: "elm,number,item,2";
         source: "elm";
         script {
            set_int(items_number, 2);
            set_state(PART:"bg", "2items", 0.0);
         }
      }
      program { name: "tab_item_3";
         signal: "elm,number,item,3";
         source: "elm";
         script {
            set_int(items_number, 3);
            set_state(PART:"bg", "3items", 0.0);
         }
      }
      program { name: "tab_item_4";
         signal: "elm,number,item,4";
         source: "elm";
         script {
            set_int(items_number, 4);
            if (get_int(icon_text))
              {
                if (get_int(landscape))
                  set_state(PART:"bg", "4items_land", 0.0);
                else
                  set_state(PART:"bg", "4items", 0.0);
              }
            else
              {
                if (get_int(landscape))
                  set_state(PART:"bg", "scrollable_land", 0.0);
                else
                  set_state(PART:"bg", "scrollable", 0.0);
              }
         }
      }
      program { name: "tab_item_5";
         signal: "elm,number,item,5";
         source: "elm";
         script {
            set_int(items_number, 5);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_6";
         signal: "elm,number,item,6";
         source: "elm";
         script {
            set_int(items_number, 6);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_7";
         signal: "elm,number,item,7";
         source: "elm";
         script {
            set_int(items_number, 7);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_8";
         signal: "elm,number,item,8";
         source: "elm";
         script {
            set_int(items_number, 8);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_9";
         signal: "elm,number,item,9";
         source: "elm";
         script {
            set_int(items_number, 9);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_10";
         signal: "elm,number,item,10";
         source: "elm";
         script {
            set_int(items_number, 10);
         }
         after: "tab_item_upper_5";
      }
      program { name: "tab_item_upper_5";
         script {
            if (get_int(landscape))
              set_state(PART:"bg", "scrollable_land", 0.0);
            else
              set_state(PART:"bg", "scrollable", 0.0);
         }
      }
      program {
         name: "change_to_landscape";
         script {
            if (!get_int(landscape)) {
               set_int(landscape, 1);
               if (get_int(items_number) == 4)
                 set_state(PART:"bg", "4items_land", 0.0);
               else if (get_int(items_number) == 3)
                 set_state(PART:"bg", "3items_land", 0.0);
               else if (get_int(items_number) == 2)
                 set_state(PART:"bg", "2items_land", 0.0);
               else if (get_int(items_number) > 4)
                 set_state(PART:"bg", "scrollable_land", 0.0);
            }
         }
      }
      program {
         name: "change_to_portrait";
         script {
            if (get_int(landscape)) {
              set_int(landscape, 0);
               if (get_int(items_number) == 4)
                 {
                   if (get_int(icon_text))
                     set_state(PART:"bg", "4items", 0.0);
                   else
                     set_state(PART:"bg", "scrollable", 0.0);
                 }
               else if (get_int(items_number) == 3)
                 set_state(PART:"bg", "3items", 0.0);
               else if (get_int(items_number) == 2)
                 set_state(PART:"bg", "2items", 0.0);
               else if (get_int(items_number) > 4)
                 set_state(PART:"bg", "scrollable", 0.0);
            }
         }
      }
      program { name: "landscape_mode";
         source: "elm";
         signal: "elm,state,orient,90";
         after: "change_to_landscape";
      }
      program { name: "landscape_mode2";
         source: "elm";
         signal: "elm,state,orient,270";
         after: "change_to_landscape";
      }
      program { name: "portrait_mode";
         source: "elm";
         signal: "elm,state,orient,0";
         after: "change_to_portrait";
      }
      program { name: "portrait_mode2";
         source: "elm";
         signal: "elm,state,orient,180";
         after: "change_to_portrait";
      }
   }
}

group { name: "elm/toolbar/base/navigationbar";
   data {
      item: "focus_highlight" "on";
   }
   parts {
      part { name: "base";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 TOOLBAR_NAVI_HEIGHT_INC;
            color_class: "B011";
         }
      }
      part { name: "left_padding";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description {
            state: "default" 0.0;
            min: TOOLBAR_NAVI_PADDING_INC 0;
            fixed: 1 0;
            rel1.to: "base";
            rel2 {
                relative: 0.0 1.0;
                to: "base";
            }
            align: 0.0 0.0;
            color_class: "B012L1";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part { name: "separator";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 0 1;
            fixed: 0 1;
            align: 0.0 0.0;
            rel1.to: "base";
            rel2 {
                relative: 1.0 0.0;
                to: "base";
            }
            color_class: "B012L4";
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         description {
            state: "default" 0.0;
            rel1 {
                relative: 1.0 1.0;
                to_x:"left_padding";
                to_y:"separator";
            }
            rel2.to: "base";
        }
      }
      part { name: "event";
         type: RECT;
         mouse_events: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
   }
}

group { name: "elm/toolbar/item/navigationbar";
   images {
      set {
         name: "core_navigation_bar_bg";
         image {
            image: SMALL"images/Navigation_elements/core_navigation_bar_bg.png" COMP;
         }
         image {
            image: MEDIUM"images/Navigation_elements/core_navigation_bar_bg.png" COMP;
         }
      }
      set {
         name: "core_navigation_bar_icon_arrow";
         image {
            image: SMALL"images/Navigation_elements/core_navigation_bar_icon_arrow.png" COMP;
         }
         image {
            image: MEDIUM"images/Navigation_elements/core_navigation_bar_icon_arrow.png" COMP;
         }
      }
   }
   data.item: "transition_animation_on" "0";
   script {
      public item_state = ITEM_STATE_ENABLED;
      public mouse_down = 0;
      public multi_down = 0;
   }
   parts {
      part { name: "bg";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
         }
      }
      part { name: "divider_bg";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: TOOLBAR_NAVI_DIVIDER_INC 0;
            fixed: 1 0;
            color_class: "B012L1";
            rel1 {
                relative: 1.0 0.0;
                to: "bg";
            }
            rel2 {
                relative: 1.0 1.0;
                to: "bg";
            }
            align: 1.0 0.5;
            visible: 1;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "divider";
         type: IMAGE;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: TOOLBAR_NAVI_DIVIDER_INC 0;
            fixed: 1 0;
            color_class: "B012L3";
            rel1.to: "divider_bg";
            rel2.to: "divider_bg";
            visible: 1;
            image.normal: "core_navigation_bar_icon_arrow";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "base";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            color_class: "B012L1";
            rel2 {
                relative: 0.0 1.0;
                to: "divider_bg";
            }
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         clip_to: "elm.text.clipper";
         description { state: "default" 0.0;
            align: 0.0 0.5;
            rel2 {
               relative: 0.0 1.0;
               to: "divider_bg";
            }
            text {
               style: "tabbar_navi_text_style_T042";
               min: 1 1;
               max: 1 1;
               align: 0.0 0.5;
            }
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            text.style: "tabbar_navi_text_style_T042P";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text.style: "tabbar_navi_text_style_T042D";
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text.style: "tabbar_navi_text_style_T042P";
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            text.style: "tabbar_navi_text_style_T042P";
         }
      }
      part { name: "elm.text.clipper";
         mouse_events: 0;
         type: RECT;
         description { state: "default" 0.0;
            color: 255 255 255 255;
         }
         description { state: "animation" 0.0;
            color: 255 255 255 0;
         }
         description { state: "disabled" 0.0;
            color: 255 255 255 255;
         }
      }
      part { name: "right_padding";
         type: IMAGE;
         mouse_events: 0;
         scale: 1;
         description {
            state: "default" 0.0;
            min: TOOLBAR_NAVI_DIVIDER_INC 0;
            fixed: 1 0;
            visible: 0;
            rel1 {
                relative: 1.0 0.0;
                to: "bg";
            }
            rel2 {
                relative: 1.0 1.0;
                to: "bg";
            }
            align: 1.0 1.0;
            color_class: "B012L1";
            image.normal: "core_navigation_bar_bg";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "event";
         type: RECT;
         mouse_events: 1;
         ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "event2";
         type: RECT;
         mouse_events: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
   }
   programs {
      program { name: "key,pressed";
         signal: "elm,action,pressed";
         source: "elm";
         after: "pressed";
      }
      program { name: "pressed";
         signal:  "mouse,down,1";
         source:  "event";
         script {
            if ((get_int(item_state) != ITEM_STATE_DISABLED)
                 && get_int(multi_down) == 0
                 && get_int(mouse_down) == 0)
              {
                set_int(mouse_down, 1);
                set_state(PART:"elm.text", "pressed", 0.0);
              }
         }
      }
      program { name: "key,unpressed";
         signal: "elm,action,unpressed";
         source: "elm";
         after: "unpressed";
      }
      program { name: "unpressed";
         signal:  "mouse,up,1";
         source:  "event2";
         script {
            if ((get_int(item_state) != ITEM_STATE_DISABLED)
                && get_int(mouse_down) == 1)
              {
                set_int(mouse_down, 0);
                set_state(PART:"elm.text", "visible", 0.0);
              }
         }
      }
      program { name: "go";
         signal:  "mouse,clicked,1";
         source:  "event";
         script {
            if (get_int(multi_down) == 0) {
               emit("elm,action,click", "elm");
               if (get_int(item_state) != ITEM_STATE_DISABLED)
                  run_program(PROGRAM:"touch_sound");
            }
         }
      }
      program { name: "touch_sound";
         action: RUN_PLUGIN "touch_sound";
      }
      program { name: "mouse,in";
         signal:  "mouse,in";
         source:  "event";
         script {
            if (get_int(multi_down) == 0)
              emit("elm,mouse,in", "elm");
         }
      }
      program { name: "mouse,out";
         signal:  "mouse,out";
         source:  "event";
         script {
            if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
              emit("elm,mouse,out", "elm");
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            set_int(item_state, ITEM_STATE_DISABLED);
            set_state(PART:"bg", "disabled", 0.0);
            set_state(PART:"elm.text", "disabled", 0.0);
            set_state(PART:"elm.text.clipper", "disabled", 0.0);
         }
      }
      program { name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script{
            set_int(multi_down, 1);
         }
      }
      program { name: "multi_up";
         signal: "elm,action,multi,cancel";
         source: "elm";
         script {
               set_int(multi_down, 0);
         }
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            set_int(item_state, ITEM_STATE_ENABLED);
            set_state(PART:"bg", "default", 0.0);
            set_state(PART:"elm.text", "default", 0.0);
            set_state(PART:"elm.text.clipper", "default", 0.0);
         }
      }
      program { name: "divider_visible_1";
         signal: "elm,order,first,item";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "divider";
         target: "divider_bg";
         target: "right_padding";
      }
      program { name: "divider_visible_2";
         signal: "elm,order,default,item";
         source: "elm";
         script {
            set_state(PART:"divider", "default", 0.0);
            set_state(PART:"divider_bg", "default", 0.0);
            set_state(PART:"right_padding", "default", 0.0);
         }
      }
      program { name: "divider_hidden";
         signal: "elm,order,last,item";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "divider";
         target: "divider_bg";
         target: "right_padding";
      }
      program { name: "highlight_on";
         signal: "elm,highlight,on";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "highlight_off";
         signal: "elm,highlight,off";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "go_active";
         signal:  "elm,state,selected";
         source:  "elm";
         action:  STATE_SET "selected" 0.0;
         target:  "elm.text";
      }
      program { name: "go_passive";
         signal:  "elm,state,unselected";
         source:  "elm";
         action:  STATE_SET "default" 0.0;
         target:  "elm.text";
      }
   }
}

group { name: "elm/toolbar/more/default";
   parts {
      part { name: "elm.swallow.content";
         type: SWALLOW;
         description { state: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.swallow.content2";
         type: SWALLOW;
         description { state: "default" 0.0;
            visible: 0;
         }
      }
   }
}
