/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#define ATTACH_PANEL_TRANS_TIME 0.5
#define ATTACH_PANEL_STATE_HIDE 0
#define ATTACH_PANEL_STATE_HALF 1
#define ATTACH_PANEL_STATE_FULL 2

group { name: "elm/conformant/base/default";
   script {
      public indicator_visible = 0;     //Indicator visible check
      public indicator_opacity_mode = 0; //0=opaque, 1=transparent, 2=translucent
      public clipboard_disable = 0;     //check clipboard enable/disable
      public keypad_disable = 0;        //check virtualkeypad enable/disable
      public attach_panel_state = ATTACH_PANEL_STATE_HIDE;  //check attach_panel state
      public landscape_mode = 0;        //Landscape mode status
   }
   parts {
      part { name: "base";
         type: SPACER;
         description { state: "default" 0.0;
         }
      }
      part { name: "indicator_base";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.0;
            min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
            rel2.relative: 1.0 0.0;
         }
      }
      part { name: "indicator_adapter";
         type: SPACER;
         description { state: "default" 0.0;
            rel1 { relative: 0.0 0.0; to: "indicator_base"; }
            rel2 { relative: 1.0 1.0; to: "indicator_base"; }
         }
         //just in case: hide
         description { state: "hide" 0.0;
            inherit: "default" 0.0;
            rel1 { relative: 0.0 -1.0; to: "indicator_base"; }
            rel2 { relative: 1.0  0.0; to: "indicator_base"; }
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.relative: 0.0 1.0;
            rel1.to: "indicator_bg";
            rel2.relative: 1.0 0.0;
            rel2.to: "sip_area";
         }
         description { state: "disable_sip" 0.0;
            inherit: "default" 0.0;
            rel2.relative: 1.0 1.0;
            rel2.to: "base";
         }
         description { state: "show_attach_panel" 0.0; //attach_panel: visible
            inherit: "default" 0.0;
            rel2.to: "elm.swallow.attach_panel_base";
         }
      }
      part { name: "elm.swallow.ug";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
         }
      }
      part { name: "indicator_bg";
         type: RECT;
         description { state: "default" 0.0;
            rel1 { to: "indicator_adapter"; }
            rel2 { to: "indicator_adapter"; }
            color: 61 184 204 255;
         }
         description { state: "transparent" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "translucent" 0.0;
            rel1.relative: 0 0;
            rel2.relative: 1 0;
            fixed: 0 1;
            visible: 0;
         }
      }
      part { name: "elm.swallow.indicator_bg";
         type: SWALLOW;
         description { state: "default" 0.0;
            rel1.to: "indicator_bg";
            rel2.to: "indicator_bg";
         }
         description { state: "transparent" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "translucent" 0.0;
            rel1.relative: 0 0;
            rel2.relative: 1 0;
            fixed: 0 1;
            visible: 0;
         }
      }
      part { name: "elm.swallow.indicator";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "indicator_adapter";
            rel2.to: "indicator_adapter";
         }
      }
      part { name: "elm.swallow.attach_panel_base";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.0 1.0;
            rel1.relative: 0.0 1.0;
         }
      }
      part { name: "elm.swallow.attach_panel";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 0 1;
            rel1.to_y: "elm.swallow.attach_panel_base";
            rel2.to_y: "elm.swallow.attach_panel_base";
            visible: 0;
         }
         description { state: "half" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "full" 0.0;
            inherit: "default" 0.0;
            rel1.to_y: "indicator_bg";
            rel1.relative: 0.0 1.0;
            visible: 1;
         }
      }
      part { name: "sip_area";
         type: SPACER;
         description { state: "default" 0.0;
            fixed: 0 1;
            min: 0 0;
            rel1.to_y: "elm.swallow.virtualkeypad";
            rel2.to_y: "elm.swallow.virtualkeypad";
         }
         description { state: "clipboard_on" 0.0;
            inherit: "default" 0.0;
            rel1.to_y: "elm.swallow.clipboard";
            rel2.to_y: "elm.swallow.clipboard";
         }
      }
      part { name: "elm.swallow.clipboard";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.0 1.0;
            rel1.relative: 0.0 1.0;
         }
      }
      part { name: "elm.swallow.virtualkeypad";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.0 1.0;
            rel1.relative: 0.0 1.0;
         }
      }
   }
   programs {
      program { name: "show_indicator";
          signal: "elm,state,indicator,show";
          source: "elm";
          script {
             set_int(indicator_visible, 1);
             //Portrait
             if (get_int(landscape_mode) == 0) {
                set_state(PART:"indicator_adapter", "default", 0.0);
             }
             //Landscape
             else
                set_state(PART:"indicator_adapter", "hide", 0.0);
          }
      }
      program { name: "hide_indicator";
          signal: "elm,state,indicator,hide";
          source: "elm";
          script {
             set_int(indicator_visible, 0);
             set_state(PART:"indicator_adapter", "hide", 0.0);
          }
      }
      program { name: "show_indicator_transition";
          action: STATE_SET "default" 0.0;
          target: "indicator_adapter";
          transition: DECELERATE 0.2;
      }
      program { name: "hide_indicator_transition";
          action: STATE_SET "hide" 0.0;
          target: "indicator_adapter";
          transition: DECELERATE 0.2;
      }
      program { name: "show_indicator_effect"; //show indicator using effect
          signal: "indicator,show,effect";
          source: "elm";
          script {
             if (get_int(indicator_visible) == 0)
               run_program(PROGRAM:"show_indicator_transition");
          }
      }
      program { name: "hide_indicator_effect"; //show indicator using effect
          signal: "indicator,hide,effect";
          source: "elm";
          script {
             if (get_int(indicator_visible) == 1)
               run_program(PROGRAM:"hide_indicator_transition");
          }
      }
      program { name: "opaque_state";
          script {
            set_state(PART:"indicator_bg", "default", 0.0);
            set_state(PART:"elm.swallow.indicator_bg", "default", 0.0);
          }
      }
      program { name: "transparent_state";
         script {
            set_state(PART:"indicator_bg", "transparent", 0.0);
            set_state(PART:"elm.swallow.indicator_bg", "transparent", 0.0);
         }
      }
      program { name: "translucent_state";
         script {
            set_state(PART:"indicator_bg", "translucent", 0.0);
            set_state(PART:"elm.swallow.indicator_bg", "translucent", 0.0);
         }
      }
      program { name: "opaque_indicator";
          signal: "elm,state,indicator,opaque";
          source: "elm";
          script {
            set_int(indicator_opacity_mode, 0);
            run_program(PROGRAM:"opaque_state");
          }
      }
      program { name: "transparent_indicator";
          signal: "elm,state,indicator,transparent";
          source: "elm";
          script {
             set_int(indicator_opacity_mode, 1);
             run_program(PROGRAM:"transparent_state");
          }
      }
      program { name: "translucent_indicator";
          signal: "elm,state,indicator,translucent";
          source: "elm";
          script {
             set_int(indicator_opacity_mode, 2);
             run_program(PROGRAM:"translucent_state");
          }
      }
      program { name: "show_full_attach_panel";
         signal: "elm,state,attach_panel,show,full";
         source: "";
         script {
            set_int(attach_panel_state, ATTACH_PANEL_STATE_FULL);
         }
         after: "show_full_attach_panel2";
      }
      program { name: "show_full_attach_panel2";
         action: STATE_SET "full" 0.0;
         target: "elm.swallow.attach_panel";
         transition: DECELERATE ATTACH_PANEL_TRANS_TIME;
      }
      program { name: "show_half_attach_panel";
         signal: "elm,state,attach_panel,show,half";
         source: "";
         script {
            set_int(attach_panel_state, ATTACH_PANEL_STATE_HALF);
         }
         after: "show_half_attach_panel2";
      }
      program { name: "show_half_attach_panel2";
         action: STATE_SET "half" 0.0;
         target: "elm.swallow.attach_panel";
         transition: DECELERATE ATTACH_PANEL_TRANS_TIME;
      }
      program { name: "show_attach_panel_started";
         signal: "elm,state,attach_panel,show,started";
         source: "";
         script {
            set_int(attach_panel_state, ATTACH_PANEL_STATE_HALF);
            //set attach_panel state
            set_state(PART:"elm.swallow.attach_panel", "half", 0.0);
            //set content state
            set_state(PART:"elm.swallow.content", "show_attach_panel", 0.0);
         }
      }
      program { name: "hide_attach_panel_finished";
         signal: "elm,state,attach_panel,hide,finished";
         source: "";
         script {
            set_int(attach_panel_state, ATTACH_PANEL_STATE_HIDE);
            //set attach_panel state
            set_state(PART:"elm.swallow.attach_panel", "default", 0.0);
            //set content state
            if (get_int(keypad_disable) == 1 && get_int(clipboard_disable) == 1)
              set_state(PART:"elm.swallow.content", "disable_sip", 0.0);
            else
              set_state(PART:"elm.swallow.content", "default", 0.0);
         }
      }
      program { name: "enable_clipboard";
         signal: "elm,state,clipboard,enable";
         source: "";
         script {
            set_int(clipboard_disable, 0);
            //set content state
            set_state(PART:"elm.swallow.content", "default", 0.0);
         }
      }
      program { name: "disable_clipboard";
         signal: "elm,state,clipboard,disable";
         source: "";
         script {
            set_int(clipboard_disable, 1);
            set_state(PART:"sip_area", "default", 0.0);
            if (get_int(attach_panel_state) != ATTACH_PANEL_STATE_HIDE) {
               set_state(PART:"elm.swallow.content", "show_attach_panel", 0.0);
            }
            else {
               if (get_int(keypad_disable) == 1)
                 set_state(PART:"elm.swallow.content", "disable_sip", 0.0);
               else
                 set_state(PART:"elm.swallow.content", "default", 0.0);
            }
         }
      }
      program { name: "enable_virtualkeypad";
         signal: "elm,state,virtualkeypad,enable";
         source: "";
         script {
            set_int(keypad_disable, 0);
            set_state(PART:"elm.swallow.content", "default", 0.0);
         }
      }
      program { name: "disable_virtualkeypad";
         signal: "elm,state,virtualkeypad,disable";
         source: "";
         script {
            set_int(keypad_disable, 1);
            if (get_int(attach_panel_state) != ATTACH_PANEL_STATE_HIDE) {
               set_state(PART:"elm.swallow.content", "show_attach_panel", 0.0);
            }
            else {
               if (get_int(clipboard_disable) == 1)
                 {
                    set_state(PART:"sip_area", "clipboard_on", 0.0);
                    set_state(PART:"elm.swallow.content", "disable_sip", 0.0);
                 }
               else
                 set_state(PART:"elm.swallow.content", "default", 0.0);
            }
         }
      }
      program { name: "change_to_landscape";
          script {
             set_int(landscape_mode, 1);
             set_state(PART:"indicator_adapter", "hide", 0.0);
          }
      }
      program { name: "change_to_portrait";
         script {
            set_int(landscape_mode, 0);
            if (get_int(indicator_visible) == 1) {
                set_state(PART:"indicator_adapter", "default", 0.0);
            }
         }
      }
      program { name: "landscape_mode";
         source: "elm";
         signal: "elm,state,orient,90";
         after: "change_to_landscape";
      }
      program { name: "landscape_mode2";
         source: "elm";
         signal: "elm,state,orient,270";
         after: "change_to_landscape";
      }
      program { name: "portrait_mode";
         source: "elm";
         signal: "elm,state,orient,0";
         after: "change_to_portrait";
      }
      program { name: "portrait_mode2";
         source: "elm";
         signal: "elm,state,orient,180";
         after: "change_to_portrait";
      }
   }
}
