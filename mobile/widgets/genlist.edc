/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "genlist_macro.edc"

group { name: "elm/genlist/item/type1/default";
   alias: "elm/genlist/item_compress/type1/default";
   alias: "elm/genlist/tree/type1/default";
   alias: "elm/genlist/tree_compress/type1/default";

   data.item: "banded_bg_area" "elm.swallow.bg";

   data.item: "texts" "elm.text elm.text.end elm.text.sub elm.text.sub.end";
   data.item: "contents" "elm.swallow.icon elm.swallow.icon.0 elm.swallow.icon.1 elm.swallow.end";

   script {
      public end_icon_visible = 0;
      public sub_end_text_visible = 0;
   }

   parts {
      // for banded bg
      swallow { "elm.swallow.bg"; scale;
         desc { "default";
         }
      }
      // FIXME: "bg" part is used by genlist event macro. this will be removed.
      part { name: "bg";
         type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: 61 185 204 77;
         }
         description { state: "disabled" 0.0;
            color: 0 0 0 0;
         }
         description { state: "reorder" 0.0;
            color: 0 0 0 0;
         }
      }
      // base spacer for item min height
      spacer { "base"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_1LINE_HEIGHT_INC;
         }
         desc { "sub_text_visible";
            min: 0 GENLIST_ITEM_2LINE_HEIGHT_INC;
         }
      }
      // bottom line
      PART(RECT, "elm.bottomline",
         DSC_FROM_B("default" 0.0,
            min: 0 LIST_BOTTOMLINE_HEIGHT;
            max: -1  LIST_BOTTOMLINE_HEIGHT;
            color: 192 213 222 255;
         )
      )
      // padding outside
      spacer { "elm.padding.left"; scale;
         desc { "default";
            min: GENLIST_ITEM_LR_PADDING_INC 0;
            align: 0.0 0.5;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 1.0;
         }
      }
      spacer { "elm.padding.right"; scale;
         desc { "default";
            min: GENLIST_ITEM_LR_PADDING_INC 0;
            align: 1.0 0.5;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 1.0;
         }
      }
      spacer { "elm.padding.top"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_TB_PADDING_INC;
            max: -1 GENLIST_ITEM_TB_PADDING_INC;
            align: 0.5 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
         }
      }
      spacer { "elm.padding.bottom"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_TB_PADDING_INC;
            max: -1 GENLIST_ITEM_TB_PADDING_INC;
            align: 0.5 1.0;
            rel1.relative: 0.0 1.0;
            rel2.relative: 1.0 1.0;
         }
      }
      // left swallow (Type B)
      swallow { "elm.swallow.icon"; scale;
         desc { state: "default";
            align: 0.0 0.5;
            rel1 { to: "elm.padding.left"; relative: 1.0 0.5; }
            rel2 { to: "elm.padding.left"; relative: 1.0 0.5; }
         }
      }
      // padding between left swallow & center contents
      spacer { "elm.padding.center.left"; scale;
         desc { "default";
            min: 0 0;
            align: 0.0 0.5;
            rel1 { to: "elm.swallow.icon"; relative: 1.0 0.5; }
            rel2 { to: "elm.swallow.icon"; relative: 1.0 0.5; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_CENTER_LEFT_PADDING_INC 0;
         }
      }
      // right swallow (Type C)
      swallow { "elm.swallow.end"; scale;
         desc { state: "default";
            align: 1.0 0.5;
            rel1 { to: "elm.padding.right"; relative: 0.0 0.5; }
            rel2 { to: "elm.padding.right"; relative: 0.0 0.5; }
         }
      }
      // padding between center contents & right swallow
      spacer { "elm.padding.center.right"; scale;
         desc { "default";
            min: 0 0;
            align: 1.0 0.5;
            rel1 { to: "elm.swallow.end"; relative: 0.0 0.5; }
            rel2 { to: "elm.swallow.end"; relative: 0.0 0.5; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_CENTER_LEFT_PADDING_INC 0;
         }
      }
      // center contents (Type A)
      // main line
      swallow { "elm.swallow.icon.0"; scale;
         desc { "default";
            align: 0.0 0.5;
            rel1 { to_x: "elm.padding.center.left"; to_y: "elm.padding.main.icon.text"; relative: 1.0 0.5; }
            rel2 { to_x: "elm.padding.center.left"; to_y: "elm.padding.main.icon.text"; relative: 1.0 0.5; }
         }
      }
      spacer { "elm.padding.main.icon.text"; scale;
         desc { "default";
            min: 0 0;
            align: 0.0 0.5;
            rel1 { to_x: "elm.swallow.icon.0"; to_y: "elm.text"; relative: 1.0 0.0; }
            rel2 { to_x: "elm.swallow.icon.0"; to_y: "elm.text"; relative: 1.0 1.0; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_ICON_TEXT_PADDING_INC 0;
         }
      }
      textblock { "elm.text"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_MAIN_LINE_HEIGHT_INC;
            align: 0.5 0.5;
            rel1 { to_x: "elm.padding.main.icon.text"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
            rel2 { to_x: "elm.padding.main.text.end"; to_y: "base_line"; relative: 0.0 0.0; }
            text.style: "list_text_main";
            text.min: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_main_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_main_dim";
         }
      }
      // bottom line of "elm.text"
      spacer { "base_line";
         desc { "default";
            rel1 { to: "elm.padding.bottom"; relative: 0.0 0.0; }
            rel2 { to: "elm.padding.bottom"; relative: 1.0 0.0; }
         }
         desc { "sub_text_visible"; inherit: "default";
            rel1 { to_y: "elm.text.sub"; relative: 0.0 0.0; }
            rel2 { to_y: "elm.text.sub"; relative: 1.0 0.0; }
         }
      }
      //
      spacer { "elm.padding.main.text.end"; scale;
         desc { "default";
            min: 0 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.swallow.icon.1"; to_y: "elm.text"; relative: 0.0 0.0; }
            rel2 { to_x: "elm.swallow.icon.1"; to_y: "elm.text"; relative: 0.0 1.0; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
         }
         desc { "text_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
            rel1 { to_x: "elm.text.end"; to_y: "elm.text"; relative: 0.0 0.0; }
            rel2 { to_x: "elm.text.end"; to_y: "elm.text"; relative: 0.0 1.0; }
         }
         desc { "sub_text_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
            rel1 { to_x: "elm.text.sub.end"; to_y: "elm.text"; relative: 0.0 0.0; }
            rel2 { to_x: "elm.text.sub.end"; to_y: "elm.text"; relative: 0.0 1.0; }
         }
      }
      swallow { "elm.swallow.icon.1"; scale;
         desc { "default";
            align: 1.0 0.5;
            rel1 { to_x: "elm.padding.center.right"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.padding.center.right"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
         }
         desc { "text_visible"; inherit: "default";
            rel1 { to_x: "elm.padding.center.right"; to_y: "elm.padding.main.text.end"; relative: 0.0 0.5; }
            rel2 { to_x: "elm.padding.center.right"; to_y: "elm.padding.main.text.end"; relative: 0.0 0.5; }
         }
      }
      textblock { "elm.text.end"; scale;
         desc { "default";
            max: GENLIST_ITEM_END_TEXT_WIDTH_INC -1;
            align: 1.0 0.5;
            rel1 { to_x: "elm.padding.center.right"; to_y: "elm.padding.main.text.end"; relative: 0.0 0.5; }
            rel2 { to_x: "elm.padding.center.right"; to_y: "elm.padding.main.text.end"; relative: 0.0 0.5; }
            text.style: "list_text_end";
            text.min: 1 1;
            text.max: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_end_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_end_dim";
         }
      }
      // sub line
      textblock { "elm.text.sub"; scale;
         desc { "default";
            align: 0.5 1.0;
            rel1 { to_x: "elm.padding.center.left"; to_y: "elm.padding.bottom"; relative: 1.0 0.0; }
            rel2 { to_x: "elm.padding.sub.text.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
            text.style: "list_text_sub_01";
            text.min: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_sub_01_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_sub_01_dim";
         }
      }
      spacer { "elm.padding.sub.text.end"; scale;
         desc { "default";
            min: 0 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.swallow.icon.1"; to_y: "elm.text"; relative: 0.0 0.0; }
            rel2 { to_x: "elm.swallow.icon.1"; to_y: "elm.text"; relative: 0.0 1.0; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_SUB_LINE_TEXT_END_PADDING_INC 0;
         }
         desc { "text_visible"; inherit: "default";
            min: GENLIST_ITEM_SUB_LINE_TEXT_END_PADDING_INC 0;
            rel1 { to_x: "elm.text.sub.end"; to_y: "elm.text.sub"; relative: 0.0 0.0; }
            rel2 { to_x: "elm.text.sub.end"; to_y: "elm.text.sub"; relative: 0.0 1.0; }
         }
      }
      textblock { "elm.text.sub.end"; scale;
         desc { "default";
            max: GENLIST_ITEM_END_TEXT_WIDTH_INC -1;
            align: 1.0 0.5;
            rel1 { to_x: "elm.padding.center.right"; to_y: "elm.padding.sub.text.end"; relative: 0.0 0.5; }
            rel2 { to_x: "elm.padding.center.right"; to_y: "elm.padding.sub.text.end"; relative: 0.0 0.5; }
            text.style: "list_text_end";
            text.min: 1 1;
            text.max: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_end_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_end_dim";
         }
      }
   }
   LIST_PROGRAMS( target: "elm.text"; \
                  target: "elm.text.end"; \
                  target: "elm.text.sub"; \
                  target: "elm.text.sub.end"; )
   programs {
      program {
         signal: "elm,state,elm.swallow.icon,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.center.left";
      }
      program {
         signal: "elm,state,elm.swallow.end,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.center.right";
      }
      program {
         signal: "elm,state,elm.swallow.icon.0,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.main.icon.text";
      }
      program {
         signal: "elm,state,elm.swallow.icon.1,visible";
         source: "elm";
         script {
            if (get_int(sub_end_text_visible) == 0) {
               set_state(PART:"elm.padding.main.text.end", "icon_visible", 0.0);
               set_state(PART:"elm.padding.sub.text.end", "icon_visible", 0.0);
            }
            else {
               set_state(PART:"elm.padding.main.text.end", "sub_text_visible", 0.0);
               set_state(PART:"elm.padding.sub.text.end", "text_visible", 0.0);
            }
            set_int(end_icon_visible, 1);
         }
      }
      program {
         signal: "elm,state,elm.text.sub,visible";
         source: "elm";
         action: STATE_SET "sub_text_visible" 0.0;
         target: "base";
         target: "base_line";
      }
      program {
         signal: "elm,state,elm.text.end,visible";
         source: "elm";
         script {
            if (get_int(end_icon_visible) == 1 && get_int(sub_end_text_visible) == 1) {
               set_state(PART:"elm.padding.main.text.end", "sub_text_visible", 0.0);
            }
            else {
               set_state(PART:"elm.padding.main.text.end", "text_visible", 0.0);
            }
         }
      }
      program {
         signal: "elm,state,elm.text.sub.end,visible";
         source: "elm";
         script {
            set_int(sub_end_text_visible, 1);
            set_state(PART:"elm.padding.sub.text.end", "text_visible", 0.0);
            set_state(PART:"elm.swallow.icon.1", "text_visible", 0.0);
         }
      }
      program { name: "restore_default";
         signal: "elm,state,default";
         source: "elm";
         script {
            set_state(PART:"base", "default", 0.0);
            set_state(PART:"base_line", "default", 0.0);
            set_state(PART:"elm.swallow.icon.1", "default", 0.0);
            set_state(PART:"elm.padding.center.left", "default", 0.0);
            set_state(PART:"elm.padding.center.right", "default", 0.0);
            set_state(PART:"elm.padding.main.icon.text", "default", 0.0);
            set_state(PART:"elm.padding.main.text.end", "default", 0.0);
            set_state(PART:"elm.padding.sub.text.end", "default", 0.0);
            set_int(sub_end_text_visible, 0);
         }
      }
   }
}

group { name: "elm/genlist/item/default/default";
   alias: "elm/genlist/item_compress/default/default";
   alias: "elm/genlist/tree/default/default";
   alias: "elm/genlist/tree_compress/default/default";
   alias: "elm/genlist/item/default_style/default";
   alias: "elm/genlist/item_compress/default_style/default";
   alias: "elm/genlist/tree/default_style/default";
   alias: "elm/genlist/tree_compress/default_style/default";
   inherit: "elm/genlist/item/type1/default";
   data.item: "texts" "elm.text";
   data.item: "contents" "elm.swallow.icon elm.swallow.end";
}

group { name: "elm/genlist/item/double_label/default";
   alias: "elm/genlist/item_compress/double_label/default";
   alias: "elm/genlist/tree/double_label/default";
   alias: "elm/genlist/tree_compress/double_label/default";
   inherit: "elm/genlist/item/type1/default";
   data.item: "texts" "elm.text elm.text.sub";
   data.item: "contents" "elm.swallow.icon elm.swallow.end";
}

group { name: "elm/genlist/item/one_icon/default";
   alias: "elm/genlist/item_compress/one_icon/default";
   alias: "elm/genlist/tree/one_icon/default";
   alias: "elm/genlist/tree_compress/one_icon/default";
   inherit: "elm/genlist/item/type1/default";
   data.item: "texts" "elm.text";
   data.item: "contents" "elm.swallow.icon";
}

group { name: "elm/genlist/item/end_icon/default";
   alias: "elm/genlist/item_compress/end_icon/default";
   alias: "elm/genlist/tree/end_icon/default";
   alias: "elm/genlist/tree_compress/end_icon/default";
   inherit: "elm/genlist/item/type1/default";
   data.item: "texts" "elm.text";
   data.item: "contents" "elm.swallow.end";
}

group { name: "elm/genlist/item/type2/default";
   alias: "elm/genlist/item_compress/type2/default";
   alias: "elm/genlist/tree/type2/default";
   alias: "elm/genlist/tree_compress/type2/default";
   inherit: "elm/genlist/item/type1/default";
   data.item: "texts" "elm.text elm.text.end elm.text.sub elm.text.sub.end";
   data.item: "contents" "elm.swallow.icon elm.swallow.icon.0 elm.swallow.icon.1 elm.swallow.end";

   parts {
      textblock { "elm.text"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_MAIN_LINE_HEIGHT_INC;
            align: 0.5 0.5;
            rel1 { to_x: "elm.padding.main.icon.text"; to_y: "base_line"; relative: 1.0 1.0; }
            rel2 { to_x: "elm.padding.main.text.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
            text.style: "list_text_main";
            text.min: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list.text_main_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list.text_main_dim";
         }
      }
      spacer { "base_line";
         desc { "default";
            rel1 { to: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to: "elm.padding.top"; relative: 1.0 1.0; }
         }
         desc { "sub_text_visible";
            rel1 { to: "elm.text.sub"; relative: 0.0 1.0; }
            rel2 { to: "elm.text.sub"; relative: 1.0 1.0; }
         }
      }
      textblock { "elm.text.sub"; scale;
         desc { "default";
            align: 0.5 0.0;
            rel1 { to_x: "elm.padding.center.left"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
            rel2 { to_x: "elm.padding.sub.text.end"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            text.style: "list_text_sub_01";
            text.min: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_sub_01_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_sub_01_dim";
         }
      }
   }
}

group { name: "elm/genlist/item/multiline/default";
   alias: "elm/genlist/item_compress/multiline/default";
   alias: "elm/genlist/tree/multiline/default";
   alias: "elm/genlist/tree_compress/multiline/default";

   data.item: "banded_bg_area" "elm.swallow.bg";

   data.item: "texts" "elm.text elm.text.multiline";
   data.item: "contents" "elm.swallow.icon elm.swallow.icon.0 elm.swallow.icon.1 elm.swallow.end";

   script {
      public main_text_visible = 0;
      public multiline_text_visible = 0;
   }

   parts {
      swallow { "elm.swallow.bg"; scale;
         desc { "default";
         }
      }
      // "bg" part is used by genlist event macro. this will be removed.
      part { name: "bg";
         type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: 61 185 204 77;
         }
         description { state: "disabled" 0.0;
            color: 0 0 0 0;
         }
         description { state: "reorder" 0.0;
            color: 0 0 0 0;
         }
      }
      spacer { "base"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_MULTILINE_1LINE_HEIGHT_INC;
            align: 0.5 0.5;
         }
      }
      spacer { "elm.padding.left"; scale;
         desc { "default";
            min: GENLIST_ITEM_LR_PADDING_INC 0;
            align: 0.0 0.5;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 1.0;
         }
      }
      spacer { "elm.padding.right"; scale;
         desc { "default";
            min: GENLIST_ITEM_LR_PADDING_INC 0;
            align: 1.0 0.5;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 1.0;
         }
      }
      spacer { "elm.padding.top"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_TB_PADDING_INC;
            max: -1 GENLIST_ITEM_TB_PADDING_INC;
            align: 0.5 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
         }
      }
      spacer { "elm.padding.bottom"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_TB_PADDING_INC;
            max: -1 GENLIST_ITEM_TB_PADDING_INC;
            align: 0.5 1.0;
            rel1.relative: 0.0 1.0;
            rel2.relative: 1.0 1.0;
         }
      }
      swallow { "elm.swallow.icon"; scale;
         desc { state: "default";
            align: 0.0 0.5;
            rel1 { to: "elm.padding.left"; relative: 1.0 0.5; }
            rel2 { to: "elm.padding.left"; relative: 1.0 0.5; }
         }
      }
      spacer { "elm.padding.center.left"; scale;
         desc { "default";
            min: 0 0;
            align: 0.0 0.5;
            rel1 { to: "elm.swallow.icon"; relative: 1.0 0.5; }
            rel2 { to: "elm.swallow.icon"; relative: 1.0 0.5; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_CENTER_LEFT_PADDING_INC 0;
         }
      }
      swallow { "elm.swallow.end"; scale;
         desc { state: "default";
            align: 1.0 0.5;
            rel1 { to: "elm.padding.right"; relative: 0.0 0.5; }
            rel2 { to: "elm.padding.right"; relative: 0.0 0.5; }
         }
      }
      spacer { "elm.padding.center.right"; scale;
         desc { "default";
            min: 0 0;
            align: 1.0 0.5;
            rel1 { to: "elm.swallow.end"; relative: 0.0 0.5; }
            rel2 { to: "elm.swallow.end"; relative: 0.0 0.5; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_CENTER_LEFT_PADDING_INC 0;
         }
      }
      swallow { "elm.swallow.icon.0"; scale;
         desc { "default";
            align: 0.0 0.5;
            rel1 { to_x: "elm.padding.center.left"; to_y: "elm.padding.main.icon.text"; relative: 1.0 0.5; }
            rel2 { to_x: "elm.padding.center.left"; to_y: "elm.padding.main.icon.text"; relative: 1.0 0.5; }
         }
      }
      spacer { "elm.padding.main.icon.text"; scale;
         desc { "default";
            min: 0 0;
            align: 0.0 0.5;
            rel1 { to_x: "elm.swallow.icon.0"; relative: 1.0 0.5; }
            rel2 { to_x: "elm.swallow.icon.0"; relative: 1.0 0.5; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
         }
      }
      textblock { "elm.text"; scale;
         desc { "default";
            align: 0.5 0.0;
            rel1 { to_x: "elm.padding.main.icon.text"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
            rel2 { to_x: "elm.padding.main.text.end"; to_y: "base_line"; relative: 0.0 0.0; }
            text.style: "list_text_main";
            text.min: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list.text_main_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list.text_main_dim";
         }
      }
      spacer { "base_line";
         desc { "default";
            rel1 { to: "elm.padding.top"; relative: 0.0 0.0; }
            rel2 { to: "elm.padding.top"; relative: 1.0 0.0; }
         }
         desc { "main_text_visible";
            rel1 { to: "elm.padding.bottom"; relative: 0.0 0.0; }
            rel2 { to: "elm.padding.bottom"; relative: 1.0 0.0; }
         }
         desc { "multiline_text_visible";
            rel1 { to: "elm.text.multiline"; relative: 0.0 0.0; }
            rel2 { to: "elm.text.multiline"; relative: 1.0 0.0; }
         }
      }
      spacer { "elm.padding.main.text.end"; scale;
         desc { "default";
            min: 0 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.swallow.icon.1"; relative: 0.0 0.5; }
            rel2 { to_x: "elm.swallow.icon.1"; relative: 0.0 0.5; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
         }
      }
      swallow { "elm.swallow.icon.1"; scale;
         desc { "default";
            align: 1.0 0.5;
            rel1 { to_x: "elm.padding.center.right"; to_y: "elm.padding.main.text.end"; relative: 0.0 0.5; }
            rel2 { to_x: "elm.padding.center.right"; to_y: "elm.padding.main.text.end"; relative: 0.0 0.5; }
         }
      }
      spacer { "multiline_base_line";
         desc { "default";
            rel1 { to: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to: "elm.padding.top"; relative: 1.0 1.0; }
         }
         desc { "main_text_visible";
            rel1 { to: "elm.padding.bottom"; relative: 0.0 0.0; }
            rel2 { to: "elm.padding.bottom"; relative: 1.0 0.0; }
         }
      }
      textblock { "elm.text.multiline"; scale;
         desc { "default";
            align: 0.5 1.0;
            rel1 { to_x: "elm.padding.main.icon.text"; to_y: "multiline_base_line"; relative: 1.0 1.0; }
            rel2 { to_x: "elm.padding.main.text.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
            text.style: "list_text_multiline";
            text.min: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_multiline_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_multiline_dim";
         }
      }
   }
   LIST_PROGRAMS( target: "elm.text"; \
                  target: "elm.text.multiline"; )
   programs {
      program {
         signal: "elm,state,elm.swallow.icon,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.center.left";
      }
      program {
         signal: "elm,state,elm.swallow.end,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.center.right";
      }
      program {
         signal: "elm,state,elm.swallow.icon.0,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.main.icon.text";
      }
      program {
         signal: "elm,state,elm.swallow.icon.1,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.main.text.end";
      }
      program { name: "main_text_visible";
         signal: "elm,state,elm.text,visible";
         source: "elm";
         script {
            if (get_int(multiline_text_visible) == 1) {
               set_state(PART:"base_line", "multiline_text_visible", 0.0);
               set_state(PART:"multiline_base_line", "main_text_visible", 0.0);
            }
            else {
               set_state(PART:"base_line", "main_text_visible", 0.0);
               set_state(PART:"multiline_base_line", "default", 0.0);
            }
            set_int(main_text_visible, 1);
         }
      }
      program { name: "multiline_text_visible";
         signal: "elm,state,elm.text.multiline,visible";
         source: "elm";
          script {
            if (get_int(main_text_visible) == 1) {
               set_state(PART:"base_line", "multiline_text_visible", 0.0);
               set_state(PART:"multiline_base_line", "main_text_visible", 0.0);
            }
            else {
               set_state(PART:"base_line", "main_text_visible", 0.0);
               set_state(PART:"multiline_base_line", "default", 0.0);
            }
            set_int(multiline_text_visible, 1);
         }
      }
      program { name: "restore_default";
         signal: "elm,state,default";
         source: "elm";
         script {
            set_state(PART:"base_line", "default", 0.0);
            set_state(PART:"multiline_base_line", "default", 0.0);
            set_state(PART:"elm.padding.center.left", "default", 0.0);
            set_state(PART:"elm.padding.center.right", "default", 0.0);
            set_state(PART:"elm.padding.main.icon.text", "default", 0.0);
            set_state(PART:"elm.padding.main.text.end", "default", 0.0);
            set_int(main_text_visible, 0);
            set_int(multiline_text_visible, 0);
         }
      }
   }
}

group { name: "elm/genlist/item/full/default";
   alias: "elm/genlist/item_compress/full/default";
   alias: "elm/genlist/tree/full/default";
   alias: "elm/genlist/tree_compress/full/default";

   data.item: "banded_bg_area" "elm.swallow.bg";

   data.item: "contents" "elm.swallow.content";

   parts {
      swallow { "elm.swallow.bg"; scale;
         desc { "default";
         }
      }
      // "bg" part is used by genlist event macro. this will be removed.
      part { name: "bg";
         type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: 61 185 204 77;
         }
         description { state: "disabled" 0.0;
            color: 0 0 0 0;
         }
         description { state: "reorder" 0.0;
            color: 0 0 0 0;
         }
      }
      swallow { "elm.swallow.content"; scale;
         desc { "default";
         }
      }
   }
   LIST_PROGRAMS( ; )
}

group { name: "elm/genlist/item/group_index/default";
   alias: "elm/genlist/item_compress/group_index/default";
   alias: "elm/genlist/tree/group_index/default";
   alias: "elm/genlist/tree_compress/group_index/default";

   data.item: "banded_bg_area" "elm.swallow.bg";

   data.item: "texts" "elm.text elm.text.end";
   data.item: "contents" "elm.swallow.end";

   parts {
      swallow { "elm.swallow.bg"; scale;
         desc { "default";
         }
      }
      // FIXME: "bg" part is used by genlist event macro. this will be removed.
      part { name: "bg";
         type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: 61 185 204 77;
         }
         description { state: "disabled" 0.0;
            color: 0 0 0 0;
         }
         description { state: "reorder" 0.0;
            color: 0 0 0 0;
         }
      }
      spacer { "base"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_GROUP_INDEX_HEIGHT_INC;
            align: 0.5 0.5;
         }
      }
      spacer { "elm.padding.left"; scale;
         desc { "default";
            min: GENLIST_ITEM_LR_PADDING_INC 0;
            align: 0.0 0.5;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 1.0;
         }
      }
      spacer { "elm.padding.right"; scale;
         desc { "default";
            min: GENLIST_ITEM_LR_PADDING_INC 0;
            align: 1.0 0.5;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 1.0;
         }
      }
      spacer { "elm.padding.top"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_GROUP_INDEX_TOP_PADDING_INC;
            max: -1 GENLIST_ITEM_GROUP_INDEX_TOP_PADDING_INC;
            align: 0.5 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
         }
      }
      spacer { "elm.padding.bottom"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_GROUP_INDEX_BOTTOM_PADDING_INC;
            max: -1 GENLIST_ITEM_GROUP_INDEX_BOTTOM_PADDING_INC;
            align: 0.5 1.0;
            rel1.relative: 0.0 1.0;
            rel2.relative: 1.0 1.0;
         }
      }
      textblock { "elm.text"; scale;
         desc { "default";
            align: 0.5 0.5;
            rel1 { to_x: "elm.padding.left"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
            rel2 { to_x: "elm.padding.text.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
            text.style: "list_text_group_index_main";
            text.min: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_group_index_main_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_group_index_main_dim";
         }
      }
      spacer { name: "elm.padding.text.end"; scale;
         desc { "default";
            min: 0 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.swallow.end"; to_y: "elm.text"; relative: 0.0 0.0; }
            rel2 { to_x: "elm.swallow.end"; to_y: "elm.text"; relative: 0.0 1.0; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
         }
         desc { "text_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
            rel1 { to_x: "elm.text.end"; to_y: "elm.text"; relative: 0.0 0.0; }
            rel2 { to_x: "elm.text.end"; to_y: "elm.text"; relative: 0.0 1.0; }
         }
      }
      swallow { "elm.swallow.end"; scale;
         desc { "default";
            align: 1.0 0.5;
            rel1 { to_x: "elm.padding.right"; to_y: "elm.padding.text.end"; relative: 0.0 0.5; }
            rel2 { to_x: "elm.padding.right"; to_y: "elm.padding.text.end"; relative: 0.0 0.5; }
         }
      }
      textblock { "elm.text.end"; scale;
         desc { "default";
            max: GENLIST_ITEM_END_TEXT_WIDTH_INC -1;
            align: 1.0 0.5;
            rel1 { to_x: "elm.padding.right"; to_y: "elm.padding.text.end"; relative: 0.0 0.5; }
            rel2 { to_x: "elm.padding.right"; to_y: "elm.padding.text.end"; relative: 0.0 0.5; }
            text.style: "list_text_group_index_sub";
            text.min: 1 1;
            text.max: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_group_index_sub_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_group_index_sub_dim";
         }
      }
      rect { "elm.topline"; scale;
         desc { "default";
            min: 0 LIST_BOTTOMLINE_HEIGHT;
            max: -1  LIST_BOTTOMLINE_HEIGHT;
            align: 0.5 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
            color: 61 185 204 38;
         }
      }
   }
   LIST_PROGRAMS( target: "elm.text"; )
   programs {
      program { name: "end_icon_visible";
         signal: "elm,state,elm.swallow.end,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.text.end";
      }
      program { name: "end_text_visible";
         signal: "elm,state,elm.text.end,visible";
         source: "elm";
         action: STATE_SET "text_visible" 0.0;
         target: "elm.padding.text.end";
      }
      program { name: "restore_default";
         signal: "elm,state,default";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.padding.text.end";
      }
   }
}

group { name: "elm/genlist/item/group_index/expandable/default";
   inherit: "elm/genlist/item/group_index/default";
   alias: "elm/genlist/item_compress/group_index/expandable/default";
   alias: "elm/genlist/tree/group_index/expandable/default";
   alias: "elm/genlist/tree_compress/group_index/expandable/default";

   data.item: "texts" "elm.text";
   data.item: "contents" "";

   images {
      set {
         name: "core_icon_expand_open";
         image {
            image: SMALL"images/Navigation_elements/core_icon_expand_open.png" COMP;
         }
         image {
            image: MEDIUM"images/Navigation_elements/core_icon_expand_open.png" COMP;
         }
      }
      set {
         name: "core_icon_expand_close";
         image {
            image: SMALL"images/Navigation_elements/core_icon_expand_close.png" COMP;
         }
         image {
            image: MEDIUM"images/Navigation_elements/core_icon_expand_close.png" COMP;
         }
      }
   }

   parts {
      spacer { "elm.padding.text.end"; scale;
         desc { "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.expand.icon"; to_y: "elm.text"; relative: 0.0 0.0; }
            rel2 { to_x: "elm.expand.icon"; to_y: "elm.text"; relative: 0.0 1.0; }
         }
      }
      spacer { "elm.expand.padding.right"; scale;
         desc { "default";
            min: GENLIST_ITEM_GROUP_INDEX_RIGHT_PADDING_INC 0;
            align: 1.0 0.5;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 1.0;
         }
      }
      image { "elm.expand.icon"; scale;
         clip: "elm.expand.clipper";
         desc { "default";
            min: GENLIST_ITEM_GROUP_INDEX_EXPAND_ICON_SIZE_INC;
            align: 1.0 0.5;
            rel1 { to: "elm.expand.padding.right"; relative: 0.0 0.0; }
            rel2 { to: "elm.expand.padding.right"; relative: 0.0 1.0; }
            image.normal: "core_icon_expand_close";
         }
         desc { "expanded"; inherit: "default";
            image.normal: "core_icon_expand_open";
         }
      }
      rect { "elm.expand.clipper";
         desc { "default";
            rel1.to: "elm.expand.icon";
            rel2.to: "elm.expand.icon";
            color: 61 185 204 255;
         }
         desc { "pressed"; inherit: "default";
            color: 61 185 244 77;
         }
      }
   }
   programs {
      program { name: "pressed";
         signal: "elm,state,selected";
         source: "elm";
         action: STATE_SET "pressed" 0.0;
         target: "elm.expand.clipper";
      }
      program { name: "unpressed";
         signal: "elm,state,unselected";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.expand.clipper";
      }
      program { name: "expanded";
         signal: "elm,state,expanded";
         source: "elm";
         action: STATE_SET "expanded" 0.0;
         target: "elm.expand.icon";
      }
      program { name: "contracted";
         signal: "elm,state,contracted";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.expand.icon";
      }
      program { name: "default";
         signal: "elm,state,default";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.padding.text.end";
         target: "elm.expand.icon";
         target: "elm.expand.clipper";
      }
   }
}
