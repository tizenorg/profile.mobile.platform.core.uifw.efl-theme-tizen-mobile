/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#define MAGNIFIER_SCALE 1.5

#define ENTRY_SOUND_PROGRAM \
   program { name: "touch_snd"; \
      signal: "mouse,clicked,1"; \
      source: "elm.text"; \
      script { \
         new st[31]; \
         new Float:vl; \
         get_state(PART:"elm.text", st, 30, vl); \
         if (strcmp(st, "disabled")) \
            run_program(PROGRAM:"touch_sound"); \
      } \
   } \
   program { name: "touch_sound"; \
      action: RUN_PLUGIN "touch_sound"; \
   }

group { name: "elm/entry/emoticon/angry/default"; images.image:
   "emo-angry.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-angry.png"; } } } }
group { name: "elm/entry/emoticon/angry-shout/default"; images.image:
   "emo-angry-shout.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-angry-shout.png"; } } } }
group { name: "elm/entry/emoticon/guilty/default"; images.image:
   "emo-guilty.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-guilty.png"; } } } }
group { name: "elm/entry/emoticon/haha/default"; images.image:
   "emo-haha.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-haha.png"; } } } }
group { name: "elm/entry/emoticon/half-smile/default"; images.image:
   "emo-half-smile.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-half-smile.png"; } } } }
group { name: "elm/entry/emoticon/happy/default"; images.image:
   "emo-happy.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-happy.png"; } } } }
group { name: "elm/entry/emoticon/kiss/default"; images.image:
   "emo-kiss.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-kiss.png"; } } } }
group { name: "elm/entry/emoticon/little-bit-sorry/default"; images.image:
   "emo-little-bit-sorry.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-little-bit-sorry.png"; } } } }
group { name: "elm/entry/emoticon/love/default"; images.image:
   "emo-love.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-love.png"; } } } }
group { name: "elm/entry/emoticon/minimal-smile/default"; images.image:
   "emo-minimal-smile.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-minimal-smile.png"; } } } }
group { name: "elm/entry/emoticon/omg/default"; images.image:
   "emo-omg.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-omg.png"; } } } }
group { name: "elm/entry/emoticon/smile/default"; images.image:
   "emo-smile.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-smile.png"; } } } }
group { name: "elm/entry/emoticon/sorry/default"; images.image:
   "emo-sorry.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-sorry.png"; } } } }
group { name: "elm/entry/emoticon/surprised/default"; images.image:
   "emo-surprised.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-surprised.png"; } } } }
group { name: "elm/entry/emoticon/tongue-dangling/default"; images.image:
   "emo-tongue-dangling.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-tongue-dangling.png"; } } } }
group { name: "elm/entry/emoticon/very-sorry/default"; images.image:
   "emo-very-sorry.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-very-sorry.png"; } } } }
group { name: "elm/entry/emoticon/wink/default"; images.image:
   "emo-wink.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-wink.png"; } } } }
group { name: "elm/entry/emoticon/worried/default"; images.image:
   "emo-worried.png" COMP; parts { part { name: "icon"; mouse_events: 0; description { state: "default" 0.0; max: ENTRY_EMOTICON_SIZE_INC; image.normal:
            "emo-worried.png"; } } } }


group { name: "elm/entry/base/default";
   alias: "elm/entry/base-mixedwrap/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   data.item: "focus_highlight" "on";
   styles {
      style { name: "entry_textblock_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#000000ff left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" wrap=mixed text_class=entry";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_textblock_focused_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#000000ff left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" wrap=mixed text_class=entry";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_textblock_disabled_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#0000005e left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" wrap=mixed text_class=entry";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_textblock_guide_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#00000091 left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" wrap=mixed text_class=entry";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_focused_style";
               min: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      ENTRY_SOUND_PROGRAM
   }
}

group { name: "elm/entry/base/vcenter_align";
   alias: "elm/entry/base-mixedwrap/vcenter_align";
   inherit: "elm/entry/base/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_focused_style";
               min: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
}

group { name: "elm/entry/base-charwrap/default";
   alias: "elm/entry/base/char_wrap";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   styles {
      style { name: "entry_textblock_char_wrap_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#000000ff wrap=char left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" text_class=entry";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_textblock_char_wrap_focused_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#000000ff wrap=char left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" text_class=entry";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_textblock_char_wrap_disabled_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#0000005e wrap=char left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" text_class=entry";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_textblock_char_wrap_guide_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#00000091 wrap=char left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" text_class=entry";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_char_wrap_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_char_wrap_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_char_wrap_focused_style";
               min: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_char_wrap_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
	 program { name: "focus";
        signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
     program { name: "gdisable";
        signal: "elm,guide,disabled";
        source: "elm";
        action: STATE_SET "hidden" 0.0;
        target: "elm.guide";
     }
     program { name: "genable";
        signal: "elm,guide,enabled";
        source: "elm";
        action: STATE_SET "default" 0.0;
        target: "elm.guide";
     }
     ENTRY_SOUND_PROGRAM
  }
}

group { name: "elm/entry/base-charwrap/vcenter_align";
   alias: "elm/entry/base/vcenter_align";
   inherit: "elm/entry/base-charwrap/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_char_wrap_guide_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_char_wrap_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_char_wrap_focused_style";
               min: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_char_wrap_disabled_style";
               min: 0 1;
            }
         }
      }
   }
}

group { name: "elm/entry/base-nowrap/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_textblock_style";
               min: 1 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_focused_style";
               min: 1 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      ENTRY_SOUND_PROGRAM
   }
}

group { name: "elm/entry/base-nowrap/vcenter_align";
   inherit: "elm/entry/base-nowrap/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_textblock_style";
               min: 1 1;
               align: 0.0 0.5;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_focused_style";
               min: 1 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
}

group { name: "elm/entry/base-single/default";
   alias: "elm/entry/base-single/vcenter_align";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   styles {
      style { name: "entry_single_textblock_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#000000ff wrap=none left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" text_class=entry";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_textblock_focused_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#000000ff wrap=none left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" text_class=entry";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_textblock_disabled_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#0000005e wrap=none left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" text_class=entry";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link " "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_textblock_guide_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#00000091 wrap=none left_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" right_margin="ENTRY_LEFT_RIGHT_MARGIN_INC" text_class=entry ellipsis=1.0";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_single_textblock_guide_style";
               min: 0 1;
               max: 0 0;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_single_textblock_style";
               min: 1 1;
               max: 0 0;
               align: 0.0 0.5;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      ENTRY_SOUND_PROGRAM
   }
}

group { name: "elm/entry/base-single/spinner/default";
   alias: "elm/entry/base-single/spinner/horizontal";
   data.item: "default_font_size" "80";
   // FIXME: SamsungNum3L has to be applied.
   styles {
      style { name: "entry_single_spinner_textblock_style";
         base: "font=Tizen:style=Light font_size=80 color=#000000ff wrap=none align=center left_margin=1 right_margin=3 text_class=tizen";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_spinner_textblock_focused_style";
         base: "font=Tizen:style=Light font_size=80 color=#000000ff wrap=none align=center left_margin=1 right_margin=3 text_class=tizen";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_spinner_textblock_disabled_style";
         base: "font=Tizen:style=Light font_size=60 color=#000000a3 wrap=none align=center left_margin=1 right_margin=3 text_class=tizen";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link " "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_spinner_textblock_guide_style";
         base: "font=Tizen:style=Light font_size=60 color=#000000a3 wrap=none align=center left_margin=1 right_margin=3 text_class=tizen ellipsis=1.0";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_single_spinner_textblock_guide_style";
               min: 0 1;
               max: 0 0;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_single_spinner_textblock_style";
               min: 1 1;
               max: 0 0;
               align: 0.0 0.5;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_spinner_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_spinner_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      ENTRY_SOUND_PROGRAM
   }
}

group { name: "elm/entry/base-single/spinner/vertical";
   alias: "elm/entry/base-single/spinner/vertical_time_picker";
   alias: "elm/entry/base-single/spinner/datetime";
   data.item: "default_font_size" "106";
   styles {
      style { name: "entry_single_spinner_vertical_textblock_style";
         base: "font=TizenSans:style=Light font_size=106 color=#000000ff align=center";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_spinner_vertical_textblock_focused_style";
         base: "font=TizenSans:style=Light font_size=106 color=#000000ff align=center";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_spinner_vertical_textblock_disabled_style";
         base: "font=TizenSans:style=Light font_size=106 color=#000000a3 align=center";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_spinner_vertical_textblock_guide_style";
         base: "font=TizenSans:style=Light font_size=106 color=#000000a3 align=center";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_single_spinner_vertical_textblock_guide_style";
               min: 0 1;
               max: 0 0;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_single_spinner_vertical_textblock_style";
               min: 1 1;
               max: 0 0;
               align: 0.0 0.5;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_spinner_vertical_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_spinner_vertical_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      ENTRY_SOUND_PROGRAM
   }
}

group { name: "elm/entry/base-single/spinner/vertical_date_picker";
   inherit: "elm/entry/base-single/spinner/vertical";
   data.item: "default_font_size" "90";
   styles {
      style { name: "entry_single_spinner_vertical_date_picker_textblock_style";
         base: "font=Tizen:style=Light font_size=90 color=#000000ff align=center text_class=tizen";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_spinner_vertical_date_picker_textblock_focused_style";
         base: "font=Tizen:style=Light font_size=90 color=#000000ff align=center text_class=tizen";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_spinner_vertical_date_picker_textblock_disabled_style";
         base: "font=Tizen:style=Light font_size=90 color=#000000a3 align=center text_class=tizen";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "entry_single_spinner_vertical_date_picker_textblock_guide_style";
         base: "font=Tizen:style=Light font_size=90 color=#000000a3 wrap=none align=center left_margin=1 right_margin=3 text_class=tizen ellipsis=1.0";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            text {
               style: "entry_single_spinner_vertical_date_picker_textblock_guide_style";
               min: 0 1;
               max: 0 0;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            min: SPINNER_VERTICAL_DATE_PICKER_TEXT_BUTTON_SIZE_INC;
            text {
               style: "entry_single_spinner_vertical_date_picker_textblock_style";
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_spinner_vertical_date_picker_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_spinner_vertical_date_picker_textblock_disabled_style";
            }
         }
      }
   }
}

group { name: "elm/entry/base-single/multibuttonentry";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   styles {
      style { name: "multibuttonentry_single_textblock_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#000000ff wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "multibuttonentry_single_textblock_disabled_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#0000005e wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_highlight" "+ backing=on backing_color="ENTRY_PREEDIT_HIGHLIGHT_BACKGROUND_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR_INC;
      }
      style { name: "multibuttonentry_single_textblock_guide_style";
         base: "font=Tizen:style=Regular font_size="ENTRY_FONT_SIZE_INC" color=#00000091 wrap=none left_margin=1 right_margin=3 text_class=entry ellipsis=1.0";
         tag:  "br" "";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "multibuttonentry_single_textblock_guide_style";
               min: 0 1;
               max: 0 1;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "multibuttonentry_single_textblock_style";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "multibuttonentry_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      ENTRY_SOUND_PROGRAM
   }
}

group { name: "elm/entry/base-single-noedit/default";
   alias: "elm/entry/base-single-noedit/vcenter_align";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_single_textblock_guide_style";
               min: 0 1;
               max: 0 1;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_single_textblock_style";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
   }
}

group { name: "elm/entry/base-noedit/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
   }
}

group { name: "elm/entry/base-noedit/vcenter_align";
   inherit: "elm/entry/base-noedit/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
            }
         }
      }
   }
}

group { name: "elm/entry/base-noedit-charwrap/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_char_wrap_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_char_wrap_style";
               min: 0 1;
            align: 0.0 0.0;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_char_wrap_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_char_wrap_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
   }
}

group { name: "elm/entry/base-noedit-charwrap/vcenter_align";
   inherit: "elm/entry/base-noedit-charwrap/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_char_wrap_guide_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_char_wrap_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_char_wrap_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_char_wrap_disabled_style";
            }
         }
      }
   }
}

group { name: "elm/entry/base-noedit-mixedwrap/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
   }
}

group { name: "elm/entry/base-noedit-mixedwrap/vcenter_align";
   inherit: "elm/entry/base-noedit-mixedwrap/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_style";
               min: 0 1;
               align: 0.0 0.5;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
            }
         }
      }
   }
}

group { name: "elm/entry/base-nowrap-noedit/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_textblock_style";
               min: 1 1;
               align: 0.0 0.0;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
   }
}

group { name: "elm/entry/base-nowrap-noedit/vcenter_align";
   inherit: "elm/entry/base-nowrap-noedit/default";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_textblock_style";
               min: 1 1;
               align: 0.0 0.0;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
            }
         }
      }
   }
}

group { name: "elm/entry/base-password/default";
   alias: "elm/entry/base-password/vcenter_align";
   data.item: "default_font_size" ENTRY_FONT_SIZE_INC;
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_single_textblock_guide_style";
               min: 0 1;
               max: 0 1;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PASSWORD;
         select_mode: EXPLICIT;
         cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_single_textblock_style";
               repch: "•";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_focused_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "action_focus";
         signal: "elm,action,focus";
         source: "elm";
         action: STATE_SET "focused" 0.0;
         target: "elm.text";
      }
      program { name: "action_unfocus";
         signal: "elm,action,unfocus";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      ENTRY_SOUND_PROGRAM
   }
}

group { name: "elm/entry/cursor/default";
   parts {
      part { name: "cursor";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         clip_to: "clipper";
         description { state: "default" 0.0;
            min: ENTRY_CURSOR_SIZE_INC;
            color: 0 184 230 255; /*(Changeable UI) color_class: "F052";*/
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "clipper"; type: RECT;
         description { state: "default" 0.0;
            rel1.to: "cursor";
            rel2.to: "cursor";
            fixed: 1 1;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
   }
   programs {
      program {
         signal: "selection,start";
         source: "elm.text";
         action: STATE_SET "hidden" 0.0;
         target: "clipper";
      }
      program {
         signal: "selection,cleared";
         source: "elm.text";
         action: STATE_SET "default" 0.0;
         target: "clipper";
      }
      program {
         signal: "elm,action,focus";
         source: "elm";
         action: ACTION_STOP;
         target: "cursor_show";
         target: "cursor_hide";
         target: "cursor_show_timer";
         target: "cursor_hide_timer";
         after: "cursor_show";
      }
      program {
         signal: "elm,action,unfocus";
         source: "elm";
         action: ACTION_STOP;
         target: "cursor_show";
         target: "cursor_hide";
         target: "cursor_show_timer";
         target: "cursor_hide_timer";
         after: "cursor_hide_stop";
      }
      program {
         signal: "elm,action,show,cursor";
         source: "elm";
         action: ACTION_STOP;
         target: "cursor_show";
         target: "cursor_hide";
         target: "cursor_show_timer";
         target: "cursor_hide_timer";
         after: "cursor_show";
      }
      program { name: "cursor_hide_stop";
         action: STATE_SET "default" 0.0;
         target: "cursor";
      }
      program { name: "cursor_show";
         action: STATE_SET "visible" 0.0;
         target: "cursor";
         after: "cursor_show_timer";
      }
      program { name: "cursor_hide";
         action: STATE_SET "default" 0.0;
         target: "cursor";
         after: "cursor_hide_timer";
      }
      program { name: "cursor_show_timer";
         in: 0.6 0.0;
         after: "cursor_hide";
      }
      program { name: "cursor_hide_timer";
         in: 0.6 0.0;
         after: "cursor_show";
      }
   }
}

group { name: "elm/entry/selection/default";
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 0 221 255 153;
         }
      }
   }
}

group { name: "elm/entry/handler/start/default";
   alias: "elm/entry/selection/block_handle_left";
   data.item: "height" ENTRY_SELECTION_BLOCK_HANDLE_MIN_HEIGHT_INC;
   data.item: "gap" ENTRY_SELECTION_BLOCK_HANDLE_MIN_WIDTH_INC;
   images {
      image: "copy&paste_handler_left_bottom.png" COMP;
      image: "copy&paste_handler_left_top.png" COMP;
   }
   script {
      public handler_ontop;
      public handler_focused;
      public handler_disabled;
   }
   parts {
      part { name: "edge";
         type: RECT;
         mouse_events: 1;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            align: 1 0;
            rel2.offset: 1 0;
            min: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH ENTRY_SELECTION_BLOCK_HANDLE_EDGE_HEIGHT;
            max: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH ENTRY_SELECTION_BLOCK_HANDLE_EDGE_HEIGHT;
            color: 0 184 230 255;
         }
         description { state: "show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "top" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 1 1;
         }
         description { state: "bottom_reversed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 1 0;
         }
         description { state: "top_reversed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 1 1;
         }
      }
      part { name: "handle";
         mouse_events: 1;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            align: 1.0 0;
            rel2.offset: 6 0;
            min: ENTRY_SELECTION_BLOCK_HANDLE_MIN_WIDTH_INC ENTRY_SELECTION_BLOCK_HANDLE_MIN_HEIGHT_INC;
            max: ENTRY_SELECTION_BLOCK_HANDLE_MIN_WIDTH_INC ENTRY_SELECTION_BLOCK_HANDLE_MIN_HEIGHT_INC;
            image {
               normal: "copy&paste_handler_left_bottom.png";
               border: 0 0 0 0;
            }
         }
         description { state: "show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "top" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 1.0 1;
            image {
               normal: "copy&paste_handler_left_top.png";
            }
         }
         description { state: "bottom_reversed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0.5 0;
         }
         description { state: "top_reversed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0.5 1;
            image {
               normal: "copy&paste_handler_left_top.png";
            }
         }
      }
   }
   programs {
      program { name: "focused";
         signal: "edje,focus,in";
         source: "edje";
         script {
            set_int(handler_focused, 1);
         }
      }
      program { name: "unfocused";
         signal: "edje,focus,out";
         source: "edje";
         script {
            set_int(handler_focused, 0);
            set_state(PART:"handle", "default", 0.0);
            set_state(PART:"edge", "default", 0.0);
         }
      }
      program { name: "bottom_reversed";
         signal: "elm,state,bottom,reversed";
         source: "elm";
         script {
            new disabled;
            disabled = get_int(handler_disabled);
            if (disabled == 0) {
               set_state(PART:"handle", "bottom_reversed", 0.0);
               set_state(PART:"edge", "bottom_reversed", 0.0);
            } else {
               set_state(PART:"handle", "default", 0.0);
               set_state(PART:"edge", "default", 0.0);
            }
         }
      }
      program { name: "top_reversed";
         signal: "elm,state,top,reversed";
         source: "elm";
         script {
            new disabled;
            disabled = get_int(handler_disabled);
            if (disabled == 0) {
               set_state(PART:"handle", "top_reversed", 0.0);
               set_state(PART:"edge", "top_reversed", 0.0);
            } else {
               set_state(PART:"handle", "default", 0.0);
               set_state(PART:"edge", "default", 0.0);
            }
         }
      }
      program { name: "top";
         signal: "elm,state,top";
         source: "elm";
         script {
            new focused, disabled;
            focused = get_int(handler_focused);
            disabled = get_int(handler_disabled);
            set_int(handler_ontop, 1);
            if ((focused == 1) && (disabled == 0)) {
               set_state(PART:"handle", "top", 0.0);
               set_state(PART:"edge", "top", 0.0);
            } else {
               set_state(PART:"handle", "default", 0.0);
               set_state(PART:"edge", "default", 0.0);
            }
         }
      }
      program { name: "bottom";
         signal: "elm,state,bottom";
         source: "elm";
         script {
            new focused, disabled;
            focused = get_int(handler_focused);
            disabled = get_int(handler_disabled);
            set_int(handler_ontop, 0);
            if ((focused == 1) && (disabled == 0)) {
               set_state(PART:"handle", "show", 0.0);
               set_state(PART:"edge", "show", 0.0);
            } else {
               set_state(PART:"handle", "default", 0.0);
               set_state(PART:"edge", "default", 0.0);
            }
         }
      }
      program { name: "disabled";
         signal: "app,selection,handler,disable";
         source: "app";
         script {
            set_int(handler_disabled, 1);
         }
      }
      program { name: "enabled";
         signal: "app,selection,handler,enable";
         source: "app";
         script {
            set_int(handler_disabled, 0);
         }
      }
   }
}

group { name: "elm/entry/handler/end/default";
   alias: "elm/entry/selection/block_handle_right";
   data.item: "height" ENTRY_SELECTION_BLOCK_HANDLE_MIN_HEIGHT_INC;
   data.item: "gap" ENTRY_SELECTION_BLOCK_HANDLE_MIN_WEIGHT_INC;
   images {
      image: "copy&paste_handler_right_bottom.png" COMP;
      image: "copy&paste_handler_right_top.png" COMP;
   }
   script {
      public handler_ontop;
      public handler_focused;
      public handler_disabled;
      public handler_pressed;
   }
   parts {
        part { name: "edge";
         type: RECT;
         mouse_events: 1;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            align: 0 0;
            rel1.offset: -1 0;
            min: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH ENTRY_SELECTION_BLOCK_HANDLE_EDGE_HEIGHT;
            max: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH ENTRY_SELECTION_BLOCK_HANDLE_EDGE_HEIGHT;
            color: 0 184 230 255;
         }
         description { state: "show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "top" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0 1;
         }
         description { state: "bottom_reversed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0 0;
         }
         description { state: "top_reversed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0 1;
         }
      }
      part { name: "handle";
         mouse_events: 1;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            align: 0 0;
            rel1.offset: -7 0;
            min: ENTRY_SELECTION_BLOCK_HANDLE_MIN_WIDTH_INC ENTRY_SELECTION_BLOCK_HANDLE_MIN_HEIGHT_INC;
            max: ENTRY_SELECTION_BLOCK_HANDLE_MIN_WIDTH_INC ENTRY_SELECTION_BLOCK_HANDLE_MIN_HEIGHT_INC;
            image {
               normal: "copy&paste_handler_right_bottom.png";
               border: 0 0 0 0;
            }
         }
         description { state: "show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "top" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0 1;
            image {
               normal: "copy&paste_handler_right_top.png";
            }
         }
         description { state: "bottom_reversed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0 0;
         }
         description { state: "top_reversed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0 1;
            image {
               normal: "copy&paste_handler_right_top.png";
            }
         }
      }
   }
   programs {
      program { name: "focused";
         signal: "edje,focus,in";
         source: "edje";
         script {
            set_int(handler_focused, 1);
         }
      }
      program { name: "unfocused";
         signal: "edje,focus,out";
         source: "edje";
         script {
            set_int(handler_focused, 0);
            set_state(PART:"handle", "default", 0.0);
            set_state(PART:"edge", "default", 0.0);
         }
      }
      program { name: "top";
         signal: "elm,state,top";
         source: "elm";
         script {
            new focused, disabled;
            focused = get_int(handler_focused);
            disabled = get_int(handler_disabled);
            set_int(handler_ontop, 1);
            if ((focused == 1) && (disabled == 0)) {
               set_state(PART:"handle", "top", 0.0);
               set_state(PART:"edge", "top", 0.0);
            } else {
               set_state(PART:"handle", "default", 0.0);
               set_state(PART:"edge", "default", 0.0);
            }
         }
      }
      program { name: "bottom";
         signal: "elm,state,bottom";
         source: "elm";
         script {
            new focused, disabled;
            focused = get_int(handler_focused);
            disabled = get_int(handler_disabled);
            set_int(handler_ontop, 0);
            if ((focused == 1) && (disabled == 0)) {
               set_state(PART:"handle", "show", 0.0);
               set_state(PART:"edge", "show", 0.0);
            } else {
               set_state(PART:"handle", "default", 0.0);
               set_state(PART:"edge", "default", 0.0);
            }
         }
      }
      program { name: "bottom_reversed";
         signal: "elm,state,bottom,reversed";
         source: "elm";
         script {
            new disabled;
            disabled = get_int(handler_disabled);
            if (disabled == 0) {
               set_state(PART:"handle", "bottom_reversed", 0.0);
               set_state(PART:"edge", "bottom_reversed", 0.0);
            } else {
               set_state(PART:"handle", "default", 0.0);
               set_state(PART:"edge", "default", 0.0);
            }
         }
      }
      program { name: "top_reversed";
         signal: "elm,state,top,reversed";
         source: "elm";
         script {
            new disabled;
            disabled = get_int(handler_disabled);
            if (disabled == 0) {
               set_state(PART:"handle", "top_reversed", 0.0);
               set_state(PART:"edge", "top_reversed", 0.0);
            } else {
               set_state(PART:"handle", "default", 0.0);
               set_state(PART:"edge", "default", 0.0);
            }
         }
      }
      program { name: "disabled";
         signal: "app,selection,handler,disable";
         source: "app";
         script {
            set_int(handler_disabled, 1);
         }
      }
      program { name: "enabled";
         signal: "app,selection,handler,enable";
         source: "app";
         script {
            set_int(handler_disabled, 0);
         }
      }
   }
}

group { name: "elm/entry/handler/start/spinner/vertical";
   alias: "elm/entry/handler/start/spinner/datetime";
   alias: "elm/entry/handler/start/spinner/vertical_date_picker";
   alias: "elm/entry/handler/start/spinner/vertical_time_picker";
}

group { name: "elm/entry/handler/end/spinner/vertical";
   alias: "elm/entry/handler/end/spinner/datetime";
   alias: "elm/entry/handler/end/spinner/vertical_date_picker";
   alias: "elm/entry/handler/end/spinner/vertical_time_picker";
}

group { name: "elm/entry/cursor_handle/default";
   images {
      set {
         name: "copy&paste_handler_center_circle";
         image {
            image: SMALL"images/Copy_Paste/copy&paste_handler_center.png" COMP;
         }
         image {
            image: MEDIUM"images/Copy_Paste/copy&paste_handler_center.png" COMP;
         }
      }
   }
   parts {
      part { name: "sens";
         type: RECT;
         scale: 1;
         mouse_events: 1;
         description { state: "default" 0.0;
            visible: 0;
            color: 0 0 0 0;
            rel1 { relative: -0.25 0.0; to: "handle";}
            rel2 { relative: 1.25 1.0; to: "handle";}
         }
         description { state: "show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "handle";
         scale: 1;
         mouse_events: 1;
         description { state: "default" 0.0;
            min: ENTRY_CURSOR_HANDLE_MIN_WIDTH_INC ENTRY_CURSOR_HANDLE_MIN_HEIGHT_INC;
            max: ENTRY_CURSOR_HANDLE_MIN_WIDTH_INC ENTRY_CURSOR_HANDLE_MIN_HEIGHT_INC;
            align: 0 0;
            visible: 0;
            align: 0.5 0;
            image {
               normal: "copy&paste_handler_center_circle";
               border: 0 0 0 0;
            }
            image.middle: SOLID;
            fill.smooth: 0;
         }
         description { state: "show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "top" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            align: 0.5 1.0;
         }
      }
   }
   script {
      public on_top;
   }
   programs {
      program { name: "focused";
         signal: "edje,focus,in";
         source: "edje";
         script {
            new on_top_val = get_int(on_top);
            if (on_top_val) {
               set_state(PART:"handle", "top", 0.0);
            } else {
               set_state(PART:"handle", "show", 0.0);
            }
            set_state(PART:"sens", "show", 0.0);
         }
      }
      program { name: "unfocused";
         signal: "edje,focus,out";
         source: "edje";
         script {
            set_state(PART:"handle", "default", 0.0);
            set_state(PART:"sens", "default", 0.0);
         }
      }
      program { name: "show";
         signal: "edje,cursor,handle,show";
         source: "edje";
         script {
            set_int(on_top, 0);
            set_state(PART:"handle", "show", 0.0);
            set_state(PART:"sens", "show", 0.0);
         }
      }
      program { name: "hide";
         signal: "edje,cursor,handle,hide";
         source: "edje";
         script {
            set_state(PART:"handle", "default", 0.0);
            set_state(PART:"sens", "default", 0.0);
         }
      }
      program { name: "top";
         signal: "edje,cursor,handle,top";
         source: "edje";
         script {
            set_int(on_top, 1);
            set_state(PART:"handle", "top", 0.0);
            set_state(PART:"sens", "show", 0.0);
         }
      }
   }
}

group { name: "elm/entry/handler/edge/start/default";
   parts {
      part { name: "align";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 0;
            max: 0 0;
            align: 0 0;
         }
      }
      part { name: "bg";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            fixed: 1 0;
            color: 0 184 230 255;
            min: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH 0;
            max: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH -1;
            rel2 { relative: 0 1; to_x: "align"; }
            align: 0.5 0;
            visible: 0;
         }
         description { state: "show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "show";
         signal: "edje,focus,in";
         source: "edje";
         script {
            set_state(PART:"bg", "show", 0.0);
         }
      }
      program { name: "hide";
         signal: "edje,focus,out";
         source: "edje";
         script {
            set_state(PART:"bg", "default", 0.0);
         }
      }
   }
}

group { name: "elm/entry/handler/edge/start/spinner/vertical";
   alias: "elm/entry/handler/edge/start/spinner/datetime";
   alias: "elm/entry/handler/edge/start/spinner/vertical_date_picker";
   alias: "elm/entry/handler/edge/start/spinner/vertical_time_picker";
}

group { name: "elm/entry/handler/edge/end/spinner/vertical";
   alias: "elm/entry/handler/edge/end/spinner/datetime";
   alias: "elm/entry/handler/edge/end/spinner/vertical_date_picker";
   alias: "elm/entry/handler/edge/end/spinner/vertical_time_picker";
}

group { name: "elm/entry/handler/edge/end/default";
   parts {
      part { name: "align";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 0;
            max: 0 0;
            align: 0 0;
         }
      }
      part { name: "bg";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 0 184 230 255;
            min: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH 0;
            max: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH -1;
            rel2 { relative: 0 1; to_x: "align"; }
            align: 0.5 0;
            visible: 0;
         }
         description { state: "show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "show";
         signal: "edje,focus,in";
         source: "edje";
         script {
            set_state(PART:"bg", "show", 0.0);
         }
      }
      program { name: "hide";
         signal: "edje,focus,out";
         source: "edje";
         script {
            set_state(PART:"bg", "default", 0.0);
         }
      }
   }
}

group { name: "elm/entry/anchor/default";
   parts {
      part { name: "bg";
         type: SPACER;
         description { state: "default" 0.0;
         }
      }
   }
}

group { name: "elm/entry/preedit/default";
   parts {
      part { name: "bg";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            color: 128 128 128 255;
         }
      }
   }
}

group { name: "elm/entry/magnifier/fixed-size";
   data.item: "height" MAGNIFIER_HEIGHT_MIN;
   data.item: "scale" MAGNIFIER_SCALE;
   data.item: "arrow" MAGNIFIER_ARROW_HEIGHT_INC;
   images {
      image: "copy&paste_magnifier_line.#.png" COMP;
      image: "copy&paste_magnifier_mask.#.png" COMP;
   }
   parts {
      part { name: "bg_mask";
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            image.normal: "copy&paste_magnifier_mask.#.png";
            image.border: 8 8 8 8;
            color: 255 255 255 255;
         }
         description { state: "custom_cc" 0.0;
            inherit: "default" 0.0;
            color_class: "mgf_custom_cc";
         }
      }
      part { name: "bg";
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: MAGNIFIER_WIDTH_FIXED_INC MAGNIFIER_HEIGHT_MIN;
            max: MAGNIFIER_WIDTH_FIXED_INC MAGNIFIER_HEIGHT_MAX;
            image.normal: "copy&paste_magnifier_line.#.png";
            image.border: 8 8 8 8;
            color: 61 185 204 255;
            align: 0.0 0.0;
         }
      }
      part { name: "left_offset";
         type: SPACER;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: MAGNIFIER_LEFT_OFFSET_INC;
            max: MAGNIFIER_LEFT_OFFSET_INC;
            rel1 {
               to: "bg";
               relative: 0.0 0.0;
            }
            align: 0.0 0.0;
         }
      }
      part { name: "right_offset";
         type: SPACER;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: MAGNIFIER_RIGHT_OFFSET_INC;
            max: MAGNIFIER_RIGHT_OFFSET_INC;
            rel1 {
               to: "bg";
               relative: 1.0 1.0;
            }
            rel2 {
               to: "bg";
               relative: 1.0 1.0;
            }
            align: 1.0 1.0;
         }
      }
      part { name: "swallow";
         type: SWALLOW;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            align: 0.0 0.0;
            rel1 {
               to: "left_offset";
               relative: 1.0 1.0;
            }
            rel2 {
               to: "right_offset";
               relative: 0.0 0.0;
            }
         }
      }
   }
   script {
      public message(Msg_Type:type, id, ...) {
         if (type == MSG_INT_SET) {
            new r, g, b, a;

            r = getarg(2);
            g = getarg(3);
            b = getarg(4);
            a = getarg(5);

            set_state(PART:"bg_mask", "custom_cc", 0.0);
            set_color_class("mgf_custom_cc", r, g, b, a);
         }
      }
   }
}

group { name: "elm/scroller/entry/default";
   data {
      item: "focus_highlight" "off";
   }
   script {
      public sbvis_v, sbvis_h, sbalways_v, sbalways_h, sbvis_timer;
      public timer0(val) {
         new v;
         v = get_int(sbvis_v);
         if (v) {
            v = get_int(sbalways_v);
            if (!v) {
               emit("do-hide-vbar", "");
               set_int(sbvis_v, 0);
            }
         }
         v = get_int(sbvis_h);
         if (v) {
            v = get_int(sbalways_h);
            if (!v) {
               emit("do-hide-hbar", "");
               set_int(sbvis_h, 0);
            }
         }
         set_int(sbvis_timer, 0);
         return 0;
      }
   }
   images {
      image: "core_scroll_bar_v.#.png" COMP;
      image: "core_scroll_bar_h.#.png" COMP;
   }
   parts {
      part { name: "bg";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
         }
      }
      part { name: "clipper";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
         }
      }
      part { name: "elm.swallow.icon";
         type: SWALLOW;
         scale: 1;
         clip_to: "clipper";
         description { state: "default" 0.0;
            align: 0.0 0.5;
            fixed: 1 1;
            rel1 {
               to: "bg";
               relative: 0.0 0.0;
            }
            rel2 {
               to: "bg";
               relative: 0.0 1.0;
            }
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "elm.swallow.end";
         type: SWALLOW;
         scale: 1;
         clip_to: "clipper";
         description { state: "default" 0.0;
            align: 1.0 0.5;
            fixed: 1 1;
            rel1 {
               to: "bg";
               relative: 1.0 0.0;
            }
            rel2 {
               to: "bg";
               relative: 1.0 1.0;
            }
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "content_clipper";
         scale: 1;
         type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
         }
      }
      part { name: "elm.swallow.content";
         clip_to: "content_clipper";
         scale: 1;
         type: SWALLOW;
         description { state: "default" 0.0;
            rel1 {
               to_x: "elm.swallow.icon";
               to_y: "bg";
               relative: 1.0 0.0;
            }
            rel2 {
               to_x: "elm.swallow.end";
               to_y: "bg";
               relative: 0.0 1.0;
            }
         }
      }
      part { name: "sb_vbar_clip_master";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "sb_vbar_clip";
         clip_to: "sb_vbar_clip_master";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "sb_vbar";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SCROLLER_DEFAULT_SCROLLBAR_VBAR_MIN_SIZE_INC;
            align: 1.0 0.0;
            rel1 {
               to: "elm.swallow.content";
               relative: 1.0 0.0;
            }
            rel2 {
               to_y: "sb_hbar";
               to_x: "elm.swallow.content";
               relative: 1.0 0.0;
            }
         }
      }
      part { name: "elm.dragable.vbar";
         scale: 1;
         clip_to: "sb_vbar_clip";
         mouse_events: 0;
         dragable {
            x: 0 0 0;
            y: 1 1 0;
            confine: "sb_vbar";
         }
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SCROLLER_DEFAULT_SCROLLBAR_VBAR_MIN_SIZE_INC;
            max: SCROLLER_DEFAULT_SCROLLBAR_VBAR_MAX_SIZE_INC;
            rel1 {
               relative: 0.5 0.5;
               to: "sb_vbar";
            }
            rel2 {
               relative: 0.5 0.5;
               to: "sb_vbar";
            }
            image {
               normal: "core_scroll_bar_v.#.png";
               middle: DEFAULT;
            }
            color: 61 184 204 178;
         }
      }
      part { name: "sb_hbar_clip_master";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
         }
      }
      part { name: "sb_hbar_clip";
         clip_to: "sb_hbar_clip_master";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "sb_hbar";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SCROLLER_DEFAULT_SCROLLBAR_HBAR_MIN_SIZE_INC;
            align: 0.0 1.0;
            rel1 {
               relative: 0.0 1.0;
               to_x: "elm.swallow.content";
               to_y: "elm.swallow.content";
            }
            rel2 {
               relative: 0.0 1.0;
               to_x: "sb_vbar";
               to_y: "elm.swallow.content";
            }
         }
      }
      part { name: "elm.dragable.hbar";
         scale: 1;
         clip_to: "sb_hbar_clip";
         mouse_events: 0;
         dragable {
            x: 1 1 0;
            y: 0 0 0;
            confine: "sb_hbar";
         }
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SCROLLER_DEFAULT_SCROLLBAR_HBAR_MIN_SIZE_INC;
            max: SCROLLER_DEFAULT_SCROLLBAR_HBAR_MAX_SIZE_INC;
            rel1 {
               relative: 0.5  0.5;
               to: "sb_hbar";
            }
            rel2 {
               relative: 0.5  0.5;
               to: "sb_hbar";
            }
            image {
               normal: "core_scroll_bar_h.#.png";
               middle: DEFAULT;
            }
            color: 61 184 204 178;
         }
      }
   }
   programs {
      program { name: "load";
         signal: "load";
         source: "";
         script {
            set_state(PART:"sb_hbar_clip", "hidden", 0.0);
            set_state(PART:"sb_vbar_clip", "hidden", 0.0);
            set_int(sbvis_h, 0);
            set_int(sbvis_v, 0);
            set_int(sbalways_v, 0);
            set_int(sbalways_h, 0);
            set_int(sbvis_timer, 0);
            emit("reload", "elm");
         }
      }
      program { name: "icon_show";
         signal: "elm,action,show,icon";
         source: "elm";
         action: STATE_SET "visible" 0.0;
         target: "elm.swallow.icon";
      }
      program { name: "icon_hide";
         signal: "elm,action,hide,icon";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.icon";
      }
      program { name: "end_show";
         signal: "elm,action,show,end";
         source: "elm";
         action: STATE_SET "visible" 0.0;
         target: "elm.swallow.end";
      }
      program { name: "end_hide";
         signal: "elm,action,hide,end";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.end";
      }
      program { name: "vbar_show";
         signal: "elm,action,show,vbar";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "sb_vbar_clip_master";
      }
      program { name: "vbar_hide";
         signal: "elm,action,hide,vbar";
         source: "elm";
         action:  STATE_SET "hidden" 0.0;
         target: "sb_vbar_clip_master";
      }
      program { name: "vbar_show_always";
         signal: "elm,action,show_always,vbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_v);
            if (!v) {
               set_int(sbalways_v, 1);\
               v = get_int(sbvis_v);
               if (!v) {
                  emit("do-show-vbar", "");
                  set_int(sbvis_v, 1);
               }
            }
         }
      }
      program { name: "vbar_show_notalways";
         signal: "elm,action,show_notalways,vbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_v);
            if (v) {
               set_int(sbalways_v, 0);
               v = get_int(sbvis_v);
               if (!v) {
                  emit("do-hide-vbar", "");
                  set_int(sbvis_v, 0);
               }
            }
         }
      }
      program { name: "sb_vbar_show";
         signal: "do-show-vbar";
         source: "";
         action:  STATE_SET "default" 0.0;
         transition: LINEAR 0.5;
         target: "sb_vbar_clip";
      }
      program { name: "sb_vbar_hide";
         signal: "do-hide-vbar";
         source: "";
         action:  STATE_SET "hidden" 0.0;
         transition: LINEAR 0.5;
         target: "sb_vbar_clip";
      }
      program { name: "hbar_show";
         signal: "elm,action,show,hbar";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "sb_hbar_clip_master";
      }
      program { name: "hbar_hide";
         signal: "elm,action,hide,hbar";
         source: "elm";
         action:  STATE_SET "hidden" 0.0;
         target: "sb_hbar_clip_master";
      }
      program { name: "hbar_show_always";
         signal: "elm,action,show_always,hbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_h);
            if (!v) {
               set_int(sbalways_h, 1);
               v = get_int(sbvis_h);
               if (!v) {
                  emit("do-show-hbar", "");
                  set_int(sbvis_h, 1);
               }
            }
         }
      }
      program { name: "hbar_show_notalways";
         signal: "elm,action,show_notalways,hbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_h);
            if (v) {
               set_int(sbalways_h, 0);
               v = get_int(sbvis_h);
               if (!v) {
                  emit("do-hide-hbar", "");
                  set_int(sbvis_h, 0);
               }
            }
         }
      }
      program { name: "sb_hbar_show";
         signal: "do-show-hbar";
         source: "";
         action:  STATE_SET "default" 0.0;
         transition: LINEAR 0.5;
         target: "sb_hbar_clip";
      }
      program { name: "sb_hbar_hide";
         signal: "do-hide-hbar";
         source: "";
         action:  STATE_SET "hidden" 0.0;
         transition: LINEAR 0.5;
         target: "sb_hbar_clip";
      }
      program { name: "scroll";
         signal: "elm,action,scroll";
         source: "elm";
         script {
            new v;
            v = get_int(sbvis_v);
            v |= get_int(sbalways_v);
            if (!v) {
               emit("do-show-vbar", "");
               set_int(sbvis_v, 1);
            }
            v = get_int(sbvis_h);
            v |= get_int(sbalways_h);
            if (!v) {
               emit("do-show-hbar", "");
               set_int(sbvis_h, 1);
            }
            v = get_int(sbvis_timer);
            if (v > 0) cancel_timer(v);
            v = timer(1.0, "timer0", 0);
            set_int(sbvis_timer, v);
         }
      }
   }
}

