/*
 * Copyright (c) 2015 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

   group { name: "elm/button/base/default";
      data.item: "vector_ux" "default";
      data.item: "corner_radius" BUTTON_CORNER_RADIUS_INC;
      script {
         public mouse_down = 0;
         public multi_down = 0;
         public disabled = 0;
         public text = 0;
         public content = 0;
         public animate = 0;
         public selected = 0;
         public minw = 0;
         public minh = 0;
         public get_effect_min_size(base_effect, Float:ratio, min_w, min_h) {
            new x, y, w, h;
            get_geometry(base_effect, x, y, w, h);
            if (w > h) {
               set_float(min_w, w - h * (1 - ratio));
               set_float(min_h, h * ratio);
            } else {
               set_float(min_w, w * ratio);
               set_float(min_h, h - w * (1 - ratio));
            }
         }
      }
      parts {
         part { name: "base";
            scale: 1;
            type: SPACER;
            description { state: "default" 0.0;
               min: BUTTON_MIN_WIDTH_INC BUTTON_MIN_HEIGHT_INC;
            }
         }
         //Base Shape Part
         part { name: "tizen_vg_shape";
            type: SWALLOW;
            clip_to: "tizen_vg_shape_clipper";
            scale: 1;
            description { state: "default" 0.0;
               min: 0 BUTTON_MIN_HEIGHT_INC;
               rel1.relative: 0 0.0;
               rel2.relative: 1 1.0;
            }
         }
         part { name: "tizen_vg_shape_clipper";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               color: 82 198 216 255;
            }
            description { state: "disabled" 0.0;
               color: 138 195 204 255;
            }
         }
         part { name: "effect_spacer";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
         //Effect Shape Part
         part { name: "tizen_vg_shape2";
            type: SWALLOW;
            clip_to: "tizen_vg_shape_clipper2";
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.relative: 0.5 0.5;
               rel2.relative: 0.5 0.5;
            }
            description { state: "ready" 0.0;
               rel1.to: "effect_spacer";
               rel2.to: "effect_spacer";
            }
            description { state: "pressed" 0.0;
               inherit: "ready" 0.0;
            }
         }
         part { name: "tizen_vg_shape_clipper2";
            type: RECT;
            description { state: "default" 0.0;
               visible: 0;
               color: 0 0 0 0;
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "pressed" 0.0;
               color: 0 0 0 77;
            }
         }
         part { name: "padding_left_top";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.0 0.0;
               rel2.relative: 0.0 0.0;
               min: BUTTON_PADDING_LEFT_RIGHT_INC BUTTON_PADDING_TOP_HEIGHT_INC;
               fixed: 1 1;
            }
         }
         part { name: "padding_right_bottom";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
               align: 1.0 1.0;
               rel1.relative: 1.0 1.0;
               min: BUTTON_PADDING_LEFT_RIGHT_INC BUTTON_PADDING_BOTTOM_HEIGHT_INC;
               fixed: 1 1;
            }
         }
         part { name: "icon_rect";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.0 0.5;
               rel1 {
                  relative: 1.0 1.0;
                  to: "padding_left_top";
               }
               rel2 {
                  relative: 1.0 0.0;
                  to_x: "padding_left_top";
                  to_y: "padding_right_bottom";
               }
               min: 0 BUTTON_ICON_DEFAULT_HEIGHT_INC;
               fixed: 1 1;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               min: BUTTON_ICON_DEFAULT_WIDTH_INC BUTTON_ICON_DEFAULT_HEIGHT_INC;
               max: BUTTON_ICON_DEFAULT_WIDTH_INC BUTTON_ICON_DEFAULT_HEIGHT_INC;
               fixed: 1 1;
            }
            description { state: "icon_only" 0.0;
               inherit: "default" 0.0;
            }
         }
         part { name: "icon_text_padding";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 1.0 0.5;
               min: 0 0;
               rel1 {
                  relative: 0.0 0.0;
                  to: "elm.text";
               }
               rel2 {
                  relative: 0.0 1.0;
                  to: "elm.text";
               }
               fixed: 1 1;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               min: BUTTON_PADDING_ICON_RIGHT_INC 0;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            scale: 1;
            clip_to: "clipper";
            description { state: "default" 0.0;
               align: 0.0 1.0;
               rel1 {
                  relative: 1.0 1.0;
                  to: "padding_left_top";
               }
               rel2 {
                  relative: 1.0 1.0;
                  to_x: "padding_left_top";
                  to_y: "padding_right_bottom";
               }
               min: 0 BUTTON_ICON_DEFAULT_HEIGHT_INC;
               fixed: 1 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               align: 1.0 0.5;
               rel1 {
                  relative: 0.0 1.0;
                  to_x: "icon_text_padding";
                  to_y: "padding_left_top";
               }
               rel2 {
                  relative: 0.0 0.0;
                  to_x: "icon_text_padding";
                  to_y: "padding_right_bottom";
               }
               min: BUTTON_ICON_DEFAULT_WIDTH_INC BUTTON_ICON_DEFAULT_HEIGHT_INC;
               fixed: 1 1;
            }
            description { state: "icon_only" 0.0;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
               min: BUTTON_ICON_DEFAULT_WIDTH_INC BUTTON_ICON_DEFAULT_HEIGHT_INC;
               max: BUTTON_ICON_DEFAULT_WIDTH_INC BUTTON_ICON_DEFAULT_HEIGHT_INC;
               align: 0.5 0.5;
               fixed: 1 1;
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  relative: 1.0 1.0;
                  to_x: "icon_rect";
                  to_y: "padding_left_top";
               }
               rel2 {
                  relative: 0.0 0.0;
                  to: "padding_right_bottom";
               }
               text {
                  style: "button_main";
                  max: 1 0;
               }
               color: 250 250 250 255;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               text.style: "button_main_press";
               color: 250 250 250 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text.style: "button_main_dim";
               color: 250 250 250 163;
            }
         }
         part { name: "clipper";
            type: RECT;
            description { state: "default" 0.0;
            }
            description { state: "pressed" 0.0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 163;
            }
         }
         part { name: "event";
            type: RECT;
            description { state: "default" 0.0;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
               color: 0 0 0 0;
            }
         }
      }
      programs {
         program { name: "pressed_effect";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper2";
            action: STATE_SET "custom" 0.0;
            target: "tizen_vg_shape2";
            after: "pressed_effect2";
         }
         program { name: "pressed_effect2";
            action: STATE_SET "pressed" 0.0;
            target: "elm.text";
            target: "clipper";
            target: "tizen_vg_shape2";
            target: "tizen_vg_shape_clipper2";
            transition: GLIDE_EASE_OUT(0.15);
            after: "pressed_effect3";
         }
         program { name: "pressed_effect3";
            script {
               set_int(animate, 0);
            }
         }
         program { name: "delay_unpressed_effect";
            in: 0.1 0.0;
            after: "unpressed_effect";
         }
         program { name: "unpressed_effect";
            script {
               if (get_int(disabled) == 0) {
                 run_program(PROGRAM:"unpressed_effect2");
                 run_program(PROGRAM:"unpressed_effect3");
               } else {
                 run_program(PROGRAM:"disabled_effect");
                 run_program(PROGRAM:"disabled_effect2");
                 run_program(PROGRAM:"disabled_effect3");
               }
            }
         }
         program { name: "unpressed_effect2";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape2";
            target: "tizen_vg_shape_clipper2";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "unpressed_effect3";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
            transition: GLIDE_EASE_OUT(0.45);
            after: "unpressed_effect4";
         }
         program { name: "unpressed_effect4";
            action: STATE_SET "default" 0.0;
            target: "clipper";
            after: "finished_animation";
         }
         program { name: "disabled_effect";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape2";
            target: "tizen_vg_shape_clipper2";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "disabled_effect2";
            action: STATE_SET "disabled" 0.0;
            target: "elm.text";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "disabled_effect3";
            action: STATE_SET "disabled" 0.0;
            target: "clipper";
            target: "tizen_vg_shape_clipper";
            transition: GLIDE_EASE_OUT(0.45);
            after: "finished_animation";
         }
         program { name: "finished_animation";
            action: STATE_SET "default" 0.0;
            target: "tizen_vg_shape2";
            target: "tizen_vg_shape_clipper2";
         }
         program { name: "pressed";
            signal: "mouse,down,1*";
            source: "event";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0) && (get_int(disabled) == 0)) {
                  stop_program(PROGRAM:"delay_unpressed_effect");
                  set_int(mouse_down, 1);
                  set_int(animate, 1);
                  custom_state(PART:"tizen_vg_shape2", "default", 0.0);
                  get_effect_min_size(PART:"effect_spacer", 0.7, minw, minh);
                  set_state_val(PART:"tizen_vg_shape2", STATE_MIN, get_int(minw), get_int(minh));
                  emit("elm,action,press", "");
                  run_program(PROGRAM:"pressed_effect");
               }
            }
         }
         program { name: "unpressed";
            signal: "mouse,up,1";
            source: "event";
            script {
               if (get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  if (get_int(disabled) == 0) {
                     if (get_int(animate) == 0) {
                        run_program(PROGRAM:"unpressed_effect");
                     } else {
                        set_state(PART:"elm.text", "pressed", 0.0);
                        set_state(PART:"clipper", "pressed", 0.0);
                        set_state(PART:"tizen_vg_shape2", "pressed", 0.0);
                        set_state(PART:"tizen_vg_shape_clipper2", "pressed", 0.0);
                        set_int(animate, 0);
                        run_program(PROGRAM:"delay_unpressed_effect");
                     }
                     emit("elm,action,unpress", "");
                  }
               }
            }
         }
         program { name: "touch_snd";
            signal: "mouse,clicked,1";
            source: "event";
            script {
               if (get_int(multi_down) == 0) {
                  if (get_int(disabled) == 0) {
                     run_program(PROGRAM:"touch_sound");
                     run_program(PROGRAM:"clicked_signal");
                  }
               }
            }
         }
         program { name: "touch_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "clicked_signal";
            in: 0.001 0.0;
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "icon_show";
            signal: "elm,state,icon,visible";
            source: "elm";
            script {
               set_int(content, 1);
               set_state(PART:"icon_text_padding", "visible", 0.0);
               if (get_int(text) == 1) {
                  set_state(PART:"icon_rect", "visible", 0.0);
                  set_state(PART:"elm.swallow.content", "visible", 0.0);
               } else {
                  set_state(PART:"icon_rect", "icon_only", 0.0);
                  set_state(PART:"elm.swallow.content", "icon_only", 0.0);
                  set_state(PART:"padding_left_top", "icon_only", 0.0);
               }
            }
         }
         program { name: "icon_hide";
            signal: "elm,state,icon,hidden";
            source: "elm";
            script {
               set_int(content, 0);
               set_state(PART:"icon_text_padding", "default", 0.0);
               set_state(PART:"icon_rect", "default", 0.0);
               set_state(PART:"elm.swallow.content", "default", 0.0);
            }
         }
         program { name: "text_show";
            signal: "elm,state,text,visible";
            source: "elm";
            script {
               set_int(text, 1);
               if (get_int(content) == 1) {
                  set_state(PART:"icon_rect", "visible", 0.0);
                  set_state(PART:"elm.swallow.content", "visible", 0.0);
               }
            }
         }
         program { name: "text_hide";
            signal: "elm,state,text,hidden";
            source: "elm";
            script {
               set_int(text, 0);
               if (get_int(content) == 1) {
                  set_state(PART:"icon_rect", "icon_only", 0.0);
                  set_state(PART:"elm.swallow.content", "icon_only", 0.0);
               }
            }
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            script {
               set_int(disabled, 1);
               if (get_int(animate) == 1) return;
               set_state(PART:"clipper", "disabled", 0.0);
               set_state(PART:"tizen_vg_shape_clipper", "disabled", 0.0);
               set_state(PART:"elm.text", "disabled", 0.0);
            }
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            script {
               set_int(disabled, 0);
               set_state(PART:"clipper", "default", 0.0);
               set_state(PART:"tizen_vg_shape_clipper", "default", 0.0);
               set_state(PART:"elm.text", "default", 0.0);
            }
         }
         program { name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program { name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"event", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"event", 0);
            }
         }
      }
   }

   group { name: "elm/button/base/circle";
      data.item: "vector_ux" "circle";
      script {
         public mouse_down = 0;
         public multi_down = 0;
         public disabled = 0;
         public animate = 0;
      }
      parts {
         part { name: "base";
            scale: 1;
            type: SPACER;
            description { state: "default" 0.0;
               min: BUTTON_CIRCLE_BASE_SIZE_INC;
            }
            description { state: "extended" 0.0;
               min: BUTTON_CIRCLE_EXTENDED_SIZE_INC;
            }
         }
         //Base Shape Part
         part { name: "tizen_vg_shape";
            type: SWALLOW;
            clip_to: "tizen_vg_shape_clipper";
            scale: 1;
            description { state: "default" 0.0;
               min: BUTTON_CIRCLE_SIZE_INC;
               rel1.relative: 0.5 0;
               rel2.relative: 0.5 0;
               align: 0.5 0;
               fixed: 1 1;
            }
         }
         part { name: "tizen_vg_shape_clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 82 198 216 255;
            }
            description { state: "disabled" 0.0;
               color: 147 208 217 255;
            }
         }
         part { name: "effect_spacer";
            type: SPACER;
            description { state: "default" 0.0;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
            }
         }
         //Effect Shape Part
         part { name: "tizen_vg_shape2";
            type: SWALLOW;
            clip_to: "tizen_vg_shape_clipper2";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "effect_spacer";
               rel2.to: "effect_spacer";
               rel1.relative: 0.15 0.15;
               rel2.relative: 0.85 0.85;
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 1.0;
            }
         }
         part { name: "tizen_vg_shape_clipper2";
            type: RECT;
            description { state: "default" 0.0;
               visible: 0;
               color: 0 0 0 0;
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "pressed" 0.0;
               color: 0 0 0 77;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            scale: 1;
            clip_to: "clipper";
            description { state: "default" 0.0;
               min: BUTTON_CIRCLE_ICON_SIZE_INC;
               fixed: 1 1;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
               rel1.relative: 0.5 0.5;
               rel2.relative: 0.5 0.5;
            }
         }
         part { name: "icon_text_padding";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to_y: "tizen_vg_shape";
               rel2.to_y: "tizen_vg_shape";
               rel1.relative: 0.0 1.0;
               rel2.relative: 1.0 1.0;
               align: 0.5 0.0;
               min: 0 0;
               fixed: 1 1;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               min: 0 BUTTON_CIRCLE_PADDING_ICON_BOTTOM_INC;
            }
         }
         part { name: "text_left_padding";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               min: BUTTON_CIRCLE_PADDING_TEXT_LEFT_RIGHT_INC 0;
               rel1 {
                  relative: 0.0 1.0;
                  to: "icon_text_padding";
               }
               rel2.relative: 0.0 1.0;
               align: 0.0 0.5;
               fixed: 1 0;
            }
         }
         part { name: "text_right_padding";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               min: BUTTON_CIRCLE_PADDING_TEXT_LEFT_RIGHT_INC 0;
               rel1 {
                  relative: 1.0 1.0;
                  to: "icon_text_padding";
               }
               align: 1.0 0.5;
               fixed: 1 0;
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               rel1 {
                  relative: 1.0 0.0;
                  to: "text_left_padding";
               }
               rel2 {
                  relative: 0.0 1.0;
                  to: "text_right_padding";
               }
               text {
                  style: "button_circle";
                  align: 0.5 0;
                  min: 0 0;
               }
               align: 0.5 0;
               min: 0 0;
               color: 0 0 0 222;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               text.style: "button_circle_press";
               color: 0 0 0 222;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text.style: "button_circle_dim";
               color: 0 0 0 115;
            }
         }
         part { name: "clipper";
            type: RECT;
            description { state: "default" 0.0;
            }
            description { state: "pressed" 0.0;
            }
            description { state: "disabled" 0.0;
               color: 255 255 255 127;
            }
         }
         part { name: "event";
            type: RECT;
            description { state: "default" 0.0;
               rel1.to: "tizen_vg_shape";
               rel2.to: "elm.text";
               color: 0 0 0 0;
            }
         }
      }
      programs {
         program { name: "pressed_effect";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape2";
            target: "tizen_vg_shape_clipper2";
            after: "pressed_effect2";
         }
         program { name: "pressed_effect2";
            action: STATE_SET "pressed" 0.0;
            target: "tizen_vg_shape2";
            target: "elm.text";
            target: "clipper";
            target: "tizen_vg_shape_clipper2";
            transition: GLIDE_EASE_OUT(0.15);
            after: "pressed_effect3";
         }
         program { name: "pressed_effect3";
            script {
               set_int(animate, 0);
            }
         }
         program { name: "delay_unpressed_effect";
            in: 0.1 0.0;
            after: "unpressed_effect";
         }
         program { name: "unpressed_effect";
            script {
               if (get_int(disabled) == 0) {
                 run_program(PROGRAM:"unpressed_effect2");
                 run_program(PROGRAM:"unpressed_effect3");
               } else {
                 run_program(PROGRAM:"disabled_effect");
                 run_program(PROGRAM:"disabled_effect2");
                 run_program(PROGRAM:"disabled_effect3");
               }
            }
         }
         program { name: "unpressed_effect2";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper2";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "unpressed_effect3";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
            transition: GLIDE_EASE_OUT(0.45);
            after: "unpressed_effect4";
         }
         program { name: "unpressed_effect4";
            action: STATE_SET "default" 0.0;
            target: "clipper";
            after: "finished_animation";
         }
         program { name: "disabled_effect";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper2";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "disabled_effect2";
            action: STATE_SET "disabled" 0.0;
            target: "elm.text";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "disabled_effect3";
            action: STATE_SET "disabled" 0.0;
            target: "clipper";
            target: "tizen_vg_shape_clipper";
            transition: GLIDE_EASE_OUT(0.45);
            after: "finished_animation";
         }
         program { name: "finished_animation";
            action: STATE_SET "default" 0.0;
            target: "tizen_vg_shape2";
            target: "tizen_vg_shape_clipper2";
         }
         program { name: "pressed";
            signal: "mouse,down,1*";
            source: "event";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0) && (get_int(disabled) == 0)) {
                  stop_program(PROGRAM:"delay_unpressed_effect");
                  set_int(mouse_down, 1);
                  set_int(animate, 1);
                  emit("elm,action,press", "");
                  run_program(PROGRAM:"pressed_effect");
               }
            }
         }
         program { name: "unpressed";
            signal: "mouse,up,1";
            source: "event";
            script {
               if (get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  if (get_int(disabled) == 0) {
                     if (get_int(animate) == 0) {
                        emit("elm,action,unpress", "");
                        run_program(PROGRAM:"unpressed_effect");
                     } else {
                        set_state(PART:"elm.text", "pressed", 0.0);
                        set_state(PART:"clipper", "pressed", 0.0);
                        set_state(PART:"tizen_vg_shape2", "pressed", 0.0);
                        set_state(PART:"tizen_vg_shape_clipper2", "pressed", 0.0);
                        set_int(animate, 0);
                        run_program(PROGRAM:"delay_unpressed_effect");
                     }
                  }
               }
            }
         }
         program { name: "touch_snd";
            signal: "mouse,clicked,1";
            source: "event";
            script {
               if (get_int(multi_down) == 0) {
                  if (get_int(disabled) == 0) {
                     run_program(PROGRAM:"touch_sound");
                     run_program(PROGRAM:"clicked_signal");
                  }
               }
            }
         }
         program { name: "touch_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "clicked_signal";
            in: 0.001 0.0;
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "text_show";
            signal: "elm,state,text,visible";
            source: "elm";
            script {
               set_state(PART:"base", "extended", 0.0);
               set_state(PART:"icon_text_padding", "visible", 0.0);
            }
         }
         program { name: "text_hide";
            signal: "elm,state,text,hidden";
            source: "elm";
            script {
               set_state(PART:"base", "default", 0.0);
               set_state(PART:"icon_text_padding", "default", 0.0);
            }
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            script {
              set_int(disabled, 1);
              if (get_int(animate) == 1) return;
              set_state(PART:"clipper", "disabled", 0.0);
              set_state(PART:"tizen_vg_shape_clipper", "disabled", 0.0);
              set_state(PART:"elm.text", "disabled", 0.0);
            }
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            script {
              set_int(disabled, 0);
              set_state(PART:"clipper", "default", 0.0);
              set_state(PART:"tizen_vg_shape_clipper", "default", 0.0);
              set_state(PART:"elm.text", "default", 0.0);
            }
         }
         program { name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program { name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"event", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"event", 0);
            }
         }
      }
   }

   group { name: "elm/button/base/floatingbutton/default";
      data.item: "vector_ux" "no_bg/circle";
      script {
         public mouse_down = 0;
         public multi_down = 0;
         public disabled = 0;
         public animate = 0;
         public min_radius = 0;
         public max_radius = 0;
         public get_circumscription_radius(base_effect, radius) {
            new x, y, w, h;
            get_geometry(base_effect, x, y, w, h);
            set_float(radius, sqrt(pow(w, 2) + pow(h, 2)));
         }
      }
      parts {
         part { name: "base";
            type: SPACER;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_ICON_WIDTH_INC BUTTON_ICON_HEIGHT_INC;
               max: BUTTON_ICON_WIDTH_INC BUTTON_ICON_HEIGHT_INC;
            }
         }
         part { name: "effect_spacer";
            type: SPACER;
            description { state: "default" 0.0;
               fixed: 1 1;
            }
         }
         //Effect Shape Part
         part { name: "tizen_vg_shape";
            type: SWALLOW;
            clip_to: "tizen_vg_shape_clipper";
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.relative: 0.5 0.5;
               rel2.relative: 0.5 0.5;
            }
            description { state: "ready" 0.0;
               fixed: 1 1;
               rel1.to: "effect_spacer";
               rel2.to: "effect_spacer";
               rel1.relative: 0.15 0.15;
               rel2.relative: 0.85 0.85;
            }
            description { state: "pressed" 0.0;
               inherit: "ready" 0.0;
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 1.0;
            }
         }
         part { name: "tizen_vg_shape_clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
               fixed: 1 1;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               color: 0 0 0 77;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            scale: 1;
            clip_to: "clipper";
            description { state: "default" 0.0;
               min: BUTTON_ICON_WIDTH_INC BUTTON_ICON_HEIGHT_INC;
               max: BUTTON_ICON_WIDTH_INC BUTTON_ICON_HEIGHT_INC;
               rel1.to: "base";
               rel2.to: "base";
               align: 0.5 0.5;
               fixed: 1 1;
            }
         }
         part { name: "clipper";
            type: RECT;
            description { state: "default" 0.0;
            }
            description { state: "pressed" 0.0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 250 250 250 163;
            }
         }
         part { name: "event";
            type: RECT;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               color: 0 0 0 0;
            }
         }
      }
      programs {
         program { name: "pressed_effect";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            target: "tizen_vg_shape";
            after: "pressed_effect2";
         }
         program { name: "pressed_effect2";
            action: STATE_SET "pressed" 0.0;
            target: "tizen_vg_shape_clipper";
            target: "tizen_vg_shape";
            target: "clipper";
            transition: GLIDE_EASE_OUT(0.15);
            after: "pressed_effect3";
         }
         program { name: "pressed_effect3";
            script {
               set_int(animate, 0);
            }
         }
         program { name: "delay_unpressed_effect";
            in: 0.1 0.0;
            after: "unpressed_effect";
         }
         program { name: "unpressed_effect";
            script {
               if (get_int(disabled) == 0) {
                  run_program(PROGRAM:"unpressed_effect2");
                  run_program(PROGRAM:"unpressed_effect3");
               } else {
                  run_program(PROGRAM:"disabled_effect");
                  run_program(PROGRAM:"disabled_effect2");
               }
            }
         }
         program { name: "unpressed_effect2";
            action: STATE_SET "default" 0.0;
            target: "clipper";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "unpressed_effect3";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            transition: GLIDE_EASE_OUT(0.45);
            after: "finished_animation";
         }
         program { name: "disabled_effect";
            action: STATE_SET "disabled" 0.0;
            target: "clipper";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "disabled_effect2";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            transition: GLIDE_EASE_OUT(0.45);
            after: "finished_animation";
         }
         program { name: "finished_animation";
            action: STATE_SET "default" 0.0;
            target: "tizen_vg_shape";
            target: "tizen_vg_shape_clipper";
         }
         program { name: "pressed";
            signal: "mouse,down,1*";
            source: "event";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0) && (get_int(disabled) == 0)) {
                  stop_program(PROGRAM:"delay_unpressed_effect");
                  set_int(mouse_down, 1);
                  set_int(animate, 1);
                  set_state(PART:"effect_spacer", "default", 0.0);
                  get_circumscription_radius(PART:"effect_spacer", max_radius);
                  custom_state(PART:"effect_spacer", "default", 0.0)
                  set_state_val(PART:"effect_spacer", STATE_MIN, get_int(max_radius), get_int(max_radius));
                  set_state(PART:"effect_spacer", "custom", 0.0);
                  emit("elm,action,press", "");
                  run_program(PROGRAM:"pressed_effect");
               }
            }
         }
         program { name: "unpressed";
            signal: "mouse,up,1";
            source: "event";
            script {
               if (get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  if (get_int(disabled) == 0) {
                     if (get_int(animate) == 0) {
                        run_program(PROGRAM:"unpressed_effect");
                     } else {
                        set_state(PART:"tizen_vg_shape", "pressed", 0.0);
                        set_state(PART:"tizen_vg_shape_clipper", "pressed", 0.0);
                        set_int(animate, 0);
                        run_program(PROGRAM:"delay_unpressed_effect");
                     }
                     emit("elm,action,unpress", "");
                  }
               }
            }
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "event";
            script {
               if (get_int(multi_down) == 0) {
                  if (get_int(disabled) == 0) {
                     run_program(PROGRAM:"play_sound");
                     run_program(PROGRAM:"clicked_signal");
                  }
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "clicked_signal";
            in: 0.001 0.0;
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            script {
              set_int(disabled, 0);
              set_state(PART:"clipper", "default", 0.0);
            }
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            script {
              set_int(disabled, 1);
              if (get_int(animate) == 1) return;
              set_state(PART:"clipper", "disabled", 0.0);
            }
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"event", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"event", 0);
            }
         }
         program {
            signal: "elm,state,default";
            source: "elm";
            script {
               set_state(PART:"clipper", "default", 0.0);
               set_state(PART:"tizen_vg_shape", "default", 0.0);
               set_state(PART:"tizen_vg_shape_clipper", "default", 0.0);
               set_state(PART:"effect_spacer", "default", 0.0);
               set_int(mouse_down, 0);
            }
         }
      }
   }
   group { "elm/button/base/floatingbutton/white_bg";
      inherit: "elm/button/base/floatingbutton/default";
      parts {
         part { name: "tizen_vg_shape_clipper";
            type: RECT;
            description { state: "default" 0.0;
               visible: 0;
               color: 61 185 204 0;
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "pressed" 0.0;
               color: 61 185 204 77;
            }
         }
         part { name: "clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 78 97 173 255;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 16 47 173 255;
            }
         }
      }
   }
   group { "elm/button/base/editfield_clear";
      inherit: "elm/button/base/floatingbutton/default";
      images {
         image: "core_button_icon_clear.png" COMP;
      }
      parts {
         part { name: "base";
            type: SPACER;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_EDITFIELD_CLEAR_BUTTON_WIDTH_INC BUTTON_EDITFIELD_CLEAR_BUTTON_HEIGHT_INC;
               max: BUTTON_EDITFIELD_CLEAR_BUTTON_WIDTH_INC BUTTON_EDITFIELD_CLEAR_BUTTON_HEIGHT_INC;
            }
         }
         part { name: "tizen_vg_shape_clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
               fixed: 1 1;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
               color: 61 185 204 0;
               visible: 1;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               color: 61 185 204 77;
            }
         }
         part { name: "button_center_part";
            clip_to: "clipper";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               image.normal: "core_button_icon_clear.png";
            }
         }
         part { name: "clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 61 184 204 255;
            }
            description { state: "pressed" 0.0;
               color: 34 104 114 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 0 0 0 77;
            }
         }
      }
   }
   group { name: "elm/button/base/bottom";
      inherit: "elm/button/base/default";
      data.item: "vector_ux" "bottom";
      data.item: "corner_radius" BUTTON_BOTTOM_CORNER_RADIUS;
      parts {
         part { name: "base";
            scale: 1;
            type: SPACER;
            description { state: "default" 0.0;
               min: BUTTON_BOTTOM_MIN_WIDTH_INC BUTTON_BOTTOM_MIN_HEIGHT_INC;
               max: BUTTON_BOTTOM_MAX_WIDTH_INC BUTTON_BOTTOM_MAX_HEIGHT_INC;
            }
         }
         part { name: "tizen_vg_shape";
            type: SWALLOW;
            clip_to: "tizen_vg_shape_clipper";
            scale: 1;
            description { state: "default" 0.0;
               min: 0 BUTTON_BOTTOM_MIN_HEIGHT_INC;
               max: BUTTON_BOTTOM_MAX_WIDTH_INC BUTTON_BOTTOM_MAX_HEIGHT_INC;
            }
         }
         //Base Shape Part
         part { name: "tizen_vg_shape_clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 78 97 173 255;
            }
            description { state: "disabled" 0.0;
               color: 131 145 201 255;
            }
         }
         part { name: "effect_spacer";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
            }
         }
         part { name: "tizen_vg_shape_clipper2";
            type: RECT;
            description { state: "default" 0.0;
               visible: 0;
               color: 0 0 0 0;
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "pressed" 0.0;
               color: 0 0 0 77;
            }
         }
         part { name: "padding_left_top";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
               align: 0.0 0.0;
               rel1.relative: 0.0 0.0;
               min: BUTTON_PADDING_LEFT_RIGHT_INC BUTTON_BOTTOM_PADDING_TOP_HEIGHT_INC;
               fixed: 1 1;
            }
         }
         part { name: "padding_right_bottom";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
               align: 1.0 1.0;
               rel1.relative: 1.0 1.0;
               min: BUTTON_PADDING_LEFT_RIGHT_INC BUTTON_BOTTOM_PADDING_BOTTOM_HEIGHT_INC;
               fixed: 1 1;
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  relative: 1.0 1.0;
                  to_x: "icon_rect";
                  to_y: "padding_left_top";
               }
               rel2 {
                  relative: 0.0 0.0;
                  to: "padding_right_bottom";
               }
               text {
                  style: "button_bottom";
                  max: 1 0;
               }
               color: 255 255 255 255;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               text.style: "button_bottom_press";
               color: 255 255 255 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text.style: "button_bottom_dim";
               color: 255 255 255 163;
            }
         }
      }
   }
   group { name: "elm/button/base/popup";
      inherit: "elm/button/base/bottom";
      data.item: "vector_ux" "bottom";
      data.item: "corner_radius" BUTTON_BOTTOM_CORNER_RADIUS;
      parts {
         part { name: "base";
            scale: 1;
            type: SPACER;
            description { state: "default" 0.0;
               min: BUTTON_POPUP_MIN_WIDTH_INC BUTTON_POPUP_MIN_HEIGHT_INC;
            }
         }
         part { name: "tizen_vg_shape";
            type: SWALLOW;
            clip_to: "tizen_vg_shape_clipper";
            scale: 1;
            description { state: "default" 0.0;
               min: 0 BUTTON_POPUP_MIN_HEIGHT_INC;
            }
         }
      }
   }
  /* This transparent button style is used by applications which use webview. */
   group{ name: "elm/button/base/transparent";
       script {
         public mouse_down = 0;
         public multi_down = 0;
       }
       parts {
         part { name: "bg";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
        part { name: "event";
            type: RECT;
            scale: 1;
            /* Do not remove the following line.
             * elm.swallow.content part should receive mouse events. */
            repeat_events: 1;
            ignore_flags: ON_HOLD;
            description { state: "default" 0.0;
              color: 0 0 0 0;
            }
         }
      }
      programs {
         program { name: "pressed";
            signal: "mouse,down,1*";
            source: "event";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_press1");
                 }
            }
         }
         program { name: "button_press1";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"bg", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  emit("elm,action,press", "");
               }
            }
         }
         program { name: "unpressed";
            signal: "mouse,up,1";
            source: "event";
            script {
               if (get_int(mouse_down) == 1) {
                 set_int(mouse_down, 0);
                 run_program(PROGRAM:"button_unpress1");
               }
            }
         }
         program { name: "button_unpress1";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"bg", st, 30, vl);
               if (strcmp(st, "disabled")) {
                  emit("elm,action,unpress", "");
               }
            }
         }
         program { name: "clicked";
            signal: "mouse,clicked,1";
            source: "event";
            script {
               new st[31];
               new Float:vl;
               if (get_int(multi_down) == 0) {
                  get_state(PART:"bg", st, 30, vl);
                  if (strcmp(st, "disabled")) {
                     emit("elm,action,click", "");
                  }
               }
            }
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "bg";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "bg";
         }
         program { name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program { name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"event", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"event", 0);
            }
         }
      }
   }

///////////////////////////////////////////////////////////////////////////////////////
#define BUTTON_ICON_STYLES(style_name, image_normal, color_normal_r, color_normal_g, color_normal_b, color_normal_a, color_press_r, color_press_g, color_press_b, color_press_a, color_dim_r, color_dim_g, color_dim_b, color_dim_a, min_width, min_height) \
   group { name: "elm/button/base/"style_name; \
      data.item: "vector_ux" "no_bg/circle"; \
      images { \
         image: image_normal COMP; \
      } \
      script { \
         public mouse_down = 0; \
         public multi_down = 0; \
         public disabled = 0; \
         public animate = 0; \
         public min_radius = 0; \
         public max_radius = 0; \
         public get_circumscription_radius(base_effect, radius) { \
            new x, y, w, h; \
            get_geometry(base_effect, x, y, w, h); \
            set_float(radius, sqrt(pow(w, 2) + pow(h, 2))); \
            get_geometry(PART:"effect_spacer", x, y, w, h); \
            if (w > get_float(radius)) \
               set_float(radius, w); \
         } \
      } \
      parts { \
         part { name: "button_bg"; \
            type: SPACER; \
            scale: 1; \
            description { state: "default" 0.0; \
               min: min_width min_height; \
               max: min_width min_height; \
            } \
         } \
         part { name: "effect_spacer";\
            type: SPACER; \
            scale: 1; \
            description { state: "default" 0.0; \
               fixed: 1 1; \
               rel1.relative: 0.5 0.5; \
               rel2.relative: 0.5 0.5; \
               min: BUTTON_ICON_MIN_RADIUS_INC BUTTON_ICON_MIN_RADIUS_INC; \
            } \
         } \
         part { name: "tizen_vg_shape"; \
            type: SWALLOW; \
            clip_to: "tizen_vg_shape_clipper"; \
            scale: 1; \
            description { state: "default" 0.0; \
               fixed: 1 1; \
               rel1.relative: 0.5 0.5; \
               rel2.relative: 0.5 0.5; \
            } \
            description { state: "ready" 0.0; \
               fixed: 1 1; \
               rel1.to: "effect_spacer"; \
               rel2.to: "effect_spacer"; \
            } \
            description { state: "pressed" 0.0; \
               inherit: "ready" 0.0; \
               rel1.relative: -0.15 -0.15; \
               rel2.relative: 1.15 1.15; \
            } \
         } \
         part { name: "tizen_vg_shape_clipper"; \
            type: RECT; \
            description { state: "default" 0.0; \
               color: 0 0 0 0; \
               visible: 0; \
               fixed: 1 1; \
               rel1.to: "tizen_vg_shape"; \
               rel2.to: "tizen_vg_shape"; \
            } \
            description { state: "ready" 0.0; \
               inherit: "default" 0.0; \
               color: 61 185 204 0; \
               visible: 1; \
            } \
            description { state: "pressed" 0.0; \
               inherit: "default" 0.0; \
               color: 61 185 204 77; \
               visible: 1; \
            } \
         } \
         part { name: "button_center_part"; \
            mouse_events: 0; \
            scale: 1; \
            description { state: "default" 0.0; \
               rel1.to: "button_bg"; \
               rel2.to: "button_bg"; \
               image.normal: image_normal; \
               color: color_normal_r color_normal_g color_normal_b color_normal_a; \
            } \
            description { state: "pressed" 0.0; \
               inherit: "default" 0.0; \
               color: color_press_r color_press_g color_press_b color_press_a; \
            } \
            description { state: "disabled" 0.0; \
               inherit: "default" 0.0; \
               color: color_dim_r color_dim_g color_dim_b color_dim_a; \
            } \
         } \
         part { name: "event"; \
            type: RECT; \
            description { state: "default" 0.0; \
               rel1.to: "button_bg"; \
               rel2.to: "button_bg"; \
               color: 0 0 0 0; \
            } \
         } \
      } \
      programs { \
         program { name: "pressed_effect"; \
            action: STATE_SET "ready" 0.0; \
            target: "tizen_vg_shape_clipper"; \
            target: "tizen_vg_shape"; \
            after: "pressed_effect2"; \
         } \
         program { name: "pressed_effect2"; \
            action: STATE_SET "pressed" 0.0; \
            target: "tizen_vg_shape_clipper"; \
            target: "tizen_vg_shape"; \
            target: "button_center_part"; \
            transition: GLIDE_EASE_OUT(0.15); \
            after: "pressed_effect3"; \
         } \
         program { name: "pressed_effect3"; \
            script { \
               set_int(animate, 0); \
            } \
         } \
         program { name: "delay_unpressed_effect"; \
            in: 0.1 0.0; \
            after: "unpressed_effect"; \
         } \
         program { name: "unpressed_effect"; \
            script { \
               if (get_int(disabled) == 0) { \
                 run_program(PROGRAM:"unpressed_effect2"); \
                 run_program(PROGRAM:"unpressed_effect3"); \
               } \
               else { \
                 run_program(PROGRAM:"disabled_effect"); \
                 run_program(PROGRAM:"disabled_effect2"); \
               } \
            } \
         } \
         program { name: "unpressed_effect2"; \
            action: STATE_SET "default" 0.0; \
            target: "button_center_part"; \
            transition: GLIDE_EASE_OUT(0.45); \
         } \
         program { name: "unpressed_effect3"; \
            action: STATE_SET "ready" 0.0; \
            target: "tizen_vg_shape_clipper"; \
            transition: GLIDE_EASE_OUT(0.45); \
            after: "finished_animation"; \
         } \
         program { name: "disabled_effect"; \
            action: STATE_SET "disabled" 0.0; \
            target: "button_center_part"; \
            transition: GLIDE_EASE_OUT(0.45); \
         } \
         program { name: "disabled_effect2"; \
            action: STATE_SET "ready" 0.0; \
            target: "tizen_vg_shape_clipper"; \
            transition: GLIDE_EASE_OUT(0.45); \
            after: "finished_animation"; \
         } \
         program { name: "finished_animation"; \
            action: STATE_SET "default" 0.0; \
            target: "tizen_vg_shape"; \
            target: "tizen_vg_shape_clipper"; \
         } \
         program { name: "pressed"; \
            signal: "mouse,down,1*"; \
            source: "event"; \
            script { \
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0) && (get_int(disabled) == 0)) { \
                  stop_program(PROGRAM:"delay_unpressed_effect"); \
                  set_int(mouse_down, 1); \
                  set_int(animate, 1); \
                  get_circumscription_radius(PART:"button_bg", min_radius); \
                  custom_state(PART:"effect_spacer", "default", 0.0); \
                  set_state_val(PART:"effect_spacer", STATE_MIN, get_int(min_radius), get_int(min_radius)); \
                  set_state(PART:"effect_spacer", "custom",0.0); \
                  emit("elm,action,press", ""); \
                  run_program(PROGRAM:"pressed_effect"); \
               } \
            } \
         } \
         program { name: "unpressed"; \
            signal: "mouse,up,1"; \
            source: "event"; \
            script { \
               if (get_int(mouse_down) == 1) { \
                  set_int(mouse_down, 0); \
                  if (get_int(disabled) == 0) { \
                     if (get_int(animate) == 0) { \
                        run_program(PROGRAM:"unpressed_effect"); \
                     } else { \
                        set_state(PART:"tizen_vg_shape", "pressed", 0.0); \
                        set_state(PART:"tizen_vg_shape_clipper", "pressed", 0.0); \
                        set_state(PART:"button_center_part", "pressed", 0.0); \
                        set_int(animate, 0); \
                        run_program(PROGRAM:"delay_unpressed_effect"); \
                     } \
                     emit("elm,action,unpress", ""); \
                  } \
               } \
            } \
         } \
         program { name: "button_click"; \
            signal: "mouse,clicked,1"; \
            source: "event"; \
            script { \
               if (get_int(multi_down) == 0) \
                 { \
                    if (get_int(disabled) == 0) \
                      { \
                         run_program(PROGRAM:"touch_sound"); \
                         run_program(PROGRAM:"button_click2"); \
                      } \
                 } \
            } \
         } \
         program { name: "touch_sound"; \
            action: RUN_PLUGIN "touch_sound"; \
         } \
         program { name: "button_click2"; \
            in: 0.001 0.0; \
            action: SIGNAL_EMIT "elm,action,click" ""; \
         } \
         program { name: "disable"; \
            signal: "elm,state,disabled"; \
            source: "elm"; \
            script { \
              set_int(disabled, 1); \
              if (get_int(animate) == 1) return; \
              set_state(PART:"button_center_part", "disabled", 0.0); \
            } \
         } \
         program { name: "enable"; \
            signal: "elm,state,enabled"; \
            source: "elm"; \
            action: STATE_SET "default" 0.0; \
            script { \
              set_int(disabled, 0); \
              set_state(PART:"button_center_part", "default", 0.0); \
            } \
         } \
         program { \
            name: "multi_down"; \
            signal: "elm,action,multi,down"; \
            source: "elm"; \
            script { \
               set_int(multi_down, 1); \
            } \
         } \
         program { \
            name: "multi_up"; \
            signal: "elm,action,multi,up"; \
            source: "elm"; \
            script { \
               set_int(multi_down, 0); \
            } \
         } \
         program { name: "pass_event_enable"; \
            signal: "elm,event,pass,enabled"; \
            source: "elm"; \
            script { \
               set_mouse_events(PART:"event", 0); \
            } \
         } \
         program { name: "pass_event_disable"; \
            signal: "elm,event,pass,disabled"; \
            source:"elm"; \
            script { \
               set_mouse_events(PART:"event", 1); \
            } \
         } \
         program { name: "repeat_event_enable"; \
            signal: "elm,event,repeat,enabled"; \
            source: "elm"; \
            script { \
               set_mouse_events(PART:"event", 1); \
            } \
         } \
         program { name: "repeat_event_disable"; \
            signal: "elm,event,repeat,disabled"; \
            source:"elm"; \
            script { \
               set_mouse_events(PART:"event", 0); \
            } \
         } \
      } \
   }

///////////////////////////////////////////////////////////////////////////////////////
   BUTTON_ICON_STYLES("icon_reorder", "core_button_reorder.png", 61, 185, 204, 255, 34, 104, 115, 255, 61, 185, 204, 77,  BUTTON_ICON_WIDTH_INC, BUTTON_ICON_HEIGHT_INC)
///////////////////////////////////////////////////////////////////////////////////////
   BUTTON_ICON_STYLES("icon_expand_add", "core_button_add.png", 61, 185, 204, 255, 34, 104, 115, 255, 61, 185, 204, 77,  BUTTON_ICON_WIDTH_INC, BUTTON_ICON_HEIGHT_INC)
///////////////////////////////////////////////////////////////////////////////////////
   BUTTON_ICON_STYLES("icon_expand_delete", "core_button_delete.png", 214, 49, 49, 255, 176, 40, 40, 255, 0, 0, 0, 77,  BUTTON_ICON_WIDTH_INC, BUTTON_ICON_HEIGHT_INC)
///////////////////////////////////////////////////////////////////////////////////////
   BUTTON_ICON_STYLES("calendar_arrow_left/default", "core_date_picker_arrow_l.png", 61, 184, 204, 255, 42, 127, 140, 255, 0, 0, 0, 77, BUTTON_CALENDAR_DATE_PICKER_LEFT_RIGHT_ARROW_WIDTH_INC, BUTTON_CALENDAR_DATE_PICKER_LEFT_RIGHT_ARROW_HEIGHT_INC)
   BUTTON_ICON_STYLES("calendar_arrow_right/default", "core_date_picker_arrow_r.png", 61, 184, 204, 255, 42, 127, 140, 255, 0, 0, 0, 77, BUTTON_CALENDAR_DATE_PICKER_LEFT_RIGHT_ARROW_WIDTH_INC, BUTTON_CALENDAR_DATE_PICKER_LEFT_RIGHT_ARROW_HEIGHT_INC)
///////////////////////////////////////////////////////////////////////////////////////



group { name: "elm/button/base/contacts";
      data {
         item: "focus_highlight" "on";
      }
      images {
         set {
         name: "core_list_button_bg.#";
            image {
               image: SMALL"images/User_Input_Elements/core_list_button_bg.#.png" COMP;
            }
            image {
               image: MEDIUM"images/User_Input_Elements/core_list_button_bg.#.png" COMP;
            }
         }
      }
      script {
         public button_state = 0;
         public mouse_down = 0;
         public multi_down = 0;
      }
      parts {
         part { name: "button_image_base";
            scale: 1;
            type: SPACER;
            description { state: "default" 0.0;
               rel1 {
                  to_x: "padding.left";
                  to_y: "elm.text";
               }
               rel2 {
                  to_x: "padding.right";
                  to_y: "elm.text";
               }
               min: 0 BUTTON_MIN_HEIGHT_INC;
               max: -1 BUTTON_MIN_HEIGHT_INC;
            }
         }
         part { name: "button_image";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "button_image_base";
               rel2.to: "button_image_base";
               image.normal: "core_list_button_bg.#";
               color: 38 107 191 255;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 30 85 153 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 76 128 191 255;
            }
         }
         part { name: "padding.left";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               min: BUTTON_PADDING_LEFT_RIGHT_INC 0;
               fixed: 1 0;
               rel2 {
                  relative: 0.0 1.0;
                  to_x: "elm.text";
               }
               align: 1.0 0.0;
            }
         }
         part { name: "padding.right";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               min: BUTTON_PADDING_LEFT_RIGHT_INC 0;
               fixed: 1 0;
               rel1 {
                  relative: 1.0 0.0;
                  to_x: "elm.text";
               }
               align: 0.0 0.0;
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               fixed: 1 1;
               text {
                  style: "button_contacts";
                  min: 1 1;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               min: 1 1;
            }
            description { state: "pressed" 0.0;
               inherit: "visible" 0.0;
               text {
                  style: "button_contacts_press";
               }
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "disabled_visible" 0.0;
               inherit: "visible" 0.0;
               text {
                  style: "button_contacts_dim";
                  min: 1 1;
               }
            }
         }
         part { name: "over1";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               rel2.relative: 1.0 0.5;
               color: 0 0 0 0;
            }
         }
         part { name: "over2";
            type: RECT;
            repeat_events: 1;
            ignore_flags: ON_HOLD;
            description { state: "default" 0.0;
               rel1.to: "button_image_base";
               rel2.to: "button_image_base";
               color: 0 0 0 0;
            }
         }
         part { name: "over3";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               rel1.to: "button_image_base";
               rel2.to: "button_image_base";
               color: 0 0 0 0;
            }
         }
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               rel1.to: "button_image_base";
               rel2.to: "button_image_base";
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "button_press";
            signal: "mouse,down,1*";
            source: "over3";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_press2");
                 }
            }
         }
         program { name: "button_press2";
            action: SIGNAL_EMIT "elm,action,press" "";
            after: "button_press_anim";
         }
         program { name: "button_press_anim";
            action: STATE_SET "pressed" 0.0;
            target: "button_image";
            target: "elm.text";
         }
         program { name: "key_press";
            signal: "elm,action,pressed";
            source: "elm";
            script {
               new st[31];
               new Float:vl;
               set_state(PART:"button_image", "pressed", 0.0);
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"elm.text", "pressed", 0.0);
            }
         }
         program { name: "key_unpress";
            signal: "elm,action,unpressed";
            source: "elm";
            script {
               new st[31];
               new Float:vl;
               set_state(PART:"button_image", "default", 0.0);
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "pressed"))
                 set_state(PART:"elm.text", "visible", 0.0);
            }
         }
         program { name: "button_unpress";
            signal: "mouse,up,1*";
            source: "over3";
            script {
               new st[31];
               new Float:vl;
               if (get_int(mouse_down) == 1) {
                 set_int(mouse_down, 0);
                 get_state(PART:"elm.text", st, 30, vl);
                 if (!strcmp(st, "pressed") )
                   {
                      emit("elm,action,default,text,set", "");
                      set_state(PART:"elm.text", "visible", 0.0);
                   }
                 if (get_int(button_state) != 1)
                   set_state(PART:"button_image", "default", 0.0);
                 run_program(PROGRAM:"button_unpress2");
               }
            }
         }
         program { name: "button_unpress2";
            action: SIGNAL_EMIT "elm,action,unpress" "";
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "over3";
            script {
               if (get_int(multi_down) == 0) {
                 run_program(PROGRAM:"play_sound");
                 run_program(PROGRAM:"button_click2");
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "button_click2";
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "text_show";
            signal: "elm,state,text,visible";
            source: "elm";
            script {
               if (get_int(button_state) != 1)
                 set_state(PART:"elm.text", "visible", 0.0);
               else
                 set_state(PART:"elm.text", "disabled_visible", 0.0);
            }
         }
         program { name: "text_hide";
            signal: "elm,state,text,hidden";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "button_image";
            target: "disabler";
            after: "disable_text";
         }
         program { name: "disable_text";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"elm.text", "disabled_visible", 0.0);
               else
                 set_state(PART:"elm.text", "disabled", 0.0);
               set_int(button_state, 1);
            }
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "button_image";
            target: "disabler";
            after: "enable_text";
         }
         program { name: "enable_text";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "disabled_visible"))
                 set_state(PART:"elm.text", "visible", 0.0);
               else
                 set_state(PART:"elm.text", "default", 0.0);
               set_int(button_state, 0);
            }
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"over1", 0);
               set_mouse_events(PART:"over2", 0);
               set_mouse_events(PART:"over3", 0);
               set_mouse_events(PART:"disabler", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"over1", 1);
               set_mouse_events(PART:"over2", 1);
               set_mouse_events(PART:"over3", 1);
               set_mouse_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"over1", 1);
               set_repeat_events(PART:"over2", 1);
               set_repeat_events(PART:"over3", 1);
               set_repeat_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"over1", 0);
               set_repeat_events(PART:"over2", 0);
               set_repeat_events(PART:"over3", 0);
               set_repeat_events(PART:"disabler", 0);
            }
         }
      }
   }

   group { name: "elm/button/base/naviframe/title";
      script {
         public mouse_down = 0;
         public multi_down = 0;
         public check_disabled = 0;
      }
      parts {
         part { name: "base";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_BUTTON_SIZE_INC;
               max: BUTTON_NAVIFRAME_TITLE_BUTTON_SIZE_INC;
               fixed: 1 1;
            }
         }
         part { name: "button_bg";
            type: RECT;
            scale: 1;
            mouse_events: 0;
            clip_to: "button_bg_clipper";
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_BUTTON_BG_SIZE_INC;
               max: BUTTON_NAVIFRAME_TITLE_BUTTON_BG_SIZE_INC;
               fixed: 1 1;
            }
         }
         part { name: "button_bg_clipper";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               rel1.to: "button_bg";
               rel2.to: "button_bg";
               color: 255 255 255 255;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 104 141 186 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 43 93 155 255;
            }
         }
         part { name: "button_icon";
            type: RECT;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_BUTTON_IMAGE_SIZE_INC;
               max: BUTTON_NAVIFRAME_TITLE_BUTTON_IMAGE_SIZE_INC;
               fixed: 1 1;
               color: 52 158 91 255;
            }
         }
         part { name: "over2";
            type: RECT;
            ignore_flags: ON_HOLD;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               color: 0 0 0 0;
            }
         }
         part { name: "over3";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               color: 0 0 0 0;
            }
         }
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "button_press";
            signal: "mouse,down,1*";
            source: "over2";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                    set_int(mouse_down, 1);
                    set_state(PART:"button_bg_clipper", "pressed", 0.0);
                    emit("elm,action,press", "");
                 }
            }
         }
         program { name: "button_unpress";
            signal: "mouse,up,1*";
            source: "over3";
            script {
               if (get_int(mouse_down) == 1)
                 {
                    set_int(mouse_down, 0);
                    set_state(PART:"button_bg_clipper", "default", 0.0);
                    emit("elm,action,unpress", "");
                 }
            }
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "over2";
            script {
               if (get_int(multi_down) == 0) {
                 run_program(PROGRAM:"play_sound");
                 emit("elm,action,click", "");
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "key_press";
            signal: "elm,action,pressed";
            source: "elm";
            action: STATE_SET "pressed" 0.0;
            target: "button_bg_clipper";
         }
         program { name: "key_unpress";
            signal: "elm,action,unpressed";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "button_bg_clipper";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "button_bg_clipper";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "button_bg_clipper";
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"over2", 0);
               set_mouse_events(PART:"over3", 0);
               set_mouse_events(PART:"disabler", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"over2", 1);
               set_mouse_events(PART:"over3", 1);
               set_mouse_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"over2", 1);
               set_repeat_events(PART:"over3", 1);
               set_repeat_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"over2", 0);
               set_repeat_events(PART:"over3", 0);
               set_repeat_events(PART:"disabler", 0);
            }
         }
      }
   }

   group { name: "elm/button/base/naviframe/title_done";
      inherit: "elm/button/base/naviframe/title";
      images {
         set {
            name: "core_title_button_bg";
            image {
               image: SMALL"images/Old/core_title_button_bg.png" COMP;
            }
            image {
               image: MEDIUM"images/Old/core_title_button_bg.png" COMP;
            }
         }
         set {
            name: "core_title_icon_done";
            image {
               image: SMALL"images/Old/core_title_icon_done.png" COMP;
            }
            image {
               image: MEDIUM"images/Old/core_title_icon_done.png" COMP;
            }
         }
      }
      parts {
         part { name: "button_bg";
            type: IMAGE;
            scale: 1;
            mouse_events: 0;
            clip_to: "button_bg_clipper";
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_BUTTON_BG_SIZE_INC;
               max: BUTTON_NAVIFRAME_TITLE_BUTTON_BG_SIZE_INC;
               fixed: 1 1;
               image.normal: "core_title_button_bg";
               color: 255 255 255 255;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 104 141 186 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 43 93 155 255;
            }
         }
         part { name: "button_icon";
            type: IMAGE;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_BUTTON_IMAGE_SIZE_INC;
               max: BUTTON_NAVIFRAME_TITLE_BUTTON_IMAGE_SIZE_INC;
               fixed: 1 1;
               image.normal: "core_title_icon_done";
               color: 52 158 91 255;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 2 61 132 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 2 61 132 255;
            }
         }
      }
      programs {
         program { name: "button_press";
            signal: "mouse,down,1*";
            source: "over2";
            script {
               if ((get_int(check_disabled) == 0) && (get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                    set_int(mouse_down, 1);
                    set_state(PART:"button_bg_clipper", "pressed", 0.0);
                    set_state(PART:"button_bg", "pressed", 0.0);
                    set_state(PART:"button_icon", "pressed", 0.0);
                    emit("elm,action,press", "");
                 }
            }
         }
         program { name: "button_unpress";
            signal: "mouse,up,1*";
            source: "over3";
            script {
               if ((get_int(check_disabled) == 0) && (get_int(mouse_down) == 1))
                 {
                    set_int(mouse_down, 0);
                    set_state(PART:"button_bg_clipper", "default", 0.0);
                    set_state(PART:"button_bg", "default", 0.0);
                    set_state(PART:"button_icon", "default", 0.0);
                    emit("elm,action,unpress", "");
                 }
            }
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "over2";
            script {
               if ((get_int(check_disabled) == 0) && (get_int(multi_down) == 0)) {
                 run_program(PROGRAM:"play_sound");
                 emit("elm,action,click", "");
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "key_press";
            signal: "elm,action,pressed";
            source: "elm";
            script {
               if (get_int(check_disabled) == 0)
                 {
                    set_state(PART:"button_bg", "pressed", 0.0);
                    set_state(PART:"button_icon", "pressed", 0.0);
                    set_state(PART:"button_bg_clipper", "pressed", 0.0);
                 }
            }
         }
         program { name: "key_unpress";
            signal: "elm,action,unpressed";
            source: "elm";
            script {
               if (get_int(check_disabled) == 0)
                 {
                    set_state(PART:"button_bg", "default", 0.0);
                    set_state(PART:"button_icon", "default", 0.0);
                    set_state(PART:"button_bg_clipper", "default", 0.0);
                 }
            }
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            script {
               set_int(check_disabled, 0);
               set_state(PART:"button_bg", "default", 0.0);
               set_state(PART:"button_icon", "default", 0.0);
               set_state(PART:"button_bg_clipper", "default", 0.0);
            }
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            script {
               set_int(check_disabled, 1);
               set_state(PART:"button_bg", "disabled", 0.0);
               set_state(PART:"button_icon", "disabled", 0.0);
               set_state(PART:"button_bg_clipper", "disabled", 0.0);
            }
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
      }
   }

   group { name: "elm/button/base/naviframe/title_cancel";
      inherit: "elm/button/base/naviframe/title";
      images {
         set {
            name: "core_title_button_bg";
            image {
               image: SMALL"images/Old/core_title_button_bg.png" COMP;
            }
            image {
               image: MEDIUM"images/Old/core_title_button_bg.png" COMP;
            }
         }
         set {
            name: "core_title_icon_cancel";
            image {
               image: SMALL"images/Old/core_title_icon_cancel.png" COMP;
            }
            image {
               image: MEDIUM"images/Old/core_title_icon_cancel.png" COMP;
            }
         }
      }
      parts {
         part { name: "button_bg";
            type: IMAGE;
            scale: 1;
            mouse_events: 0;
            clip_to: "button_bg_clipper";
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_BUTTON_BG_SIZE_INC;
               max: BUTTON_NAVIFRAME_TITLE_BUTTON_BG_SIZE_INC;
               fixed: 1 1;
               image.normal: "core_title_button_bg";
               color: 255 255 255 255;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 104 141 186 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 43 93 155 255;
            }
         }
         part { name: "button_icon";
            type: IMAGE;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_BUTTON_IMAGE_SIZE_INC;
               max: BUTTON_NAVIFRAME_TITLE_BUTTON_IMAGE_SIZE_INC;
               fixed: 1 1;
               image.normal: "core_title_icon_cancel";
               color: 224 33 33 255;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 2 61 132 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 2 61 132 255;
            }
         }
      }
      programs {
         program { name: "button_press";
            signal: "mouse,down,1*";
            source: "over2";
            script {
               if ((get_int(check_disabled) == 0) && (get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                    set_int(mouse_down, 1);
                    set_state(PART:"button_bg_clipper", "pressed", 0.0);
                    set_state(PART:"button_bg", "pressed", 0.0);
                    set_state(PART:"button_icon", "pressed", 0.0);
                    emit("elm,action,press", "");
                 }
            }
         }
         program { name: "button_unpress";
            signal: "mouse,up,1*";
            source: "over3";
            script {
               if ((get_int(check_disabled) == 0) && (get_int(mouse_down) == 1))
                 {
                    set_int(mouse_down, 0);
                    set_state(PART:"button_bg_clipper", "default", 0.0);
                    set_state(PART:"button_bg", "default", 0.0);
                    set_state(PART:"button_icon", "default", 0.0);
                    emit("elm,action,unpress", "");
                 }
            }
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "over2";
            script {
               if ((get_int(check_disabled) == 0) && (get_int(multi_down) == 0)) {
                 run_program(PROGRAM:"play_sound");
                 emit("elm,action,click", "");
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "key_press";
            signal: "elm,action,pressed";
            source: "elm";
            script {
               if (get_int(check_disabled) == 0)
                 {
                    set_state(PART:"button_bg", "pressed", 0.0);
                    set_state(PART:"button_icon", "pressed", 0.0);
                    set_state(PART:"button_bg_clipper", "pressed", 0.0);
                 }
            }
         }
         program { name: "key_unpress";
            signal: "elm,action,unpressed";
            source: "elm";
            script {
               if (get_int(check_disabled) == 0)
                 {
                    set_state(PART:"button_bg", "default", 0.0);
                    set_state(PART:"button_icon", "default", 0.0);
                    set_state(PART:"button_bg_clipper", "default", 0.0);
                 }
            }
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            script {
               set_int(check_disabled, 0);
               set_state(PART:"button_bg", "default", 0.0);
               set_state(PART:"button_icon", "default", 0.0);
               set_state(PART:"button_bg_clipper", "default", 0.0);
            }
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            script {
               set_int(check_disabled, 1);
               set_state(PART:"button_bg", "disabled", 0.0);
               set_state(PART:"button_icon", "disabled", 0.0);
               set_state(PART:"button_bg_clipper", "disabled", 0.0);
            }
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
      }
   }

   group { name: "elm/button/base/naviframe/title_left";
      data.item: "vector_ux" "no_bg";
      data.item: "corner_radius" BUTTON_NAVIFRAME_TITLE_CORNER_RADIUS;
      script {
         public mouse_down = 0;
         public multi_down = 0;
         public disabled = 0;
         public animate = 0;
         public minw = 0;
         public minh = 0;
         public get_effect_min_size(base_effect, Float:ratio, min_w, min_h) {
            new x, y, w, h;
            get_geometry(base_effect, x, y, w, h);
            if (w > h) {
               set_float(min_w, w - h * (1 - ratio));
               set_float(min_h, h * ratio);
            } else {
               set_float(min_w, w * ratio);
               set_float(min_h, h - w * (1 - ratio));
            }
         }
      }
      parts {
         part { name: "button_bg";
            type: SPACER;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_LEFT_BUTTON_MIN_SIZE_INC;
               max: BUTTON_NAVIFRAME_TITLE_LEFT_BUTTON_MAX_SIZE_INC;
               fixed: 1 1;
            }
         }
         part { name: "effect_padding";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 0;
               rel1.to: "button_bg";
               rel2.to: "button_bg";
               rel1.relative: 0.0 0.0;
               rel2.relative: 0.0 1.0;
               min: NAVIFRAME_TITLE_LEFT_EFFECT_PADDING_WIDTH_INC 0;
               align: 0.0 0.5;
            }
         }
         part { name: "effect_spacer";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "effect_padding";
               rel2.to: "effect_padding";
               rel1.relative: 1.0 0.0;
               rel2.relative: 1.0 1.0;
               align: 0.0 0.5;
               min: BUTTON_NAVIFRAME_TITLE_LEFT_BUTTON_EFFECT_SIZE_INC;
               max: BUTTON_NAVIFRAME_TITLE_LEFT_BUTTON_EFFECT_SIZE_INC;
            }
         }
         //Effect Shape Part
         part { name: "tizen_vg_shape";
            type: SWALLOW;
            clip_to: "tizen_vg_shape_clipper";
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "effect_spacer";
               rel2.to: "effect_spacer";
               rel1.relative: 0.5 0.5;
               rel2.relative: 0.5 0.5;
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 1.0;
            }
         }
         part { name: "tizen_vg_shape_clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
               fixed: 1 1;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               fixed: 1 1;
            }
            description { state: "pressed" 0.0;
               color: 0 0 0 77;
               fixed: 1 1;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
            }
            description { state: "disabled" 0.0;
               color: 0 0 0 77;
               fixed: 1 1;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
            }
         }
         part { name: "left_padding";
            type: SPACER;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_LEFT_BUTTON_LEFT_PADDING_WIDTH_INC 0;
               max: BUTTON_NAVIFRAME_TITLE_LEFT_BUTTON_LEFT_PADDING_WIDTH_INC -1;
               align: 0.0 0.0;
               fixed: 1 0;
               rel1 { to: "button_bg"; relative: 0.0 0.0; }
               rel2 { to: "button_bg"; relative: 0.0 1.0; }
            }
         }
         part { name: "right_padding";
            type: SPACER;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_LEFT_BUTTON_RIGHT_PADDING_WIDTH_INC 0;
               max: BUTTON_NAVIFRAME_TITLE_LEFT_BUTTON_RIGHT_PADDING_WIDTH_INC -1;
               align: 1.0 0.0;
               fixed: 1 0;
               rel1 { to: "button_bg"; relative: 1.0 0.0; }
               rel2 { to: "button_bg"; relative: 1.0 1.0; }
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               rel1 { to_x: "left_padding"; relative: 1.0 0.5; }
               rel2 { to_x: "right_padding"; relative: 0.0 0.5; }
               min: 0 BUTTON_NAVIFRAME_TITLE_LEFT_BUTTON_TEXT_HEIGHT_INC;
               max: -1 BUTTON_NAVIFRAME_TITLE_LEFT_BUTTON_TEXT_HEIGHT_INC;
               fixed: 0 1;
               text {
                  style: "button_title_left";
                  min: 0 1;
               }
               color: 255 255 255 221;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               text.style: "button_title_left_press";
               color: 255 255 255 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text.style: "button_title_left_dim";
               color: 255 255 255 146;
            }
         }
         part { name: "event";
            type: RECT;
            description { state: "default" 0.0;
               rel1.to: "button_bg";
               rel2.to: "button_bg";
               color: 0 0 0 0;
            }
         }
      }
      programs {
         program { name: "pressed_effect";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            action: STATE_SET "custom" 0.0;
            target: "tizen_vg_shape";
            after: "pressed_effect2";
         }
         program { name: "pressed_effect2";
            action: STATE_SET "pressed" 0.0;
            target: "tizen_vg_shape_clipper";
            target: "tizen_vg_shape";
            target: "elm.text";
            transition: GLIDE_EASE_OUT(0.15);
            after: "pressed_effect3";
         }
         program { name: "pressed_effect3";
            script {
               set_int(animate, 0);
            }
         }
         program { name: "delay_unpressed_effect";
            in: 0.1 0.0;
            after: "unpressed_effect";
         }
         program { name: "unpressed_effect";
            script {
               if (get_int(disabled) == 0) {
                 run_program(PROGRAM:"unpressed_effect2");
                 run_program(PROGRAM:"unpressed_effect3");
               } else {
                 run_program(PROGRAM:"disabled_effect");
                 run_program(PROGRAM:"disabled_effect2");
               }
            }
         }
         program { name: "unpressed_effect2";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "unpressed_effect3";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            transition: GLIDE_EASE_OUT(0.45);
            after: "finished_animation";
         }
         program { name: "disabled_effect";
            action: STATE_SET "disabled" 0.0;
            target: "elm.text";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "disabled_effect2";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            transition: GLIDE_EASE_OUT(0.45);
            after: "finished_animation";
         }
         program { name: "finished_animation";
            action: STATE_SET "default" 0.0;
            target: "tizen_vg_shape";
            target: "tizen_vg_shape_clipper";
         }
         program { name: "pressed";
            signal: "mouse,down,1*";
            source: "event";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0) && (get_int(disabled) == 0)) {
                  stop_program(PROGRAM:"delay_unpressed_effect");
                  set_int(mouse_down, 1);
                  set_int(animate, 1);
                  custom_state(PART:"tizen_vg_shape", "ready", 0.0);
                  get_effect_min_size(PART:"effect_spacer", 0.7, minw, minh);
                  set_state_val(PART:"tizen_vg_shape", STATE_MIN, get_int(minw), get_int(minh));
                  emit("elm,action,press", "");
                  run_program(PROGRAM:"pressed_effect");
               }
            }
         }
         program { name: "unpressed";
            signal: "mouse,up,1";
            source: "event";
            script {
               if (get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  if (get_int(disabled) == 0) {
                     if (get_int(animate) == 0) {
                        run_program(PROGRAM:"unpressed_effect");
                     } else {
                        set_state(PART:"tizen_vg_shape", "pressed", 0.0);
                        set_state(PART:"tizen_vg_shape_clipper", "pressed", 0.0);
                        set_state(PART:"elm.text", "pressed", 0.0);
                        set_int(animate, 0);
                        run_program(PROGRAM:"delay_unpressed_effect");
                     }
                     emit("elm,action,unpress", "");
                  }
               }
            }
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "event";
            script {
               if (get_int(multi_down) == 0) {
                  if (get_int(disabled) == 0) {
                     run_program(PROGRAM:"play_sound");
                     run_program(PROGRAM:"clicked_signal");
                  }
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "clicked_signal";
            in: 0.001 0.0;
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            script {
              set_int(disabled, 0);
              set_state(PART:"elm.text", "default", 0.0);
            }
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            script {
              set_int(disabled, 1);
              if (get_int(animate) == 1) return;
              set_state(PART:"elm.text", "disabled", 0.0);
            }
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"event", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"event", 0);
            }
         }
      }
   }

   group { name: "elm/button/base/naviframe/title_right";
      inherit: "elm/button/base/naviframe/title_left";
      parts {
         part { name: "effect_padding";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 0;
               rel1.to: "button_bg";
               rel2.to: "button_bg";
               rel1.relative: 1.0 0.0;
               rel2.relative: 1.0 1.0;
               min: NAVIFRAME_TITLE_RIGHT_EFFECT_PADDING_WIDTH_INC 0;
               align: 1.0 0.5;
            }
         }
         part { name: "effect_spacer";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "effect_padding";
               rel2.to: "effect_padding";
               rel1.relative: 0.0 0.0;
               rel2.relative: 0.0 1.0;
               align: 1.0 0.5;
               min: BUTTON_NAVIFRAME_TITLE_RIGHT_BUTTON_EFFECT_SIZE_INC;
               max: BUTTON_NAVIFRAME_TITLE_RIGHT_BUTTON_EFFECT_SIZE_INC;
            }
         }
         part { name: "left_padding";
            type: SPACER;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_RIGHT_BUTTON_LEFT_PADDING_WIDTH_INC 0;
               max: BUTTON_NAVIFRAME_TITLE_RIGHT_BUTTON_LEFT_PADDING_WIDTH_INC -1;
               align: 0.0 0.0;
               fixed: 1 0;
               rel1 { to: "button_bg"; relative: 0.0 0.0; }
               rel2 { to: "button_bg"; relative: 0.0 1.0; }
            }
         }
         part { name: "right_padding";
            type: SPACER;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_TITLE_RIGHT_BUTTON_RIGHT_PADDING_WIDTH_INC 0;
               max: BUTTON_NAVIFRAME_TITLE_RIGHT_BUTTON_RIGHT_PADDING_WIDTH_INC -1;
               align: 1.0 0.0;
               fixed: 1 0;
               rel1 { to: "button_bg"; relative: 1.0 0.0; }
               rel2 { to: "button_bg"; relative: 1.0 1.0; }
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               rel1 { to_x: "left_padding"; relative: 1.0 0.5; }
               rel2 { to_x: "right_padding"; relative: 0.0 0.5; }
               min: 0 BUTTON_NAVIFRAME_TITLE_RIGHT_BUTTON_TEXT_HEIGHT_INC;
               max: -1 BUTTON_NAVIFRAME_TITLE_RIGHT_BUTTON_TEXT_HEIGHT_INC;
               fixed: 0 1;
               text {
                  style: "button_title_right";
                  min: 0 1;
               }
               color: 255 255 255 221;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               text.style: "button_title_right_press";
               color: 255 255 255 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text.style: "button_title_right_dim";
               color: 255 255 255 146;
            }
         }
      }
   }

   group { name: "elm/button/base/naviframe/back_btn/default";
      alias: "elm/button/base/naviframe/end_btn/default";
      data.item: "vector_ux" "no_bg";
      data.item: "corner_radius" BUTTON_NAVIFRAME_BACK_CORNER_RADIUS;
      images {
         set {
            name: "core_icon_back";
            image {
               image: SMALL"images/Navigation_elements/core_icon_back.png" COMP;
            }
            image {
               image: MEDIUM"images/Navigation_elements/core_icon_back.png" COMP;
            }
         }
      }
      script {
         public mouse_down = 0;
         public multi_down = 0;
         public animate = 0;
         public disabled = 0;
      }
      parts {
         part { name: "button_bg";
            type: SPACER;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_BACK_BUTTON_SIZE_INC;
               max: BUTTON_NAVIFRAME_BACK_BUTTON_SIZE_INC;
               fixed: 1 1;
            }
         }
         part { name: "effect_spacer";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.relative: 0.5 0.5;
               rel2.relative: 0.5 0.5;
               min: BUTTON_NAVIFRAME_BACK_BUTTON_EFFECT_MAX_SIZE_INC;
               max: BUTTON_NAVIFRAME_BACK_BUTTON_EFFECT_MAX_SIZE_INC;
            }
         }
         //Effect Shape Part
         part { name: "tizen_vg_shape";
            type: SWALLOW;
            clip_to: "tizen_vg_shape_clipper";
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.relative: 0.5 0.5;
               rel2.relative: 0.5 0.5;
            }
            description { state: "ready" 0.0;
               rel1.to: "effect_spacer";
               rel2.to: "effect_spacer";
               rel1.relative: 0.15 0.15;
               rel2.relative: 0.85 0.85;
            }
            description { state: "pressed" 0.0;
               inherit: "ready" 0.0;
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 1.0;
            }
         }
         part { name: "tizen_vg_shape_clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
               fixed: 1 1;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 0 0 0 77;
               visible: 1;
            }
         }
         part { name: "button_icon";
            type: IMAGE;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_BACK_BUTTON_SIZE_INC;
               max: BUTTON_NAVIFRAME_BACK_BUTTON_SIZE_INC;
               fixed: 1 1;
               color: 255 255 255 255;
               image.normal: "core_icon_back";
            }
            description { state: "rtl" 0.0;
               inherit: "default" 0.0;
               map.on: 1;
               map.rotation.y: 180.0;
            }
         }
         part { name: "event";
            type: RECT;
            description { state: "default" 0.0;
               rel1.to: "button_bg";
               rel2.to: "button_bg";
               color: 0 0 0 0;
            }
         }
      }
      programs {
         program { name: "pressed_effect";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            target: "tizen_vg_shape";
            after: "pressed_effect2";
         }
         program { name: "pressed_effect2";
            action: STATE_SET "pressed" 0.0;
            target: "tizen_vg_shape_clipper";
            target: "tizen_vg_shape";
            transition: GLIDE_EASE_OUT(0.15);
            after: "pressed_effect3";
         }
         program { name: "pressed_effect3";
            script {
               set_int(animate, 0);
            }
         }
         program { name: "delay_unpressed_effect";
            in: 0.1 0.0;
            after: "unpressed_effect";
         }
         program { name: "unpressed_effect";
            script {
               run_program(PROGRAM:"unpressed_effect2");
            }
         }
         program { name: "unpressed_effect2";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            transition: GLIDE_EASE_OUT(0.45);
            after: "unpressed_effect3";
         }
         program { name: "unpressed_effect3";
            action: STATE_SET "default" 0.0;
            target: "tizen_vg_shape";
            target: "tizen_vg_shape_clipper";
         }
         program { name: "pressed";
            signal: "mouse,down,1*";
            source: "event";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0) && (get_int(disabled) == 0)) {
                  stop_program(PROGRAM:"delay_unpressed_effect");
                  set_int(mouse_down, 1);
                  set_int(animate, 1);
                  emit("elm,action,press", "");
                  run_program(PROGRAM:"pressed_effect");
               }
            }
         }
         program { name: "unpressed";
            signal: "mouse,up,1";
            source: "event";
            script {
               if (get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  if (get_int(disabled) == 0) {
                     if (get_int(animate) == 0) {
                        run_program(PROGRAM:"unpressed_effect");
                     } else {
                        set_state(PART:"tizen_vg_shape", "pressed", 0.0);
                        set_state(PART:"tizen_vg_shape_clipper", "pressed", 0.0);
                        set_int(animate, 0);
                        run_program(PROGRAM:"delay_unpressed_effect");
                     }
                     emit("elm,action,unpress", "");
                  }
               }
            }
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "event";
            script {
               if ((get_int(multi_down) == 0) && (get_int(disabled) == 0)) {
                 run_program(PROGRAM:"play_sound");
                 run_program(PROGRAM:"clicked_signal");
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "clicked_signal";
            in: 0.001 0.0;
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            script {
              set_int(disabled, 0);
            }
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            script {
              set_int(disabled, 1);
            }
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"event", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"event", 0);
            }
         }
         program { name: "rtl_mirrored";
            signal: "edje,state,rtl";
            source: "edje";
            action: STATE_SET "rtl" 0.0;
            target: "button_icon";
         }
         program { name: "ltr_mirrored";
            signal: "edje,state,ltr";
            source: "edje";
            action: STATE_SET "default" 0.0;
            target: "button_icon";
         }
      }
   }
   group { name: "elm/button/base/naviframe/drawers";
      images {
         set {
            name: "core_icon_drawer";
            image {
               image: SMALL"images/Old/core_icon_drawer.png" COMP;
            }
            image {
               image: MEDIUM"images/Old/core_icon_drawer.png" COMP;
            }
         }
      }
      script {
         public mouse_down = 0;
         public multi_down = 0;
      }
      parts {
         part { name: "button_bg";
            type: RECT;
            scale: 1;
            mouse_events: 0;
            clip_to: "button_bg_clipper";
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_DRAWERS_WIDTH_INC 0;
               max: BUTTON_NAVIFRAME_DRAWERS_WIDTH_INC -1;
               fixed: 1 0;
            }
         }
         part { name: "button_bg_clipper";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               rel1.to: "button_bg";
               rel2.to: "button_bg";
               visible: 0;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 2 48 104 255;
               visible: 1;
            }
         }
         part { name: "button_icon";
            type: IMAGE;
            scale: 1;
            mouse_events: 0;
            clip_to: "button_icon_clipper";
            description { state: "default" 0.0;
               min: BUTTON_NAVIFRAME_DRAWERS_IMAGE_SIZE_INC;
               max: BUTTON_NAVIFRAME_DRAWERS_IMAGE_SIZE_INC;
               fixed: 1 1;
               align: 0.0 0.5;
               rel1 { to: "button_bg"; relative: 0.0 0.0; }
               rel2 { to: "button_bg"; relative: 0.0 1.0; }
               image.normal: "core_icon_drawer";
            }
         }
         part { name: "button_icon_clipper";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               rel1.to: "button_icon";
               rel2.to: "button_icon";
               color_class: "F043L1i";
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color_class: "F043L1iD";
            }
         }
         part { name: "over2";
            type: RECT;
            ignore_flags: ON_HOLD;
            description { state: "default" 0.0;
               rel1.to: "button_bg";
               rel2.to: "button_bg";
               color: 0 0 0 0;
            }
         }
         part { name: "over3";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               rel1.to: "button_bg";
               rel2.to: "button_bg";
               color: 0 0 0 0;
            }
         }
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               rel1.to: "button_bg";
               rel2.to: "button_bg";
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "button_press";
            signal: "mouse,down,1*";
            source: "over2";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                    set_int(mouse_down, 1);
                    set_state(PART:"button_bg_clipper", "pressed", 0.0);
                    emit("elm,action,press", "");
                 }
            }
         }
         program { name: "button_unpress";
            signal: "mouse,up,1*";
            source: "over3";
            script {
               if (get_int(mouse_down) == 1)
                 {
                    set_int(mouse_down, 0);
                    set_state(PART:"button_bg_clipper", "default", 0.0);
                    emit("elm,action,unpress", "");
                 }
            }
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "over2";
            script {
               if (get_int(multi_down) == 0) {
                 run_program(PROGRAM:"touch_sound");
                 emit("elm,action,click", "");
               }
            }
         }
         program { name: "touch_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "key_press";
            signal: "elm,action,pressed";
            source: "elm";
            action: STATE_SET "pressed" 0.0;
            target: "button_bg_clipper";
         }
         program { name: "key_unpress";
            signal: "elm,action,unpressed";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "button_bg_clipper";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "button_icon_clipper";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "button_icon_clipper";
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"over2", 0);
               set_mouse_events(PART:"over3", 0);
               set_mouse_events(PART:"disabler", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"over2", 1);
               set_mouse_events(PART:"over3", 1);
               set_mouse_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"over2", 1);
               set_repeat_events(PART:"over3", 1);
               set_repeat_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"over2", 0);
               set_repeat_events(PART:"over3", 0);
               set_repeat_events(PART:"disabler", 0);
            }
         }
      }
   }

// FIXME: style for focus UI (and temporally, for ctxpopup)
// This style should have focus image for "focus_image" part after the image is added
#define BUTTON_DEFAULT_FOCUS_STYLES(style_name) \
   group { name: "elm/button/base/"style_name; \
      data { \
         item: "focus_highlight" "on"; \
      } \
      images { \
         set { \
         name: "core_focus.#"; \
            image { \
               image: SMALL"images/Presentation_views/core_focus.#.png" COMP; \
            } \
            image { \
               image: MEDIUM"images/Presentation_views/core_focus.#.png" COMP; \
            } \
         } \
      } \
      script { \
         public mouse_down = 0; \
         public multi_down = 0; \
         public click_cancel = 0; \
      } \
      parts { \
         part { name: "elm.swallow.content"; \
            type: SWALLOW; \
            scale: 1; \
            description { state: "default" 0.0; \
            } \
         } \
         part { name: "focus_image"; \
            scale: 1; \
            type: IMAGE; \
            mouse_events: 0; \
            repeat_events: 1; \
            description { state: "default" 0.0; \
               image.normal: "core_focus.#"; \
               visible: 0; \
            } \
            description { state: "focused" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
               color: 61 185 204 255; \
            } \
         } \
         part { name: "over2"; \
            type: RECT; \
            repeat_events: 1; \
            ignore_flags: ON_HOLD; \
            description { state: "default" 0.0; \
               color: 0 0 0 0; \
            } \
         } \
         part { name: "over3"; \
            type: RECT; \
            repeat_events: 1; \
            description { state: "default" 0.0; \
               color: 0 0 0 0; \
            } \
         } \
      } \
      programs { \
         program { name: "button_press"; \
            signal: "mouse,down,1*"; \
            source: "over2"; \
            script { \
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0)) \
                 { \
                     set_int(mouse_down, 1); \
                     emit("elm,action,press", ""); \
                 } \
               set_int(click_cancel, 0); \
            } \
         } \
         program { name: "button_unpress"; \
            signal: "mouse,up,1*"; \
            source: "over3"; \
            script { \
               if (get_int(mouse_down) == 1) \
                 { \
                     set_int(mouse_down, 0); \
                     emit("elm,action,unpress", ""); \
                  } \
            } \
         } \
         program { name: "button_click"; \
            signal: "mouse,clicked,1"; \
            source: "over2"; \
            script { \
               if ((get_int(multi_down) == 0) && (get_int(click_cancel) == 0)) { \
                 emit("elm,action,click", ""); \
               } \
               set_int(click_cancel, 0); \
            } \
         } \
         program { name: "mouse_over"; \
            signal: "mouse,pressed,out"; \
            source: "over2"; \
            script { \
               set_int(click_cancel, 1); \
            } \
         } \
         program { name: "action_focus"; \
            signal: "elm,action,focus_highlight,show"; \
            source: "elm"; \
            action: STATE_SET "focused" 0.0; \
            target: "focus_image"; \
         } \
         program { name: "action_unfocus"; \
            signal: "elm,action,focus_highlight,hide"; \
            source: "elm"; \
            action: STATE_SET "default" 0.0; \
            target: "focus_image"; \
         } \
         program { \
            name: "multi_down"; \
            signal: "elm,action,multi,down"; \
            source: "elm"; \
            script { \
               set_int(multi_down, 1); \
            } \
         } \
         program { \
            name: "multi_up"; \
            signal: "elm,action,multi,up"; \
            source: "elm"; \
            script { \
               set_int(multi_down, 0); \
            } \
         } \
         program { name: "pass_event_enable"; \
            signal: "elm,event,pass,enabled"; \
            source: "elm"; \
            script { \
               set_mouse_events(PART:"over2", 0); \
               set_mouse_events(PART:"over3", 0); \
            } \
         } \
         program { name: "pass_event_disable"; \
            signal: "elm,event,pass,disabled"; \
            source:"elm"; \
            script { \
               set_mouse_events(PART:"over2", 1); \
               set_mouse_events(PART:"over3", 1); \
            } \
         } \
         program { name: "repeat_event_enable"; \
            signal: "elm,event,repeat,enabled"; \
            source: "elm"; \
            script { \
               set_mouse_events(PART:"over2", 1); \
               set_mouse_events(PART:"over3", 1); \
            } \
         } \
         program { name: "repeat_event_disable"; \
            signal: "elm,event,repeat,disabled"; \
            source:"elm"; \
            script { \
               set_mouse_events(PART:"over2", 0); \
               set_mouse_events(PART:"over3", 0); \
            } \
         } \
      } \
   }

BUTTON_DEFAULT_FOCUS_STYLES("focus")

   group { name: "elm/button/base/option";
      images {
         set {
            name: "core_title_icon_option";
            image {
               image: SMALL"images/Old/core_title_icon_option.png" COMP;
            }
            image {
               image: MEDIUM"images/Old/core_title_icon_option.png" COMP;
            }
         }
      }
      script {
         public mouse_down = 0;
         public multi_down = 0;
      }
      parts {
         part { name: "bg";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               min: BUTTON_OPTION_MIN_MAX_INC;
               max: BUTTON_OPTION_MIN_MAX_INC;
            }
         }
         part { name: "button_image";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "focused" 0.0;
               inherit: "default" 0.0;
            }
         }
         part { name: "option_button";
            scale: 1;
            mouse_events: 0;
            clip_to: "option_button.clipper";
            description { state: "default" 0.0;
               min: BUTTON_OPTION_IMAGE_MIN_MAX_INC;
               max: BUTTON_OPTION_IMAGE_MIN_MAX_INC;
               align: 0.5 0.5;
               image.normal: "core_title_icon_option";
            }
         }
         part { name: "option_button.clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 2 61 132 255;
            }
            description { state: "pressed" 0.0;
               color: 1 43 94 255;
            }
            description { state: "disabled" 0.0;
               color: 7 7 7 76;
            }
         }
         part { name: "over2";
            type: RECT;
            ignore_flags: ON_HOLD;
            description { state: "default" 0.0;
               rel1.to: "bg";
               rel2.to: "bg";
               color: 0 0 0 0;
            }
         }
         part { name: "over3";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               rel1.to: "bg";
               rel2.to: "bg";
               color: 0 0 0 0;
            }
         }
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               rel1.to: "bg";
               rel2.to: "bg";
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "button_press";
            signal: "mouse,down,1*";
            source: "over2";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
                 {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_press2");
                 }
            }
         }
         program { name: "button_press2";
            action: SIGNAL_EMIT "elm,action,press" "";
            after: "button_press_anim";
         }
         program { name: "button_press_anim";
            action: STATE_SET "pressed" 0.0;
            target: "button_image";
            target: "option_button.clipper";
         }
         program { name: "button_unpress";
            signal: "mouse,up,1*";
            source: "over3";
            script {
               if (get_int(mouse_down) == 1)
                 {
                     set_int(mouse_down, 0);
                     run_program(PROGRAM:"button_unpress2");
                     run_program(PROGRAM:"button_unpress_anim");
                  }
            }
         }
         program { name: "button_unpress2";
            action: SIGNAL_EMIT "elm,action,unpress" "";
         }
         program { name: "button_unpress_anim";
            action: STATE_SET "default" 0.0;
            target: "button_image";
            target: "option_button.clipper";
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "over2";
            script {
               if (get_int(multi_down) == 0) {
                 run_program(PROGRAM:"play_sound");
                 run_program(PROGRAM:"button_click2");
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "button_click2";
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "button_image";
            target: "disabler";
            target: "option_button.clipper";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "button_image";
            target: "disabler";
            target: "option_button.clipper";
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"over2", 0);
               set_mouse_events(PART:"over3", 0);
               set_mouse_events(PART:"disabler", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"over2", 1);
               set_mouse_events(PART:"over3", 1);
               set_mouse_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"over2", 1);
               set_repeat_events(PART:"over3", 1);
               set_repeat_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"over2", 0);
               set_repeat_events(PART:"over3", 0);
               set_repeat_events(PART:"disabler", 0);
            }
         }
      }
   }

   group { name: "elm/button/base/datetime/ampm";
      inherit: "elm/button/base/default";
      parts {
         part { name: "base";
            description { state: "default" 0.0;
               min: DATETIME_AMPM_BUTTON_WIDTH_SIZE_INC DATETIME_AMPM_BUTTON_HEIGHT_SIZE_INC;
            }
         }
         part { name: "tizen_vg_shape";
            description { state: "default" 0.0;
               min: 0 DATETIME_AMPM_BUTTON_HEIGHT_SIZE_INC;
            }
         }
          part { name: "tizen_vg_shape_clipper";
              description { state: "unselected" 0.0;
                 color: 204 204 204 255;
              }
         }
         part { name: "padding_left_top";
            description { state: "default" 0.0;
               min: DATETIME_AMPM_BUTTON_TOP_LEFT_PADDING_INC;
            }
         }
         part { name: "padding_right_bottom";
            description { state: "default" 0.0;
               min: DATETIME_AMPM_BUTTON_BOTTOM_RIGHT_PADDING_INC;
            }
         }
         part { name: "elm.text";
            description { state: "default" 0.0;
               text.style: "button_ampm";
               color: 250 250 250 255;
            }
            description { state: "pressed" 0.0;
               text.style: "button_ampm_press";
               color: 250 250 250 255;
            }
            description { state: "unselected" 0.0;
               inherit: "default" 0.0;
               text.style: "button_ampm_dim";
               color: 250 250 250 163;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text.style: "button_ampm_dim";
               color: 250 250 250 163;
            }
         }
      }
      program { name: "unselected";
         signal: "elm,action,button,unselected";
         source: "elm";
         script {
            set_int(selected, 0);
            set_state(PART:"tizen_vg_shape_clipper", "unselected", 0.0);
            set_state(PART:"elm.text", "unselected", 0.0);
            if (get_int(animate) == 1)
              run_program(PROGRAM:"pressed_effect3");
         }
      }
      program { name: "selected";
         signal: "elm,action,button,selected";
         source: "elm";
         script {
            set_int(selected, 1);
            set_state(PART:"tizen_vg_shape_clipper", "default", 0.0);
            if (get_int(animate) == 0)
               set_state(PART:"elm.text", "default", 0.0);
         }
      }
      program { name: "unselected_effect";
         action: STATE_SET "unselected" 0.0;
         target: "elm.text";
         transition: GLIDE_EASE_OUT(0.45);
         after: "unpressed_effect4";
      }
      program { name: "unpressed_effect";
         script {
            if (get_int(disabled) == 0) {
               run_program(PROGRAM:"unpressed_effect2");
               if (get_int(selected) == 0)
                  run_program(PROGRAM:"unselected_effect");
               else
                  run_program(PROGRAM:"unpressed_effect3");
            } else {
               run_program(PROGRAM:"disabled_effect");
               run_program(PROGRAM:"disabled_effect2");
               run_program(PROGRAM:"disabled_effect3");
            }
         }
      }
   }

/******************* SPINNER BUTTONS STYLES **********************/

   group { name: "elm/button/base/spinner/increase/default";
      alias: "elm/button/base/spinner/increase/horizontal";
      data.item: "focus_highlight" "on";
      images {
         image: "core_icon_picker_arrow_right.png" COMP;
      }
      script {
         public mouse_down = 0;
         public multi_down = 0;
      }
      parts {
         part { name: "arrow.image.bg";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               align: 0.5 0.0;
               min: SPINNER_LEFT_RIGHT_BG_IMAGE_SIZE_INC;
               max: SPINNER_LEFT_RIGHT_BG_IMAGE_SIZE_INC;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 2 61 132 127;
               visible: 1;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
            }
         }
         part { name: "arrow.image";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "arrow.image.bg";
               rel2.to: "arrow.image.bg";
               min: SPINNER_LEFT_RIGHT_ARROW_IMAGE_SIZE_INC;
               max: SPINNER_LEFT_RIGHT_ARROW_IMAGE_SIZE_INC;
               color: 111 125 142 255;
               image.normal: "core_icon_picker_arrow_right.png";
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 244 244 244 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 111 125 142 127;
            }
         }
         part { name: "focus_image";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.5 0.0;
               rel1.to: "arrow.image.bg";
               rel2.to: "arrow.image.bg";
            }
            description { state: "focused" 0.0;
               inherit: "default" 0.0;
            }
         }
         part { name: "over";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "button_press";
            signal: "mouse,down,1*";
            source: "over";
            script {
               if ((get_int(multi_down) == 0) &&
                   (get_int(mouse_down) == 0)) {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_press2");
               }
            }
         }
         program { name: "button_press2";
            action: SIGNAL_EMIT "elm,action,press" "";
            after: "button_press_anim";
         }
         program { name: "button_press_anim";
            action: STATE_SET "pressed" 0.0;
            target: "arrow.image.bg";
            target: "arrow.image";
         }
         program { name: "button_unpress";
            signal: "mouse,up,1*";
            source: "over";
            script {
               if (get_int(mouse_down) == 1) {
                     set_int(mouse_down, 0);
                     run_program(PROGRAM:"button_unpress2");
                     run_program(PROGRAM:"button_unpress_anim");
               }
            }
         }
         program { name: "button_unpress2";
            action: SIGNAL_EMIT "elm,action,unpress" "";
         }
         program { name: "button_unpress_anim";
            action: STATE_SET "default" 0.0;
            target: "arrow.image.bg";
            target: "arrow.image";
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "over";
            script {
               if (get_int(multi_down) == 0) {
                 run_program(PROGRAM:"play_sound");
                 run_program(PROGRAM:"button_click2");
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "longpress_sound";
            signal: "elm,action,longpress";
            source: "elm";
            action: RUN_PLUGIN "touch_haptic";
         }
         program { name: "action_unpressed";
            signal: "elm,action,unpressed";
            source: "elm";
            after: "button_unpress_anim";
         }
         program { name: "action_pressed";
            signal: "elm,action,pressed";
            source: "elm";
            after: "button_press_anim";
         }
         program { name: "button_click2";
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "action_focus";
            signal: "elm,action,focus_highlight,show";
            source: "elm";
            action: STATE_SET "focused" 0.0;
            target: "focus_image";
         }
         program { name: "action_unfocus";
            signal: "elm,action,focus_highlight,hide";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "focus_image";
         }
         program { name: "access_pressed";
            signal: "elm,action,anim,activate";
            source: "elm";
            action: STATE_SET "pressed" 0.0;
            target: "arrow.image.bg";
            target: "arrow.image";
            after: "access_pressed_anim";
         }
         program { name: "access_pressed_anim";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.1;
            target: "arrow.image.bg";
            target: "arrow.image";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "arrow.image.bg";
            target: "arrow.image";
            target: "disabler";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "arrow.image.bg";
            target: "arrow.image";
            target: "disabler";
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"over", 0);
               set_mouse_events(PART:"disabler", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"over", 1);
               set_mouse_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"over", 1);
               set_repeat_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"over", 0);
               set_repeat_events(PART:"disabler", 0);
            }
         }
      }
   }

   group { name: "elm/button/base/spinner/decrease/default";
      inherit: "elm/button/base/spinner/increase/default";
      alias: "elm/button/base/spinner/decrease/horizontal";
      images {
         image: "core_icon_picker_arrow_left.png" COMP;
      }
      parts {
         part { name: "arrow.image";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "arrow.image.bg";
               rel2.to: "arrow.image.bg";
               min: SPINNER_LEFT_RIGHT_ARROW_IMAGE_SIZE_INC;
               max: SPINNER_LEFT_RIGHT_ARROW_IMAGE_SIZE_INC;
               color: 111 125 142 255;
               image.normal: "core_icon_picker_arrow_left.png";
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 244 244 244 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 111 125 142 127;
            }
         }
      }
   }

   group { name: "elm/button/base/spinner/default";
      alias: "elm/button/base/spinner/horizontal";
      data.item: "focus_highlight" "on";
      script {
         public mouse_down = 0;
         public multi_down = 0;
      }
      parts {
         part { name: "bg";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               min: SPINNER_VERTICAL_TEXT_BUTTON_BG_SIZE_INC;
            }
         }
         part { name: "elm.text";
            type: TEXT;
            scale: 1;
            description { state: "default" 0.0;
               min: 0 SPINNER_TEXT_HEIGHT_INC;
               max: -1 SPINNER_TEXT_HEIGHT_INC;
               fixed: 1 1;
               color: 7 7 7 255;
               rel1.to: "bg";
               rel2.to: "bg";
               text {
                  font: "Tizen:style=Light";
                  size: 106;
                  text_class: "tizen";
               }
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0 0 ;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0 0 ;
            }
         }
         part { name: "focus_image";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "bg";
               rel2.to: "bg";
            }
            description { state: "focused" 0.0;
               inherit: "default" 0.0;
            }
         }
         part { name: "over";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "button_press";
            signal: "mouse,down,1*";
            source: "over";
            script {
               if ((get_int(multi_down) == 0) &&
                   (get_int(mouse_down) == 0)) {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_press2");
               }
            }
         }
         program { name: "button_press2";
            action: SIGNAL_EMIT "elm,action,press" "";
            after: "action_pressed";
         }
         program { name: "button_unpress";
            signal: "mouse,up,1*";
            source: "over";
            script {
               if (get_int(mouse_down) == 1) {
                     set_int(mouse_down, 0);
                     run_program(PROGRAM:"button_unpress2");
               }
            }
         }
         program { name: "button_unpress2";
            action: SIGNAL_EMIT "elm,action,unpress" "";
            after: "action_unpressed";
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "over";
            script {
                 run_program(PROGRAM:"play_sound");
                 run_program(PROGRAM:"button_click2");
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "button_click2";
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "action_pressed";
            action: STATE_SET "pressed" 0.0;
            target: "elm.text";
         }
         program { name: "action_unpressed";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
         }
         program { name: "action_focus";
            signal: "elm,action,focus_highlight,show";
            source: "elm";
            action: STATE_SET "focused" 0.0;
            target: "focus_image";
         }
         program { name: "action_unfocus";
            signal: "elm,action,focus_highlight,hide";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "focus_image";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "disabler";
            target: "elm.text";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "disabler";
            target: "elm.text";
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"over", 0);
               set_mouse_events(PART:"disabler", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"over", 1);
               set_mouse_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"over", 1);
               set_repeat_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"over", 0);
               set_repeat_events(PART:"disabler", 0);
            }
         }
      }
   }

/////////////////////////
// Vertical /////////////
/////////////////////////
   group { name: "elm/button/base/spinner/increase/vertical";
      alias: "elm/button/base/spinner/increase/vertical_time_picker";
      alias: "elm/button/base/spinner/increase/vertical_date_picker";
      alias: "elm/button/base/spinner/increase/datetime";
      data.item: "focus_highlight" "on";
      data.item: "vector_ux" "no_bg";
      data.item: "corner_radius" SPINNER_UP_DOWN_CORNER_RADIUS;
      images {
         image: "core_icon_picker_arrow_up.png" COMP;
      }
      script {
         public mouse_down = 0;
         public multi_down = 0;
         public disabled = 0;
         public animate = 0;
      }
      parts {
         part { name: "arrow.image.bg";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.5 0.0;
               min: SPINNER_UP_DOWN_BG_IMAGE_SIZE_INC;
               max: SPINNER_UP_DOWN_BG_IMAGE_SIZE_INC;
            }
         }
         part { name: "effect_spacer";
            type: SPACER;
            description { state: "default" 0.0;
               rel1.to: "arrow.image.bg";
               rel2.to: "arrow.image.bg";
            }
         }
         //Effect Shape Part
         part { name: "tizen_vg_shape";
            type: SWALLOW;
            clip_to: "tizen_vg_shape_clipper";
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "effect_spacer";
               rel2.to: "effect_spacer";
               rel1.relative: 0.5 0.5;
               rel2.relative: 0.5 0.5;
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
               min: SPINNER_UP_DOWN_EFFECT_MIN_SIZE_INC;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               rel1.relative: 0.0 0.0;
               rel2.relative: 1.0 1.0;
            }
         }
         part { name: "tizen_vg_shape_clipper";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
               fixed: 1 1;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
            }
            description { state: "ready" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               color: 0 0 0 77;
            }
            description { state: "disabled" 0.0;
               color: 0 0 0 77;
               fixed: 1 1;
               rel1.to: "tizen_vg_shape";
               rel2.to: "tizen_vg_shape";
            }
         }
         part { name: "arrow.image";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "arrow.image.bg";
               rel2.to: "arrow.image.bg";
               min: SPINNER_UP_DOWN_ARROW_IMAGE_SIZE_INC;
               max: SPINNER_UP_DOWN_ARROW_IMAGE_SIZE_INC;
               color: 204 204 204 255;
               image.normal: "core_icon_picker_arrow_up.png";
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 204 204 204 127;
            }
         }
         part { name: "focus_image";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.5 0.0;
               rel1.to: "arrow.image.bg";
               rel2.to: "arrow.image.bg";
            }
            description { state: "focused" 0.0;
               inherit: "default" 0.0;
            }
         }
         part { name: "event";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               rel1.to: "arrow.image.bg";
               rel2.to: "arrow.image.bg";
               color: 0 0 0 0;
            }
         }
      }
      programs {
         program { name: "pressed_effect";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            target: "tizen_vg_shape";
            after: "pressed_effect2";
         }
         program { name: "pressed_effect2";
            action: STATE_SET "pressed" 0.0;
            target: "tizen_vg_shape_clipper";
            target: "tizen_vg_shape";
            target: "arrow.image";
            transition: GLIDE_EASE_OUT(0.15);
            after: "pressed_effect3";
         }
         program { name: "pressed_effect3";
            script {
               set_int(animate, 0);
            }
         }
         program { name: "delay_unpressed_effect";
            in: 0.1 0.0;
            after: "unpressed_effect";
         }
         program { name: "unpressed_effect";
            script {
               if (get_int(disabled) == 0) {
                  run_program(PROGRAM:"unpressed_effect2");
                  run_program(PROGRAM:"unpressed_effect3");
               } else {
                  run_program(PROGRAM:"disabled_effect");
                  run_program(PROGRAM:"disabled_effect2");
               }
            }
         }
         program { name: "unpressed_effect2";
            action: STATE_SET "default" 0.0;
            target: "arrow.image";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "unpressed_effect3";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            transition: GLIDE_EASE_OUT(0.45);
            after: "finished_animation";
         }
         program { name: "disabled_effect";
            action: STATE_SET "disabled" 0.0;
            target: "arrow.image";
            transition: GLIDE_EASE_OUT(0.45);
         }
         program { name: "disabled_effect2";
            action: STATE_SET "ready" 0.0;
            target: "tizen_vg_shape_clipper";
            transition: GLIDE_EASE_OUT(0.45);
            after: "finished_animation";
         }
         program { name: "finished_animation";
            action: STATE_SET "default" 0.0;
            target: "tizen_vg_shape_clipper";
            target: "tizen_vg_shape";
         }
         program { name: "pressed";
            signal: "mouse,down,1*";
            source: "event";
            script {
               if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0) && (get_int(disabled) == 0)) {
                  stop_program(PROGRAM:"delay_unpressed_effect");
                  set_int(mouse_down, 1);
                  set_int(animate, 1);
                  emit("elm,action,press", "");
                  run_program(PROGRAM:"pressed_effect");
               }
            }
         }
         program { name: "unpressed";
            signal: "mouse,up,1";
            source: "event";
            script {
               if (get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  if (get_int(disabled) == 0) {
                     if (get_int(animate) == 0) {
                        run_program(PROGRAM:"unpressed_effect");
                     } else {
                        set_state(PART:"tizen_vg_shape", "pressed", 0.0);
                        set_state(PART:"tizen_vg_shape_clipper", "pressed", 0.0);
                        set_state(PART:"arrow.image", "pressed", 0.0);
                        set_int(animate, 0);
                        run_program(PROGRAM:"delay_unpressed_effect");
                     }
                     emit("elm,action,unpress", "");
                  }
               }
            }
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "event";
            script {
               if ((get_int(multi_down) == 0) && (get_int(disabled) == 0)) {
                 run_program(PROGRAM:"play_sound");
                 run_program(PROGRAM:"button_click2");
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "longpress_sound";
            signal: "elm,action,longpress";
            source: "elm";
            action: RUN_PLUGIN "touch_haptic";
         }
         program { name: "button_click2";
            in: 0.001 0.0;
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "action_focus";
            signal: "elm,action,focus_highlight,show";
            source: "elm";
            action: STATE_SET "focused" 0.0;
            target: "focus_image";
         }
         program { name: "action_unfocus";
            signal: "elm,action,focus_highlight,hide";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "focus_image";
         }
         program { name: "access_pressed";
            signal: "elm,action,anim,activate";
            source: "elm";
            after: "pressed_effect";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            script {
               set_int(disabled, 1);
               if (get_int(animate) == 1) return;
               set_state(PART:"arrow.image", "disabled", 0.0);
            }
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            script {
               set_int(disabled, 0);
               set_state(PART:"arrow.image", "default", 0.0);
            }
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"event", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"event", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"event", 0);
            }
         }
      }
   }

   group { name: "elm/button/base/spinner/decrease/vertical";
      inherit: "elm/button/base/spinner/increase/vertical";
      alias: "elm/button/base/spinner/decrease/vertical_time_picker";
      alias: "elm/button/base/spinner/decrease/vertical_date_picker";
      alias: "elm/button/base/spinner/decrease/datetime";
      images {
         image: "core_icon_picker_arrow_down.png" COMP;
      }
      parts {
         part { name: "arrow.image";
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "arrow.image.bg";
               rel2.to: "arrow.image.bg";
               min: SPINNER_UP_DOWN_ARROW_IMAGE_SIZE_INC;
               max: SPINNER_UP_DOWN_ARROW_IMAGE_SIZE_INC;
               color: 204 204 204 255;
               image.normal: "core_icon_picker_arrow_down.png";
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 204 204 204 127;
            }
         }
      }
   }

   group { name: "elm/button/base/spinner/vertical";
      alias: "elm/button/base/spinner/vertical_time_picker";
      alias: "elm/button/base/spinner/datetime";
      data.item: "focus_highlight" "on";
      script {
         public mouse_down = 0;
         public multi_down = 0;
      }
      parts {
         part { name: "bg";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               min: SPINNER_VERTICAL_TEXT_BUTTON_BG_SIZE_INC;
            }
         }
         part { name: "elm.text";
            type: TEXT;
            scale: 1;
            description { state: "default" 0.0;
               min: 0 SPINNER_TEXT_HEIGHT_INC;
               max: -1 SPINNER_TEXT_HEIGHT_INC;
               fixed: 1 1;
               color: 0 0 0 255;
               rel1.to: "bg";
               rel2.to: "bg";
               text {
                  font: "Tizen:style=Light";
                  size: 106;
                  text_class: "tizen";
                  ellipsis: -1.0;
               }
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0 0 ;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0 0 ;
            }
         }
         part { name: "focus_image";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "bg";
               rel2.to: "bg";
            }
            description { state: "focused" 0.0;
               inherit: "default" 0.0;
            }
         }
         part { name: "over";
            type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "button_press";
            signal: "mouse,down,1*";
            source: "over";
            script {
               if ((get_int(multi_down) == 0) &&
                   (get_int(mouse_down) == 0)) {
                     set_int(mouse_down, 1);
                     run_program(PROGRAM:"button_press2");
               }
            }
         }
         program { name: "button_press2";
            action: SIGNAL_EMIT "elm,action,press" "";
            after: "action_pressed";
         }
         program { name: "button_unpress";
            signal: "mouse,up,1*";
            source: "over";
            script {
               if (get_int(mouse_down) == 1) {
                     set_int(mouse_down, 0);
                     run_program(PROGRAM:"button_unpress2");
               }
            }
         }
         program { name: "button_unpress2";
            action: SIGNAL_EMIT "elm,action,unpress" "";
            after: "action_unpressed";
         }
         program { name: "button_click";
            signal: "mouse,clicked,1";
            source: "over";
            script {
               if (get_int(multi_down) == 0) {
                 run_program(PROGRAM:"play_sound");
                 run_program(PROGRAM:"button_click2");
               }
            }
         }
         program { name: "play_sound";
            action: RUN_PLUGIN "touch_sound";
         }
         program { name: "button_click2";
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { name: "action_pressed";
            action: STATE_SET "pressed" 0.0;
            target: "elm.text";
         }
         program { name: "action_unpressed";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
         }
         program { name: "action_focus";
            signal: "elm,action,focus_highlight,show";
            source: "elm";
            action: STATE_SET "focused" 0.0;
            target: "focus_image";
         }
         program { name: "action_unfocus";
            signal: "elm,action,focus_highlight,hide";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "focus_image";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "disabler";
            target: "elm.text";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "disabler";
            target: "elm.text";
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "pass_event_enable";
            signal: "elm,event,pass,enabled";
            source: "elm";
            script {
               set_mouse_events(PART:"over", 0);
               set_mouse_events(PART:"disabler", 0);
            }
         }
         program { name: "pass_event_disable";
            signal: "elm,event,pass,disabled";
            source:"elm";
            script {
               set_mouse_events(PART:"over", 1);
               set_mouse_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_enable";
            signal: "elm,event,repeat,enabled";
            source: "elm";
            script {
               set_repeat_events(PART:"over", 1);
               set_repeat_events(PART:"disabler", 1);
            }
         }
         program { name: "repeat_event_disable";
            signal: "elm,event,repeat,disabled";
            source:"elm";
            script {
               set_repeat_events(PART:"over", 0);
               set_repeat_events(PART:"disabler", 0);
            }
         }
      }
   }

group { name: "elm/button/base/spinner/vertical_date_picker";
   inherit: "elm/button/base/spinner/vertical";
   parts {
      part { name: "bg";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SPINNER_VERTICAL_DATE_PICKER_TEXT_BUTTON_SIZE_INC;
         }
      }
      part { name: "elm.text";
         type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SPINNER_TEXT_HEIGHT_INC;
            max: -1 SPINNER_TEXT_HEIGHT_INC;
            fixed: 1 1;
            color: 0 0 0 255;
            rel1.to: "bg";
            rel2.to: "bg";
            text {
               font: "TizenSans:style=Light";
               size: 90;
               ellipsis: 0.0;
            }
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0 0 ;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0 0 ;
         }
      }
   }
}
/***********************SPINNER BUTTONS STYLES******************************/

group { name: "elm/button/base/hoversel_vertical_entry/default";
   alias: "elm/button/base/hoversel_vertical_entry/entry";
   alias: "elm/button/base/hoversel_horizontal_entry/default";
   alias: "elm/button/base/hoversel_horizontal_entry/entry";
   script {
      public disabled = 0;
   }
   parts {
      part { name: "base";
         scale: 1;
         type: SPACER;
         description { state: "default" 0.0;
            min: 0 BUTTON_HOVERSEL_ENTRY_MIN_HEIGHT_INC;
         }
      }
      part { name: "button_image";
         type: RECT;
         mouse_events: 1;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            color: 0 0 0 0;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            color: 61 185 204 77;
         }
         description { state: "disabled" 0.0;
            inherit:  "default" 0.0;
         }
      }
      part { name: "text_left_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_HOVERSEL_ENTRY_TEXT_LEFT_PADDING_INC 0;
            align: 0.0 0.5;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 1.0;
         }
      }
      part { name: "text_right_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_HOVERSEL_ENTRY_TEXT_RIGHT_PADDING_INC 0;
            align: 1.0 0.5;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 1.0;
         }
      }
      part { name: "elm.text.size";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1 { to: "text_left_padding"; relative: 1.0 0.0; }
            rel2 { to: "text_right_padding"; relative: 0.0 1.0; }
            text {
               style: "button_hoversel_entry";
               min: 1 0;
               text_source: "elm.text";
            }
            align: 0.0 0.5;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1 { to: "text_left_padding"; relative: 1.0 0.0; }
            rel2 { to: "text_right_padding"; relative: 0.0 1.0; }
            text.style: "button_hoversel_entry";
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            text.style: "button_hoversel_entry_press";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text.style: "button_hoversel_entry_dim";
         }
      }
      part { name: "event";
         type: RECT;
         mouse_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit:  "default" 0.0;
            visible: 0;
         }
      }
   }
   programs {
      program { name: "press";
         signal: "mouse,down,1";
         source: "event";
         script {
            if (get_int(disabled) == 0) {
               emit("elm,action,press", "");
               set_state(PART:"button_image", "pressed", 0.0);
            }
         }
      }
      program { name: "unpress";
         signal: "mouse,up,1";
         source: "event";
         script {
            if (get_int(disabled) == 0) {
               emit("elm,action,unpress", "");
               set_state(PART:"button_image", "default", 0.0);
            }
         }
      }
      program { name: "click";
         signal: "mouse,clicked,1";
         source: "event";
         script {
            if (get_int(disabled) == 0) {
               run_program(PROGRAM:"touch_sound");
               emit("elm,action,click", "");
            }
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            set_int(disabled, 1);
            set_state(PART:"button_image", "disabled", 0.0);
            set_state(PART:"event", "disabled", 0.0);
            set_state(PART:"elm.text", "disabled", 0.0);
         }
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            set_int(disabled, 0);
            set_state(PART:"button_image", "default", 0.0);
            set_state(PART:"event", "default", 0.0);
            set_state(PART:"elm.text", "default", 0.0);
         }
      }
      program { name: "touch_sound";
         action: RUN_PLUGIN "touch_sound";
      }
      program { name: "pass_event_enable";
         signal: "elm,event,pass,enabled";
         source: "elm";
         script {
            set_mouse_events(PART:"event", 0);
         }
      }
      program { name: "pass_event_disable";
         signal: "elm,event,pass,disabled";
         source:"elm";
         script {
            set_mouse_events(PART:"event", 1);
         }
      }
      program { name: "repeat_event_enable";
         signal: "elm,event,repeat,enabled";
         source: "elm";
         script {
            set_repeat_events(PART:"event", 1);
         }
      }
      program { name: "repeat_event_disable";
         signal: "elm,event,repeat,disabled";
         source:"elm";
         script {
            set_repeat_events(PART:"event", 0);
         }
      }
   }
}

group { name: "elm/button/base/hoversel_vertical/default";
   alias: "elm/button/base/hoversel_vertical/entry";
   alias: "elm/button/base/hoversel_horizontal/default";
   alias: "elm/button/base/hoversel_horizontal/entry";
   alias: "elm/button/base/dropdown";
   images {
      set {
         name: "core_dropdown_label_icon_arrow";
         image {
            image: SMALL"images/User_Input_Elements/core_dropdown_label_icon_arrow.png" COMP;
         }
         image {
            image: MEDIUM"images/User_Input_Elements/core_dropdown_label_icon_arrow.png" COMP;
         }
      }
   }
   script {
      public disabled = 0;
      public mouse_down = 0;
      public animate = 0;
      public minw = 0;
      public minh = 0;
      public get_effect_min_size(base_effect, Float:ratio, min_w, min_h) {
         new x, y, w, h;
         get_geometry(base_effect, x, y, w, h);
         if (w > h) {
            set_float(min_w, w - h * (1 - ratio));
            set_float(min_h, h * ratio);
         } else {
            set_float(min_w, w * ratio);
            set_float(min_h, h - w * (1 - ratio));
         }
      }
   }
   parts {
      part { name: "base";
         scale: 1;
         type: SPACER;
         description { state: "default" 0.0;
            min: 0 BUTTON_HOVERSEL_MIN_HEIGHT_INC;
         }
      }
      part { name: "effect_spacer";
         type: SPACER;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
               to_x: "underline";
               to_y: "base";
               relative: 0.0 0.0;
            }
            rel2 {
               to_x: "underline";
               to_y: "base";
               relative: 1.0 1.0;
            }
         }
      }
      part { name: "press_effect";
         type: RECT;
         mouse_events: 1;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "effect_spacer";
            rel2.to: "effect_spacer";
            rel1.relative: 0.5 0.5;
            rel2.relative: 0.5 0.5;
            color: 61 185 204 77;
         }
         description { state: "ready" 0.0;
            inherit: "default" 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 1.0;
            color: 61 185 204 0;
         }
         description { state: "pressed" 0.0;
            inherit:  "default" 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 1.0;
         }
      }
      part { name: "button_image";
         type: RECT;
         mouse_events: 1;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            color: 250 250 250 0;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "disabled" 0.0;
            inherit:  "default" 0.0;
         }
      }
      part { name: "text_left_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_HOVERSEL_TEXT_LEFT_PADDING_INC 0;
            fixed: 1 1;
            align: 0.0 0.5;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 1.0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1 { to: "text_left_padding"; relative: 1.0 0.0; }
            rel2 { to: "text_right_padding"; relative: 0.0 1.0; }
            text.style: "button_hoversel";
            color: 61 185 204 255;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            text.style: "button_hoversel_press";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text.style: "button_hoversel_dim";
            color: 61 185 204 163;
         }
      }
      part { name: "underline";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 0 BUTTON_HOVERSEL_UNDERLINE_HEIGHT_INC;
            fixed: 1 1;
            align: 0.5 1.0;
            rel1.relative: 0.0 1.0;
            rel2.relative: 1.0 1.0;
            color: 61 185 204 255;
         }
      }
      part { name: "underline_padding";
         type: SPACER;
         scale: 1;
         description { state: "default";
            align: 0.5 1.0;
            fixed: 1 1;
            min: 0 BUTTON_HOVERSEL_UNDERLINE_PADDING_INC;
            rel1 { to: "underline"; relative: 0.0 0.0; }
            rel2 { to: "underline"; relative: 1.0 0.0; }
         }
      }
      part { name: "arrow";
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_HOVERSEL_ARROW_ICON_SIZE_INC;
            fixed: 1 1;
            align: 1.0 1.0;
            rel1 { to_y: "underline_padding"; relative: 1.0 0.0; }
            rel2 { to_y: "underline_padding"; relative: 1.0 0.0; }
            image.normal: "core_dropdown_label_icon_arrow";
            color: 61 185 204 255;
         }
      }
      part { name: "text_right_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: BUTTON_HOVERSEL_TEXT_RIGHT_PADDING_INC 0;
            fixed: 1 1;
            align: 1.0 0.5;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 1.0;
         }
     }
     part { name: "event";
         type: RECT;
         mouse_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit:  "default" 0.0;
            visible: 0;
         }
      }
   }
   programs {
      program { name: "pressed_effect";
         action: STATE_SET "pressed" 0.0;
         target: "press_effect";
         transition: GLIDE_EASE_OUT(0.15);
         after: "pressed_effect3";
      }
      program { name: "pressed_effect2";
         action: STATE_SET "pressed" 0.0;
         target: "elm.text";
         target: "button_image";
         transition: GLIDE_EASE_OUT(0.15);
      }
      program { name: "pressed_effect3";
         script {
            set_int(animate, 0);
         }
      }
      program { name: "delay_unpressed_effect";
         in: 0.1 0.0;
         after: "unpressed_effect";
      }
      program { name: "unpressed_effect";
         script {
            if (get_int(disabled) == 0)
               run_program(PROGRAM:"unpressed_effect2");
            else
               run_program(PROGRAM:"disabled_effect");
            run_program(PROGRAM:"unpressed_effect3");
         }
      }
      program { name: "unpressed_effect2";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
         transition: GLIDE_EASE_OUT(0.45);
      }
      program { name: "disabled_effect";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
         transition: GLIDE_EASE_OUT(0.45);
      }
      program { name: "unpressed_effect3";
         action: STATE_SET "ready" 0.0;
         target: "press_effect";
         transition: GLIDE_EASE_OUT(0.45);
         after: "finished_animation";
      }
      program { name: "finished_animation";
         script {
            if (get_int(disabled) == 1)
               set_state(PART:"button_image", "disabled",0.0);
            else
               set_state(PART:"button_image", "default",0.0);
         }
      }
      program { name: "pressed";
         signal: "mouse,down,1*";
         source: "event";
         script {
            if ((get_int(mouse_down) == 0) && (get_int(disabled) == 0)) {
               stop_program(PROGRAM:"delay_unpressed_effect");
               set_int(mouse_down, 1);
               set_int(animate, 1);
               get_effect_min_size(PART:"effect_spacer", 0.7, minw, minh);
               custom_state(PART:"press_effect", "default", 0.0);
               set_state_val(PART:"press_effect", STATE_MIN, get_int(minw), get_int(minh));
               set_state(PART:"press_effect", "custom",0.0);
               emit("elm,action,press", "");
               run_program(PROGRAM:"pressed_effect");
               run_program(PROGRAM:"pressed_effect2");
            }
         }
      }
      program { name: "unpressed";
         signal: "mouse,up,1";
         source: "event";
         script {
            if (get_int(mouse_down) == 1) {
               set_int(mouse_down, 0);
               if (get_int(disabled) == 0) {
                  if (get_int(animate) == 0) {
                     emit("elm,action,unpress", "");
                     run_program(PROGRAM:"unpressed_effect");
                  } else {
                     set_state(PART:"elm.text", "pressed", 0.0);
                     set_state(PART:"button_image", "pressed", 0.0);
                     set_state(PART:"press_effect", "pressed", 0.0);
                     set_int(animate, 0);
                     run_program(PROGRAM:"delay_unpressed_effect");
                  }
                  emit("elm,action,unpress", "");
               }
            }
         }
      }
      program { name: "click";
         signal: "mouse,clicked,1";
         source: "event";
         script {
            if (get_int(disabled) == 0) {
               run_program(PROGRAM:"touch_sound");
               run_program(PROGRAM:"clicked_signal");
            }
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            set_int(disabled, 1);
            set_state(PART:"button_image", "disabled", 0.0);
            set_state(PART:"event", "disabled", 0.0);
            set_state(PART:"elm.text", "disabled", 0.0);
         }
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            set_int(disabled, 0);
            set_state(PART:"button_image", "default", 0.0);
            set_state(PART:"event", "default", 0.0);
            set_state(PART:"elm.text", "default", 0.0);
         }
      }
      program { name: "touch_sound";
         action: RUN_PLUGIN "touch_sound";
      }
      program { name: "clicked_signal";
         in: 0.001 0.0;
         action: SIGNAL_EMIT "elm,action,click" "";
      }
      program { name: "pass_event_enable";
         signal: "elm,event,pass,enabled";
         source: "elm";
         script {
            set_mouse_events(PART:"event", 0);
         }
      }
      program { name: "pass_event_disable";
         signal: "elm,event,pass,disabled";
         source:"elm";
         script {
            set_mouse_events(PART:"event", 1);
         }
      }
      program { name: "repeat_event_enable";
         signal: "elm,event,repeat,enabled";
         source: "elm";
         script {
            set_repeat_events(PART:"event", 1);
         }
      }
      program { name: "repeat_event_disable";
         signal: "elm,event,repeat,disabled";
         source:"elm";
         script {
            set_repeat_events(PART:"event", 0);
         }
      }
   }
}
