group { name: "elm/button/base/anchor";
   images {
      image: "whitetheme/btn_style_nor.png" COMP;
      image: "whitetheme/btn_style_sel.png" COMP;
   }
   parts {
      part { name: "button_image";
         mouse_events: 1;
         scale: 1;
         description {
            state: "default" 0.0;
            min: BUTTON_TEXT_STYLE1_VISIBLE_BG_MIN_INC;
            visible: 0;
            image {
               normal: "whitetheme/btn_style_nor.png";
               border: BUTTON_ANCHOR_BG_BORDER;
               middle: SOLID;
            }
         }
         description { state: "clicked" 0.0;
            visible: 1;
            min: BUTTON_TEXT_STYLE1_VISIBLE_BG_MIN_INC;
            color_class: "W012P";
            image {
               normal: "whitetheme/btn_style_nor.png";
               border: BUTTON_ANCHOR_BG_BORDER;
               border_scale: 1;
            }
         }
         description { state: "visible" 0.0;
            visible: 1;
            min: BUTTON_TEXT_STYLE1_VISIBLE_BG_MIN_INC;
            color_class: "W012";
            image {
               normal: "whitetheme/btn_style_nor.png";
               border: BUTTON_ANCHOR_BG_BORDER;
               border_scale: 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit:  "default" 0.0;
            image {
               normal: "whitetheme/btn_style_nor.png";
               border: BUTTON_ANCHOR_BG_BORDER;
            }
         }
      }
      part { name: "elm.swallow.content";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            visible: 0;
            align: 0.0 0.5;
            rel2.relative: 0.0 1.0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            fixed: 1 0;
            visible: 1;
            aspect: 1.0 1.0;
            aspect_preference: VERTICAL;
         }
         description { state: "icononly" 0.0;
            inherit: "default" 0.0;
            fixed: 0 0;
            visible: 1;
            align: 0.5 0.5;
            aspect: 1.0 1.0;
            rel2.relative: 1.0 1.0;
            aspect_preference: VERTICAL;
         }
      }
      part { name: "elm.padding.text.left";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description {  state: "default" 0.0;
            align: 0 0.5;
            fixed: 1 0;
            min: BUTTON_ANCHOR_PADDING_DEFAULT_SIZE 0;
            rel1 {
               to: "elm.swallow.content";
               relative: 1 0;
            }
            rel2 {
               to: "elm.swallow.content";
               relative: 1 1;
            }
         }
      }
      part { name: "elm.padding.text.right";
         type: SPACER;
         scale: 1;
         mouse_events: 0;
         description {  state: "default" 0.0;
            align: 1 0.5;
            rel1.relative: 1 0;
            fixed: 1 0;
            min: BUTTON_ANCHOR_PADDING_DEFAULT_SIZE 10;
         }
      }
      part { name: "elm.text";
         type: TEXT;
         mouse_events:  0;
         scale: 1;
         effect: SHADOW BOTTOM;
         description { state: "default" 0.0;
            rel1 {
               to_x: "elm.padding.text.left";
               relative: 1 0;
            }
            rel2 {
               to : "elm.padding.text.right";
               relative: 0 1;
            }
            color: BUTTON_TEXT_STYLE1_NORMAL_COLOR_INC;
            color2: BUTTON_TEXT_SHADOW_NORMAL_COLOR_INC;
            text {
               font: "SLP:style=Regular";
               size: BUTTON_TEXT_STYLE1_FONT_SIZE_INC;
               min: 0 0;
               text_class: "slp";
            }
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_TEXT_STYLE1_PRESSED_COLOR_INC;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_TEXT_STYLE1_DISABLED_COLOR_INC;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            color: BUTTON_TEXT_STYLE1_DISABLED_COLOR_INC;
            visible: 1;
            text.min: 1 1;
         }
      }
      part { name: "over";
         type: RECT;
         mouse_events: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            color: BUTTON_ANCHOR_COLOR_TRANSPARENT;
         }
      }
      part { name: "disabler";
         type: RECT;
         description { state: "default" 0.0;
            color: BUTTON_ANCHOR_COLOR_TRANSPARENT;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      // used to force sizing of icon to follow label sizing nearby
      part { name: "sizer.content"; type: TEXT;
         mouse_events:  0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            text {
               font: "SLP:style=Medium";
               size: BUTTON_TEXT_STYLE1_FONT_SIZE_INC;
               min: 0 0;
               text_class: "button";
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            text {
               min: 1 1;
               text: "M";
            }
         }
         description { state: "icononly" 0.0;
            inherit: "default" 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            text {
               min: 1 1;
               text: "M";
            }
         }
      }
      // end sizer
   }
   programs {
      program { name: "button_mouse_in";
         signal: "mouse,in";
         source: "over";
         action: STATE_SET "visible" 0.0;
         target: "button_image";
         target: "elm.text";
      }
      program { name: "button_mouse_out";
         signal: "mouse,out";
         source: "over";
         action: STATE_SET "default" 0.0;
         target: "button_image";
         target: "elm.text";
      }
      program { name: "button_unclick";
         signal: "mouse,up,1";
         source: "over";
         action: STATE_SET "visible" 0.0;
         target: "button_image";
         target: "elm.text";
      }
      program { name: "button_click2";
         signal: "mouse,down,1";
         source: "over";
         action: STATE_SET "clicked" 0.0;
         target: "button_image";
         target: "elm.text";
      }
      program { name: "button_unclick2";
         signal: "mouse,up,1";
         source: "over";
         action: STATE_SET "default" 0.0;
         transition: DECELERATE 0.5;
         target: "button_image";
         target: "elm.text";
      }
      program { name: "button_unclick3";
         signal: "mouse,up,1";
         source: "over";
         action: SIGNAL_EMIT "elm,action,click" "";
      }
      program { name: "text_show";
         signal: "elm,state,text,visible";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "icononly")) {
               set_state(PART:"elm.swallow.content", "visible", 0.0);
               set_state(PART:"sizer.content", "visible", 0.0);
            }
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "disabled") || (!strcmp(st, "disabled_visible")))
              set_state(PART:"elm.text", "disabled_visible", 0.0);
            else
              set_state(PART:"elm.text", "visible", 0.0);
         }
      }
      program { name: "text_hide";
         signal: "elm,state,text,hidden";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "visible")) {
               set_state(PART:"elm.swallow.content", "icononly", 0.0);
               set_state(PART:"sizer.content", "icononly", 0.0);
            }
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "default") || (!strcmp(st, "visible")))
              set_state(PART:"elm.text", "default", 0.0);
            else
              set_state(PART:"elm.text", "disabled", 0.0);
         }
      }
      program { name: "icon_show";
         signal: "elm,state,icon,visible";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "visible")) {
               set_state(PART:"elm.swallow.content", "visible", 0.0);
               set_state(PART:"sizer.content", "visible", 0.0);
            }
            else {
               set_state(PART:"elm.swallow.content", "icononly", 0.0);
               set_state(PART:"sizer.content", "icononly", 0.0);
            }
         }
      }
      program { name: "icon_hide";
         signal: "elm,state,icon,hidden";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "elm.swallow.content";
         target: "sizer.content";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            set_state(PART:"button_image", "disabled", 0.0);
            set_state(PART:"over", "disabled", 0.0);
            set_state(PART:"disabler", "disabled", 0.0);
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "visible") || !strcmp(st, "disabled_visible"))
              set_state(PART:"elm.text", "disabled_visible", 0.0);
            else
              set_state(PART:"elm.text", "disabled", 0.0);
         }
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            set_state(PART:"button_image", "visible", 0.0);
            set_state(PART:"over", "visible", 0.0);
            set_state(PART:"disabler", "visible", 0.0);
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "visible") || !strcmp(st, "disabled_visible"))
              set_state(PART:"elm.text", "visible", 0.0);
            else
              set_state(PART:"elm.text", "default", 0.0);
         }
      }
   }
}

