
#define FLIP_PICKER_MAX_LEN (50)
#define FLIP_PICKER_MAX_LEN_STR "50"

group { name: "elm/flipselector/base/default";
   images {
      image: "whitetheme/flip_base.png" COMP;
      image: "whitetheme/flip_shad.png" COMP;
      image: "core_icon_picker_arrow_down.png" COMP;
      image: "core_icon_picker_arrow_up.png" COMP;
      image: "whitetheme/flip_t.png" COMP;
      image: "whitetheme/flip_b.png" COMP;
   }
   data {
      item: "max_len" FLIP_PICKER_MAX_LEN_STR;
   }
   script {
      public cur, prev, next, lock;
      flip_up(str[]) {
         new tmp[FLIP_PICKER_MAX_LEN];
         if (get_int(lock) == 1) {
            replace_str(next, 0, str);
            return;
         }
         fetch_str(cur, 0, tmp, FLIP_PICKER_MAX_LEN);

         set_text(PART:"bottom_b", tmp);

         set_state(PART:"elm.top", "shrink", 0.0);
         set_text(PART:"elm.top", tmp);
         set_state(PART:"elm.top", "default", 0.0);
         set_text(PART:"elm.top", tmp);

         replace_str(prev, 0, tmp);

         set_state(PART:"elm.bottom", "default", 0.0);
         set_text(PART:"elm.bottom", str);
         set_state(PART:"elm.bottom", "shrink", 0.0);
         set_text(PART:"elm.bottom", str);

         set_text(PART:"top_b", str);

         replace_str(cur, 0, str);

         set_state(PART:"bottom_sheet", "shrink", 0.0);
         set_state(PART:"top_sheet", "default", 0.0);

         set_int(lock, 1);
         set_state(PART:"shadow", "default", 0.0);
         anim(0.2, "animator_top_down", 1);
      }

      flip_dn(str[]) {      
         new tmp[FLIP_PICKER_MAX_LEN];
         if (get_int(lock) == 1) {
            replace_str(next, 0, str);
            return;
         }

         fetch_str(cur, 0, tmp, FLIP_PICKER_MAX_LEN);

         set_text(PART:"top_b", tmp);

         set_state(PART:"elm.bottom", "shrink", 0.0);
         set_text(PART:"elm.bottom", tmp);
         set_state(PART:"elm.bottom", "default", 0.0);
         set_text(PART:"elm.bottom", tmp);

         replace_str(prev, 0, tmp);

         set_state(PART:"elm.top", "default", 0.0);
         set_text(PART:"elm.top", str);
         set_state(PART:"elm.top", "shrink", 0.0);
         set_text(PART:"elm.top", str);

         set_text(PART:"bottom_b", str);

         replace_str(cur, 0, str);

         set_state(PART:"bottom_sheet", "default", 0.0);
         set_state(PART:"top_sheet", "shrink", 0.0);

         set_int(lock, 1);
         set_state(PART:"shadow", "full", 0.0);
         anim(0.2, "animator_bottom_up", 1);
      }
      
      public animator_bottom_down(val, Float:pos) {
         new tmp[FLIP_PICKER_MAX_LEN];

         set_tween_state(PART:"elm.bottom", pos, "shrink", 0.0, "default", 0.0);
         set_tween_state(PART:"bottom_sheet", pos, "shrink", 0.0, "default",
         0.0);
         set_tween_state(PART:"shadow", pos, "half", 0.0, "full",
         0.0);

         if (pos >= 1.0) {
            set_state(PART:"shadow", "default", 0.0);
            set_int(lock, 0);

            fetch_str(next, 0, tmp, FLIP_PICKER_MAX_LEN);
            if (strncmp(tmp, "", FLIP_PICKER_MAX_LEN) != 0) {
               replace_str(next, 0, "");
               flip_up(tmp);
            }
         }
      }

      public animator_top_down(val, Float:pos) {
         set_tween_state(PART:"elm.top", pos, "default", 0.0, "shrink", 0.0);
         set_tween_state(PART:"top_sheet", pos, "default", 0.0, "shrink",
         0.0);
         set_tween_state(PART:"shadow", pos, "default", 0.0, "half",
         0.0);

         if (pos >= 1.0)
         anim(0.2, "animator_bottom_down", val);
      }

      public animator_bottom_up(val, Float:pos) {
         set_tween_state(PART:"elm.bottom", pos, "default", 0.0, "shrink", 0.0);
         set_tween_state(PART:"bottom_sheet", pos, "default", 0.0, "shrink",
         0.0);
         set_tween_state(PART:"shadow", pos, "full", 0.0, "half",
         0.0);

         if (pos >= 1.0)
         anim(0.2, "animator_top_up", val);
      }

      public animator_top_up(val, Float:pos) {
         new tmp[FLIP_PICKER_MAX_LEN];

         set_tween_state(PART:"elm.top", pos, "shrink", 0.0, "default", 0.0);
         set_tween_state(PART:"top_sheet", pos, "shrink", 0.0, "default",
         0.0);
         set_tween_state(PART:"shadow", pos, "half", 0.0, "default",
         0.0);

         if (pos >= 1.0) {
            set_state(PART:"shadow", "default", 0.0);
            set_int(lock, 0);

            fetch_str(next, 0, tmp, FLIP_PICKER_MAX_LEN);
            if (strncmp(tmp, "", FLIP_PICKER_MAX_LEN) != 0) {
               replace_str(next, 0, "");
               flip_dn(tmp);
            }
         }
      }

      public message(Msg_Type:type, id, ...) {
         // flip down 
         if ((type == MSG_STRING) && (id == 1)) {
            new value[FLIP_PICKER_MAX_LEN];
            snprintf(value, FLIP_PICKER_MAX_LEN, "%s", getarg(2));
            flip_up(value);
         }

         // flip up 
         if ((type == MSG_STRING) && (id == 2)) {
            new value[FLIP_PICKER_MAX_LEN];
            snprintf(value, FLIP_PICKER_MAX_LEN, "%s", getarg(2));
            flip_dn(value);
         }
      }
   }
   parts {     
      part { name: "base";
         scale: 1;
         description { state: "default" 0.0;
            min: FLIP_SELECTOR_BG_MIN_INC;
            image{
               normal: "whitetheme/flip_base.png";
               border: FLIP_SELECTOR_BG_BORDER_INC;
            }
         }
      }
      part { name: "b";
         type: RECT;
         mouse_events: 1;
         description { state: "default" 0.0;
            color: FLIP_SELECTOR_COLOR_TRANSPARENT;
            rel1 {
               to: "base";
               relative: 0.0 0.5;
            }
            rel2.to: "base";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "t";
         type: RECT;
         mouse_events: 1;
         description { state: "default" 0.0;
            color: FLIP_SELECTOR_COLOR_TRANSPARENT;
            rel1.to: "base";
            rel2 {
               to: "base";
               relative: 1.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "bottom_sheet_static";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 1;
            rel1.to: "b";
            rel2.to: "b";
            image {
               normal: "whitetheme/flip_b.png";            
               border: FLIP_SELECTOR_BG_PARTS_BORDER_INC;
               border_scale: 1;
            }
         }
      }
      part { name: "bottom_b";
         mouse_events: 0;
         clip_to: "bottom_clipper";
         type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            color: FLIP_SELECTOR_TEXT_COLOR_INC;
            color2: FLIP_SELECTOR_TEXT_SHADOW_COLOR_INC;
            rel1 {
               to_x: "elm.padding.text.left";
               to_y: "base";
               relative: 1 0;
            }
            rel2 {
               to_x: "elm.padding.text.right";
               to_y: "base";
               relative: 0 1;
            }
            text {
               font: "SLP:style=Bold";
               size: FLIP_SELECTOR_TEXT_SIZE_INC;
               min: 1 1;
               align: 0.5 0.5;
            }
         }
      }
      part { name: "shadow";
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to: "b";
            rel2 {
               to: "b";
               relative: 1.0 0.0;
            }
            image.normal: "whitetheme/flip_shad.png";
         }
         description { state: "half" 0.0;
            inherit: "default" 0.0;
            rel2.relative: 1.0 0.5;
         }
         description { state: "full" 0.0;
            inherit: "default" 0.0;
            rel2.relative: 1.0 1.0;
         }
      }
      part { name: "bottom_sheet";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 1;
            rel1.to: "b";
            rel2.to: "b";
            image {
               normal: "whitetheme/flip_b.png";
               border : FLIP_SELECTOR_BG_PARTS_BORDER_INC;
               border_scale: 1;
            }
         }
         description { state: "shrink" 0.0;
            inherit: "default" 0.0;
            visible: 0;
            rel2.relative: 1.0 0.0;
         }
      }
      part { name: "elm.padding.text.left";
         mouse_events: 0;
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            align: 0 0.5;
            min: FLIP_SELECTOR_TEXT_PADDING_SIZE_DEFAULT 0;
            fixed: 1 0;
            rel1.to: "base";
            rel2 {
               to: "base";
               relative: 0 1;
            }
         }
      }
      part { name: "elm.padding.text.right";
         mouse_events: 0;
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            align: 1 0.5;
            min: FLIP_SELECTOR_TEXT_PADDING_SIZE_DEFAULT 0;
            fixed: 1 0;
            rel1 {
               to: "base";
               relative: 1 0;
            }
            rel2.to: "base";
            
         }
      }
      part { name: "elm.bottom";
         mouse_events: 0;
         clip_to: "bottom_clipper";
         type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            color: FLIP_SELECTOR_TEXT_COLOR_INC;
            color2: FLIP_SELECTOR_TEXT_SHADOW_COLOR_INC;
            rel1 {
               to_x: "elm.padding.text.left";
               to_y: "base";
               relative: 1 0;
            }
            rel2 {
               to_x: "elm.padding.text.right";
               to_y: "base";
               relative: 0 1;
            }
            text {
               font: "SLP:style=Bold";
               size: FLIP_SELECTOR_TEXT_SIZE_INC;
               min: 1 1;
               align: 0.5 0.5;
            }
         }
         description { state: "shrink" 0.0;
            inherit: "default" 0.0;
            color: FLIP_SELECTOR_SHRINK_INC;
            visible: 0;
            rel2.relative: 1.0 0.5; // FIXME: same visual effect? --> MAP!
         }
      }
      part { name: "top_sheet_static";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 1;
            rel1 {
               to: "t";
               offset: 0 1;
            }
            rel2.to: "t";
            image {
               normal: "whitetheme/flip_t.png";
               border : FLIP_SELECTOR_BG_PARTS_BORDER_INC;
               border_scale: 1;
            }
         }
      }
      part { name: "top_b";
         mouse_events: 0;
         clip_to: "top_clipper";
         type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            color: FLIP_SELECTOR_TEXT_COLOR_INC;
            color2: FLIP_SELECTOR_TEXT_SHADOW_COLOR_INC;
            rel1 {
               to_x: "elm.padding.text.left";
               to_y: "base";
               relative: 1 0;
            }
            rel2 {
               to_x: "elm.padding.text.right";
               to_y: "base";
               relative: 0 1;
            }
            text {
               font: "SLP:style=Bold";
               size: FLIP_SELECTOR_TEXT_SIZE_INC;
               min: 0 1;
               align: 0.5 0.5;
               source: "elm.top";
            }
         }
      }
      part { name: "top_sheet";
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 1;
            rel1.to: "t";
            rel2.to: "t";
            image {
               normal: "whitetheme/flip_t.png";
               border : FLIP_SELECTOR_BG_PARTS_BORDER_INC;
               border_scale: 1;
            }
         }
         description { state: "shrink" 0.0;
            inherit: "default" 0.0;
            color: FLIP_SELECTOR_SHRINK_INC;
            visible: 0;
            rel1.relative: 0.0 1.0;
         }
      }
      part { name: "elm.top";
         mouse_events: 0;
         clip_to: "top_clipper";
         type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            color: FLIP_SELECTOR_TEXT_COLOR_INC;
            color2: FLIP_SELECTOR_TEXT_SHADOW_COLOR_INC;
            rel1 {
               to_x: "elm.padding.text.left";
               to_y: "base";
               relative: 1 0;
            }
            rel2 {
               to_x: "elm.padding.text.right";
               to_y: "base";
               relative: 0 1;
            }
            text {
               font: "SLP:style=Bold";
               size: FLIP_SELECTOR_TEXT_SIZE_INC;
               min: 1 1;
               align: 0.5 0.5;
            }
         }
         description { state: "shrink" 0.0;
            inherit: "default" 0.0;
            visible: 0;
            rel1.relative: 0.0 0.5;
         }
      }
      part { name: "arrow_top";
         mouse_events: 0;
         clip_to: "disclip";
         scale: 1;
         description { state: "default" 0.0;
            min: FLIP_SELECTOR_ARROW_SIZE;
            max: FLIP_SELECTOR_ARROW_SIZE;
            align: 0.5 0.1;
            rel1.to: "t";
            rel2.to: "t";
            image.normal: "core_icon_picker_arrow_up.png";
            color_class: F032L1;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "arrow_bottom";
         mouse_events: 0;
         clip_to: "disclip";
         scale: 1;
         description { state: "default" 0.0;
            min: FLIP_SELECTOR_ARROW_SIZE;
            max: FLIP_SELECTOR_ARROW_SIZE;
            align: 0.5 0.9;
            rel1.to: "b";
            rel2.to: "b";
            image.normal: "core_icon_picker_arrow_down.png";
            color_class: F032L1;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "top_clipper";
         type: RECT;
         mouse_events: 0;
         clip_to: "disclip";
         description { state: "default" 0.0;
            rel1.to: "t";
            rel2.to: "t";
            visible: 1;
         }
      }
      part { name: "bottom_clipper";
         type: RECT;
         mouse_events: 0;
         clip_to: "disclip";
         description { state: "default" 0.0;
            rel1.to: "b";
            rel2.to: "b";
            visible: 1;
         }
      }
      part { name: "disclip";
         type: RECT;
         description { state: "default" 0.0;
            color: FLIP_SELECTOR_DISCLIP_DEFAULT_COLOR_INC;
         }
         description { state: "enabled" 0.0;
            color: FLIP_SELECTOR_DISCLIP_ENABLE_COLOR_INC;
         }
      }
      part { name: "event_blocker";
         type: RECT;
         description { state: "default" 0.0;
            color: FLIP_SELECTOR_COLOR_TRANSPARENT;
            visible: 0;
         }
         description { state: "enabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "load";
         signal: "load";
         source: "";
         script {
            append_str(cur, "");
            append_str(prev, "");
            append_str(next, "");
            set_int(lock, 0);
         }
      }
      program { name: "hide_arrows";
         signal: "elm,state,button,hidden";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "arrow_top";
         target: "arrow_bottom";
         target: "t";
         target: "b";
      }
      program { name: "show_arrows";
         signal: "elm,state,button,visible";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "arrow_top";
         target: "arrow_bottom";
         target: "t";
         target: "b";
      }
      program { name: "up";
         signal: "mouse,down,1";
         source: "t";
         action: SIGNAL_EMIT "elm,action,up,start" "";
      }
      program { name: "up,stop";
         signal: "mouse,up,1";
         source: "t";
         action: SIGNAL_EMIT "elm,action,up,stop" "";
      }
      program { name: "down";
         signal: "mouse,down,1";
         source: "b";
         action: SIGNAL_EMIT "elm,action,down,start" "";
      }
      program { name: "down,stop";
         signal: "mouse,up,1";
         source: "b";
         action: SIGNAL_EMIT "elm,action,down,stop" "";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "enabled" 0.0;
         target: "disclip";
         target: "event_blocker";
      }
       program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "disclip";
         target: "event_blocker";
       }
   }
}

