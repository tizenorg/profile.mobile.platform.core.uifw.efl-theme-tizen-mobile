// FIXME: scroller UX is not defined yet
// Ho Sang, do it!

#define SCROLLER_DEFAULT_SCROLLBAR_VBAR_MIN_SIZE_INC 9 3
#define SCROLLER_DEFAULT_SCROLLBAR_VBAR_MAX_SIZE_INC 9 99999
#define SCROLLER_DEFAULT_SCROLLBAR_HBAR_MIN_SIZE_INC 3 9
#define SCROLLER_DEFAULT_SCROLLBAR_HBAR_MAX_SIZE_INC 99999 9
#define SCROLLER_DEFAULT_SCROLLBAR_VBAR_PADDING_SIZE 9
#define SCROLLER_DEFAULT_SCROLLBAR_HBAR_PADDING_SIZE 9
#define SCROLLER_MATCHLIST_SCROLLBAR_HBAR_MIN_SIZE_INC 180 16
#define SCROLLER_MATCHLIST_SCROLLBAR_HBAR_MAX_SIZE_INC 99999 16
#define SCROLLER_PHOTOCAM_SCROLLBAR_VBAR_PADDING_SIZE 6
#define SCROLLER_PHOTOCAM_SCROLLBAR_HBAR_PADDING_SIZE 16
#define SCROLLER_PHOTOCAM_SCROLLBAR_VBAR_MIN_SIZE_INC 16 238
#define SCROLLER_PHOTOCAM_SCROLLBAR_VBAR_MAX_SIZE_INC 16 99999
#define SCROLLER_PHOTOCAM_SCROLLBAR_HBAR_MIN_SIZE_INC 180 16
#define SCROLLER_HANDLER_SCROLLBAR_VBAR_MIN_SIZE_INC 23 234
#define SCROLLER_HANDLER_SCROLLBAR_HBAR_MIN_SIZE_INC 234 23
#define SCROLLER_HANDLER_SCROLLBAR_VBAR_MIDDLE_MIN_SIZE_INC 23 45
#define SCROLLER_HANDLER_SCROLLBAR_HBAR_MIDDLE_MIN_SIZE_INC 45 23
#define SCROLLER_HANDLER_SCROLLBAR_VBAR_PADDING_SIZE 13

group { name: "elm/scroller/base/default";
   alias: "elm/carousel/base/default";
   alias: "elm/scroller/base/map_bubble";
   alias: "elm/gengrid/base/default";
   alias: "elm/genlist/base/default";
   alias: "elm/list/base/default";

   data {
      item: "focus_highlight" "on";
   }

   script {
      public sbvis_v, sbvis_h, sbalways_v, sbalways_h, sbvis_timer;
      public sh_v, sh_h;
      public effect_on, effect_hold, mouse_down;
      public timer0(val) {
         new v;
         v = get_int(sbvis_v);
         if (v) {
            v = get_int(sbalways_v);
            if (!v) {
               emit("do-hide-vbar", "");
               set_int(sbvis_v, 0);
            }
         }
         v = get_int(sbvis_h);
         if (v) {
            v = get_int(sbalways_h);
            if (!v) {
               emit("do-hide-hbar", "");
               set_int(sbvis_h, 0);
            }
         }
         set_int(sbvis_timer, 0);
         return 0;
      }
   }
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
            color: 255 255 255 0;
         }
      }
      part { name: "clipper";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
         }
      }
      part { name: "elm.swallow.content";
         clip_to: "clipper";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
         }
      }
      part { name: "disabler";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "clipper";
            rel2.to: "clipper";
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "load";
         signal: "load";
         source: "";
         script {
            set_int(sbvis_h, 0);
            set_int(sbvis_v, 0);
            set_int(sbalways_v, 0);
            set_int(sbalways_h, 0);
            set_int(sbvis_timer, 0);
            emit("reload", "elm");
         }
      }

      program { name: "vbar_show_always";
         signal: "elm,action,show_always,vbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_v);
            if (!v) {
               set_int(sbalways_v, 1);
               v = get_int(sbvis_v);
               if (!v) {
                  emit("do-show-vbar", "");
                  set_int(sbvis_v, 1);
               }
            }
         }
      }
      program { name: "vbar_show_notalways";
         signal: "elm,action,show_notalways,vbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_v);
            if (v) {
               set_int(sbalways_v, 0);
               v = get_int(sbvis_v);
               if (!v) {
                  emit("do-hide-vbar", "");
                  set_int(sbvis_v, 0);
               }
            }
         }
      }
      program { name: "hbar_show_always";
         signal: "elm,action,show_always,hbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_h);
            if (!v) {
               set_int(sbalways_h, 1);
               v = get_int(sbvis_h);
               if (!v) {
                  emit("do-show-hbar", "");
                  set_int(sbvis_h, 1);
               }
            }
         }
      }
      program { name: "hbar_show_notalways";
         signal: "elm,action,show_notalways,hbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_h);
            if (v) {
               set_int(sbalways_h, 0);
               v = get_int(sbvis_h);
               if (!v) {
                  emit("do-hide-hbar", "");
                  set_int(sbvis_h, 0);
               }
            }
         }
      }
      program { name: "scroll";
         signal: "elm,action,scroll";
         source: "elm";
         script {
            new v;
            v = get_int(sbvis_v);
            v |= get_int(sbalways_v);
            if (!v) {
               emit("do-show-vbar", "");
               set_int(sbvis_v, 1);
            }
            v = get_int(sbvis_h);
            v |= get_int(sbalways_h);
            if (!v) {
               emit("do-show-hbar", "");
               set_int(sbvis_h, 1);
            }
            v = get_int(sbvis_timer);
            if (v > 0) cancel_timer(v);
            v = timer(1.0, "timer0", 0);
            set_int(sbvis_timer, v);
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "disabler";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "disabler";
      }
      program { name: "show";
         signal: "show";
         source: "";
         script {
            new v;
            emit("do-show-vbar", "");
            set_int(sbvis_v, 1);
            v = get_int(sbalways_v);
            if (!v) {
              v = get_int(sbvis_timer);
              if (v > 0) cancel_timer(v);
              v = timer(1.0, "timer0", 0);
              set_int(sbvis_timer, v);
            }
            emit("do-show-hbar", "");
            set_int(sbvis_h, 1);
            v = get_int(sbalways_h);
            if (!v) {
              v = get_int(sbvis_timer);
              if (v > 0) cancel_timer(v);
              v = timer(1.0, "timer0", 0);
              set_int(sbvis_timer, v);
            }
         }
      }
   }
}

group { name: "elm/scroller/contents/default";
   parts {
      part { name: "elm.swallow.content";
         type: SWALLOW;
         description { state: "default" 0.0;
         }
      }
      part { name: "elm.swallow.content_r";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0.0 0.0;
            rel1 {
                relative: 1.0 0.0;
                to: "elm.swallow.content";
            }
            rel2 {
                relative: 1.0 1.0;
                to: "elm.swallow.content";
            }
         }
      }
      part { name: "elm.swallow.content_b";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.0 0.0;
            rel1 {
                relative: 0.0 1.0;
                to: "elm.swallow.content";
            }
            rel2 {
                relative: 1.0 1.0;
                to: "elm.swallow.content";
            }
         }
      }
      part { name: "elm.swallow.content_rb";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 1;
            align: 0.0 0.0;
            rel1 {
                relative: 1.0 1.0;
                to: "elm.swallow.content";
            }
            rel2 {
                relative: 1.0 1.0;
                to: "elm.swallow.content";
            }
         }
      }
   }
}