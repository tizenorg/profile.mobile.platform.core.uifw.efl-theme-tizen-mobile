/****************************************************************************
Document: Tizen TV_General Guide_GUI Guideline_v1.0_140508_1.ppt, Page no. 76,
*****************************************************************************/
#define CHECK_SIZE 38 38
#define CHECK_FONT_SIZE 28

group { name: "elm/check/base/default";
   images {
      image: "checkbox_check_foc.png" COMP;
      image: "checkbox_check_nor.png" COMP;
      image: "checkbox_uncheck_nor.png" COMP;
      image: "checkbox_uncheck_foc.png" COMP;
   }
   data.item: "focus_highlight" "on";
   script {
      public is_focus=0;
      public set_focus() {
         set_int(is_focus, 1);
      }
      public unset_focus() {
         set_int(is_focus, 0);
      }
      public set_check_set() {
         if (get_int(is_focus)) {
            set_state(PART:"check", "highlight", 0.0);
            set_state(PART:"bg", "highlight", 0.0);
         }
         else {
            set_state(PART:"check", "visible", 0.0);
            set_state(PART:"bg", "default", 0.0);
         }
      }
      public set_check_unset() {
         set_state(PART:"check", "default", 0.0);
         if (get_int(is_focus)) {
            set_state(PART:"bg", "highlight", 0.0);
         }
         else {
            set_state(PART:"bg", "default", 0.0);
         }
      }
   }
   parts {
      part { name: "bg"; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel2.relative: 0.0 1.0;
            align: 0.0 0.5;
            min: CHECK_SIZE;
            max: CHECK_SIZE;
            aspect: 1.0 1.0;
            aspect_preference: VERTICAL;
            image.normal: "checkbox_uncheck_nor.png";
         }
         description { state: "highlight" 0.0;
            inherit: "default" 0.0;
            image.normal: "checkbox_uncheck_foc.png";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 51;
         }
      }
      part { name: "check"; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1 {
               to: "bg";
            }
            rel2 {
               to: "bg";
            }
            image.normal: "checkbox_check_nor.png";
            visible: 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "highlight" 0.0;
            inherit: "default" 0.0;
            image.normal: "checkbox_check_foc.png";
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 51;
            visible: 1;
         }
      }
      part { name: "elm.swallow.content"; type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            align: 0.0 0.5;
            fixed: 1 0;
            rel1.to_x: "bg";
            rel1.relative: 1.0 0.0;
            rel2.to_x: "bg";
            rel2.relative: 1.0 1.0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            fixed: 1 0;
            visible: 1;
            aspect: 1.0 1.0;
            min: CHECK_SIZE;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 128;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 128;
            fixed: 1 0;
            visible: 1;
            aspect: 1.0 1.0;
         }
      }
      part { name: "elm.text"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            rel1.to_x: "elm.swallow.content";
            rel1.relative: 1.0 0.0;
            rel2.to: "pad.elm.text";
            rel2.relative: 0.0 1.0;
            color: 0 0 0 255;
            text {
               font: FONT_L;
               size: CHECK_FONT_SIZE;
               min: 0 1;
               align: -1.0 0.5;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            text.min: 1 1;
            text.ellipsis: -1;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: 0 0 0 128;
            color3: 0 0 0 0;
         }
         description { state: "disabled_visible" 0.0;
            inherit: "default" 0.0;
            color: 0 0 0 128;
            color3: 0 0 0 0;
            visible: 1;
            text.min: 1 1;
            text.ellipsis: -1;
         }
      }
      part { name: "pad.elm.text"; type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 1 0;
            max: 1 0;
            fixed: 1 0;
            rel1.relative: 1.0 1.0;
            align: 1.0 0.5;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            min: 12 0;
            max: 12 0;
         }
      }
      part { name: "events"; type: RECT;
         ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "disabler"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "click";
         signal: "mouse,clicked,1"; source: "events";
         action: SIGNAL_EMIT "elm,action,check,toggle" "";
      }
      program { name: "check_on";
         signal: "elm,state,check,on"; source: "elm";
         script{
            set_check_set();
         }
      }
      program { name: "check_off";
         signal: "elm,state,check,off"; source: "elm";
         script{
            set_check_unset();
         }
      }
      program { name: "text_show";
         signal: "elm,state,text,visible"; source: "elm";
         action:  STATE_SET "visible" 0.0;
         target: "elm.text";
         target: "pad.elm.text";
      }
      program { name: "text_hide";
         signal: "elm,state,text,hidden"; source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "icon_show";
         signal: "elm,state,icon,visible"; source: "elm";
         action:  STATE_SET "visible" 0.0;
         target: "elm.swallow.content";
      }
      program { name: "icon_hide";
         signal: "elm,state,icon,hidden"; source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "elm.swallow.content";
      }
      program { name: "focus";
         signal: "elm,action,focus"; source: "elm";
         script {
            set_focus();
         }
         after: "enable_focus";
      }
      program { name: "enable_focus";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"check", st, 30, vl);
            if (!strcmp(st, "visible"))
               set_state(PART:"check", "highlight", 0.0);

            get_state(PART:"bg", st, 30, vl);
            if (!strcmp(st, "default"))
               set_state(PART:"bg", "highlight", 0.0);
         }
      }
      program { name: "unfocus";
         signal: "elm,action,unfocus"; source: "elm";
         script {
            unset_focus();
         }
         after: "disable_focus";
      }
      program { name: "disable_focus";
         script {
         new st[31];
         new Float:vl;
         get_state(PART:"check", st, 30, vl);
         if (!strcmp(st, "highlight"))
            set_state(PART:"check", "visible", 0.0);

         get_state(PART:"bg", st, 30, vl);
            if (!strcmp(st, "highlight"))
               set_state(PART:"bg", "default", 0.0);
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled"; source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "bg";
         target: "disabler";
         after: "disable_text";
      }
      program { name: "disable_text";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "visible"))
               set_state(PART:"elm.text", "disabled_visible", 0.0);
            else
               set_state(PART:"elm.text", "disabled", 0.0);

            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "visible"))
               set_state(PART:"elm.swallow.content", "disabled_visible", 0.0);
            else
               set_state(PART:"elm.swallow.content", "disabled", 0.0);

            get_state(PART:"check", st, 30, vl);
            if (!strcmp(st, "visible"))
               set_state(PART:"check", "disabled_visible", 0.0);
            else
               set_state(PART:"check", "disabled", 0.0);
         }
      }
      program { name: "enable";
         signal: "elm,state,enabled"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "bg";
         target: "disabler";
         after: "enable_text";
      }
      program { name: "enable_text";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "disabled_visible"))
               set_state(PART:"elm.text", "visible", 0.0);
            else
               set_state(PART:"elm.text", "default", 0.0);

            get_state(PART:"elm.swallow.content", st, 30, vl);
            if (!strcmp(st, "visible"))
               set_state(PART:"elm.swallow.content", "visible", 0.0);
            else
               set_state(PART:"elm.swallow.content", "default", 0.0);

            get_state(PART:"check", st, 30, vl);
            if (!strcmp(st, "disabled_visible"))
               set_state(PART:"check", "visible", 0.0);
            else
               set_state(PART:"check", "default", 0.0);
         }
      }
   }
}
