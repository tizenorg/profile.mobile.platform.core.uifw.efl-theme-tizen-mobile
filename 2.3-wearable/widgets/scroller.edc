/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * vim:ts=3
*/
#define OVERSCROLL_EFFECT_IMAGES\
      image: "bouncing_top_edge.png" COMP;\
      image: "bouncing_top_glow.png" COMP;\
      image: "bouncing_bottom_edge.png" COMP;\
      image: "bouncing_bottom_glow.png" COMP;\
      image: "bouncing_left_edge.png" COMP;\
      image: "bouncing_left_glow.png" COMP;\
      image: "bouncing_right_edge.png" COMP;\
      image: "bouncing_right_glow.png" COMP;

#define OVERSCROLL_EFFECT_DESCRIPTIONS(NAME)\
         OVERSCROLL_EFFECT_DESCRIPTION_EDJE(NAME)\
         OVERSCROLL_EFFECT_DESCRIPTION_GLOW(NAME)\
         OVERSCROLL_EFFECT_DESCRIPTION_GLOW_E(NAME)

#define OVERSCROLL_EFFECT_DESCRIPTION_EDJE(NAME)\
         description { state: "show_effect" 0.0;\
            inherit: "default" 0.0;\
            visible: 1;\
            image.normal: "bouncing_"NAME"_edge.png";\
            color_class: "B019"; \
         }
#define OVERSCROLL_EFFECT_DESCRIPTION_GLOW(NAME)\
         description { state: "show_effect" 0.01;\
            inherit: "default" 0.0;\
            visible: 1;\
            image.normal: "bouncing_"NAME"_glow.png";\
            color_class: "B018E";\
         }
#define OVERSCROLL_EFFECT_DESCRIPTION_GLOW_E(NAME)\
         description { state: "show_effect" 0.02;\
            inherit: "default" 0.0;\
            visible: 1;\
            image.normal: "bouncing_"NAME"_glow.png";\
            color_class: "B018E";\
         }
#define OVERSCROLL_EFFECT_FUNCTION(NAME, SRC)\
      program { name: "start_effect_"NAME;\
          script {\
              new st[31];\
              new Float:state;\
              get_state(PART:SRC, st, 30, state);\
              if (state == 0.0)\
              {\
                state += 0.01;\
                set_state(PART:SRC, "show_effect", state);\
                run_program(PROGRAM:"delay_"NAME);\
              }\
              else if (state == 0.01  && !get_int(effect_hold))\
              {\
                state += 0.01;\
                set_state(PART:SRC, "show_effect", state);\
                run_program(PROGRAM:"delay_"NAME);\
              }\
              else if (state == 0.02 && !get_int(effect_hold))\
              {\
                set_int(effect_on, 0);\
                set_state(PART:SRC, "hidden", 0.0);\
                run_program(PROGRAM:"end_action_"NAME);\
              }\
              else\
              {\
                run_program(PROGRAM:"delay_"NAME);\
              }\
          }\
      }\
      program { name: "content_move_"NAME;\
         signal: "elm,action,scroll";\
         source: "elm";\
         script {\
            new st[31];\
            new Float:state;\
            get_state(PART:SRC, st, 30, state);\
            if (!strcmp(st, "show_effect"))\
              {\
                set_int(effect_on, 0);\
                set_state(PART:SRC, "hidden", 0.0);\
                run_program(PROGRAM:"end_action_"NAME);\
              }\
         }\
      }\
      program { name: "delay_"NAME;\
          in: 0.033 0.0;\
          after: "start_effect_"NAME;\
      }\
      program { name: "end_action_"NAME;\
         action: ACTION_STOP;\
         target: "start_effect_"NAME;\
         target: "delay_"NAME;\
      }\
      program { name: "edge_"NAME;\
         signal: "elm,edge,"NAME;\
         source: "elm";\
         script {\
             if (!get_int(effect_on)) {\
                 set_int(effect_on, 1);\
                 if (get_int(mouse_down))\
                   set_int(effect_hold, 1);\
                 set_state(PART:SRC, "show_effect", 0.0);\
                 run_program(PROGRAM:"start_effect_"NAME);\
             }\
         }\
      }

group { name: "elm/scroller/base/default";
   alias: "elm/gengrid/base/no_effect";

   data {
      item: "focus_highlight" "on";
   }

   script {
      public sbvis_v, sbvis_h, sbalways_v, sbalways_h, sbvis_timer;
      public sh_v, sh_h;
      public effect_on, effect_top, effect_bottom, effect_left, effect_right, effect_hold, mouse_down;
      public anim1_top, anim2_top, anim1_bottom, anim2_bottom;
      public anim1_left, anim2_left, anim1_right, anim2_right;
      public timer0(val) {
         new v;
         v = get_int(sbvis_v);
         if (v) {
            v = get_int(sbalways_v);
            if (!v) {
               emit("do-hide-vbar", "");
               set_int(sbvis_v, 0);
            }
         }
         v = get_int(sbvis_h);
         if (v) {
            v = get_int(sbalways_h);
            if (!v) {
               emit("do-hide-hbar", "");
               set_int(sbvis_h, 0);
            }
         }
         set_int(sbvis_timer, 0);
         return 0;
      }
   }
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
            color: 255 255 255 0;
         }
      }
      part { name: "clipper";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
         }
      }
      part { name: "elm.swallow.content";
         clip_to: "clipper";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
         }
      }
      part { name: "shadow_top";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
         }
      }
      part { name: "shadow_bottom";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
         }
      }
      part { name: "shadow_left";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
         }
      }
      part { name: "shadow_right";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
         }
      }

      part { name: "sb_vbar_clip_master";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "sb_vbar_clip";
         clip_to: "sb_vbar_clip_master";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "sb_vbar_right_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SCROLLER_VBAR_PADDING_RIGHT_SIZE 0;
            rel1 {
               relative: 1.0 0.0;
               to: "elm.swallow.content";
            }
            rel2 {
               relative: 1.0 1.0;
               to: "elm.swallow.content";
            }
            fixed: 1 0;
            align: 1.0 0.0;
         }
      }
      part { name: "sb_vbar_top_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SCROLLER_VBAR_PADDING_TOP_SIZE;
            max: 0 SCROLLER_VBAR_PADDING_TOP_SIZE;
            rel2 {
               relative: 0.0 0.0;
               to: "sb_vbar_right_padding";
            }
            fixed: 1 1;
            align: 1.0 0.0;
         }
      }
      part { name: "sb_vbar_bottom_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SCROLLER_VBAR_PADDING_BOTTOM_SIZE;
            max: 0 SCROLLER_VBAR_PADDING_BOTTOM_SIZE;
            rel2 {
               relative: 0.0 1.0;
               to: "sb_vbar_right_padding";
            }
            fixed: 1 1;
            align: 1.0 1.0;
         }
      }
      part { name: "sb_vbar_left_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SCROLLER_VBAR_PADDING_LEFT_SIZE 0;
            rel1 {
               relative: 0.0 0.0;
               to: "sb_vbar";
            }
            rel2 {
               relative: 0.0 1.0;
               to: "sb_vbar";
            }
            fixed: 1 0;
            align: 1.0 0.0;
         }
      }
      part { name: "sb_vbar";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            visible: 0;
            min: SCROLLER_VBAR_MIN_SIZE;
            align: 1.0 0.0;
            rel1 {
               relative: 0.0 1.0;
               to: "sb_vbar_top_padding";
            }
            rel2 {
               relative: 1.0 0.0;
               to: "sb_vbar_bottom_padding";
            }
         }
      }
      part { name: "elm.dragable.vbar";
         type: RECT;
         clip_to: "sb_vbar_clip";
         mouse_events: 0;
         scale: 1;
         dragable {
            x: 0 0 0;
            y: 1 1 0;
            confine: "sb_vbar";
         }
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SCROLLER_VBAR_MIN_SIZE;
            max: SCROLLER_VBAR_MAX_SIZE;
            rel1 {
               relative: 0.5  0.5;
               to: "sb_vbar";
            }
            rel2 {
               relative: 0.5  0.5;
               to: "sb_vbar";
            }
            color_class : "B071";
         }
      }
      part { name: "sb_hbar_clip_master";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "sb_hbar_clip";
         clip_to: "sb_hbar_clip_master";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "sb_hbar_bottom_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SCROLLER_HBAR_PADDING_BOTTOM_SIZE;
            rel1 {
               relative: 0.0 1.0;
               to: "elm.swallow.content";
            }
            rel2 {
               relative: 1.0 1.0;
               to: "elm.swallow.content";
            }
            fixed: 1 1;
            align: 0.0 1.0;
         }
      }
      part { name: "sb_hbar_left_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SCROLLER_HBAR_PADDING_LEFT_SIZE 0;
            max: SCROLLER_HBAR_PADDING_LEFT_SIZE 0;
            rel2 {
               relative: 0.0 0.0;
               to: "sb_hbar_bottom_padding";
            }
            fixed: 1 1;
            align: 0.0 1.0;
         }
      }
      part { name: "sb_hbar_right_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SCROLLER_HBAR_PADDING_RIGHT_SIZE 0;
            max: SCROLLER_HBAR_PADDING_RIGHT_SIZE 0;
            rel2 {
               relative: 1.0 0.0;
               to: "sb_hbar_bottom_padding";
            }
            fixed: 1 1;
            align: 1.0 1.0;
         }
      }
      part { name: "sb_hbar_top_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SCROLLER_HBAR_PADDING_TOP_SIZE;
            rel1 {
               relative: 0.0 0.0;
               to: "sb_hbar";
            }
            rel2 {
               relative: 1.0 0.0;
               to: "sb_hbar";
            }
            fixed: 0 1;
            align: 0.0 1.0;
         }
      }
      part { name: "sb_hbar";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            visible: 0;
            min: SCROLLER_HBAR_MIN_SIZE;
            align: 0.0 1.0;
            rel1 {
               relative: 1.0 0.0;
               to: "sb_hbar_left_padding";
            }
            rel2 {
               relative: 0.0 1.0;
               to: "sb_hbar_right_padding";
            }
         }
      }
      part { name: "elm.dragable.hbar";
         type: RECT;
         clip_to: "sb_hbar_clip";
         mouse_events: 0;
         scale: 1;
         dragable {
            x: 1 1 0;
            y: 0 0 0;
            confine: "sb_hbar";
         }
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SCROLLER_HBAR_MIN_SIZE;
            max: SCROLLER_HBAR_MAX_SIZE;
            rel1 {
               relative: 0.5  0.5;
               to: "sb_hbar";
            }
            rel2 {
               relative: 0.5  0.5;
               to: "sb_hbar";
            }
            color_class: "B071";
         }
      }
      part { name: "disabler";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "clipper";
            rel2.to: "clipper";
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 128 128 128 128;
         }
      }
   }
   programs {
      program { name: "load";
         signal: "load";
         source: "";
         script {
            set_state(PART:"sb_hbar_clip", "hidden", 0.0);
            set_state(PART:"sb_vbar_clip", "hidden", 0.0);
            set_int(sbvis_h, 0);
            set_int(sbvis_v, 0);
            set_int(sbalways_v, 0);
            set_int(sbalways_h, 0);
            set_int(sbvis_timer, 0);
            emit("reload", "elm");
         }
      }

      program { name: "vbar_show";
         signal: "elm,action,show,vbar";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "sb_vbar_clip_master";
      }
      program { name: "vbar_hide";
         signal: "elm,action,hide,vbar";
         source: "elm";
         action:  STATE_SET "hidden" 0.0;
         target: "sb_vbar_clip_master";
      }
      program { name: "vbar_show_always";
         signal: "elm,action,show_always,vbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_v);
            if (!v) {
               set_int(sbalways_v, 1);
               v = get_int(sbvis_v);
               if (!v) {
                  emit("do-show-vbar", "");
                  set_int(sbvis_v, 1);
               }
            }
         }
      }
      program { name: "vbar_show_notalways";
         signal: "elm,action,show_notalways,vbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_v);
            if (v) {
               set_int(sbalways_v, 0);
               v = get_int(sbvis_v);
               if (!v) {
                  emit("do-hide-vbar", "");
                  set_int(sbvis_v, 0);
               }
            }
         }
      }
      program { name: "sb_vbar_show";
         signal: "do-show-vbar";
         source: "";
         action:  STATE_SET "default" 0.0;
         transition: LINEAR 0.5;
         target: "sb_vbar_clip";
      }
      program { name: "sb_vbar_hide";
         signal: "do-hide-vbar";
         source: "";
         action:  STATE_SET "hidden" 0.0;
         transition: LINEAR 0.5;
         target: "sb_vbar_clip";
      }

      program { name: "hbar_show";
         signal: "elm,action,show,hbar";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "sb_hbar_clip_master";
      }
      program { name: "hbar_hide";
         signal: "elm,action,hide,hbar";
         source: "elm";
         action:  STATE_SET "hidden" 0.0;
         target: "sb_hbar_clip_master";
      }
      program { name: "hbar_show_always";
         signal: "elm,action,show_always,hbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_h);
            if (!v) {
               set_int(sbalways_h, 1);
               v = get_int(sbvis_h);
               if (!v) {
                  emit("do-show-hbar", "");
                  set_int(sbvis_h, 1);
               }
            }
         }
      }
      program { name: "hbar_show_notalways";
         signal: "elm,action,show_notalways,hbar";
         source: "elm";
         script {
            new v;
            v = get_int(sbalways_h);
            if (v) {
               set_int(sbalways_h, 0);
               v = get_int(sbvis_h);
               if (!v) {
                  emit("do-hide-hbar", "");
                  set_int(sbvis_h, 0);
               }
            }
         }
      }
      program { name: "sb_hbar_show";
         signal: "do-show-hbar";
         source: "";
         action:  STATE_SET "default" 0.0;
         transition: LINEAR 0.5;
         target: "sb_hbar_clip";
      }
      program { name: "sb_hbar_hide";
         signal: "do-hide-hbar";
         source: "";
         action:  STATE_SET "hidden" 0.0;
         transition: LINEAR 0.5;
         target: "sb_hbar_clip";
      }

      program { name: "scroll";
         signal: "elm,action,scroll";
         source: "elm";
         script {
            new v;
            v = get_int(sbvis_v);
            v |= get_int(sbalways_v);
            if (!v) {
               emit("do-show-vbar", "");
               set_int(sbvis_v, 1);
            }
            v = get_int(sbvis_h);
            v |= get_int(sbalways_h);
            if (!v) {
               emit("do-show-hbar", "");
               set_int(sbvis_h, 1);
            }
            v = get_int(sbvis_timer);
            if (v > 0) cancel_timer(v);
            v = timer(1.0, "timer0", 0);
            set_int(sbvis_timer, v);
         }
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "disabler";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "disabler";
      }
      program { name: "show";
         signal: "show";
         source: "";
         script {
            new v;
            emit("do-show-vbar", "");
            set_int(sbvis_v, 1);
            v = get_int(sbalways_v);
            if (!v) {
              v = get_int(sbvis_timer);
              if (v > 0) cancel_timer(v);
              v = timer(1.0, "timer0", 0);
              set_int(sbvis_timer, v);
            }
            emit("do-show-hbar", "");
            set_int(sbvis_h, 1);
            v = get_int(sbalways_h);
            if (!v) {
              v = get_int(sbvis_timer);
              if (v > 0) cancel_timer(v);
              v = timer(1.0, "timer0", 0);
              set_int(sbvis_timer, v);
            }
         }
      }
   }
}

group { name: "elm/scroller/base/effect";
   alias: "elm/gengrid/base/default";
   inherit: "elm/scroller/base/default";

   images {
      OVERSCROLL_EFFECT_IMAGES
   }

   parts {
      part { name: "shadow_top";
         type: IMAGE;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 0 100;
            fixed: 1 1;
            align: 0.5 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
            visible: 0;
            image {
               normal: "bouncing_top_edge.png";
            }
         }
         OVERSCROLL_EFFECT_DESCRIPTIONS("top")
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "shadow_bottom";
         type: IMAGE;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 0 100;
            fixed: 1 1;
            align: 0.5 1.0;
            rel1.relative: 0.0 1.0;
            rel2.relative: 1.0 1.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel1.offset: 0 0;
            rel2.offset: -1 -2;
            visible: 0;
            image {
               normal: "bouncing_bottom_edge.png";
            }
         }
         OVERSCROLL_EFFECT_DESCRIPTIONS("bottom")
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "shadow_left";
         type: IMAGE;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 100 0;
            fixed: 1 1;
            align: 0.0 0.5;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 1.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
            visible: 0;
            image {
               normal: "bouncing_left_edge.png";
            }
         }
         OVERSCROLL_EFFECT_DESCRIPTIONS("left")
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
      part { name: "shadow_right";
         type: IMAGE;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            min: 100 0;
            fixed: 1 1;
            align: 1.0 0.5;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 1.0;
            rel1.to: "bg";
            rel2.to: "bg";
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
            visible: 0;
            image {
               normal: "bouncing_right_edge.png";
            }
         }
         OVERSCROLL_EFFECT_DESCRIPTIONS("right")
         description { state: "hidden" 0.0;
            visible: 0;
            color: 255 255 255 0;
         }
      }
   }
   programs {
      program { name: "load";
         script {
            set_state(PART:"sb_hbar_clip", "hidden", 0.0);
            set_state(PART:"sb_vbar_clip", "hidden", 0.0);
            set_state(PART:"shadow_top", "hidden", 0.0);
            set_state(PART:"shadow_bottom", "hidden", 0.0);
            set_state(PART:"shadow_left", "hidden", 0.0);
            set_state(PART:"shadow_right", "hidden", 0.0);
            set_int(sbvis_h, 0);
            set_int(sbvis_v, 0);
            set_int(sbalways_v, 0);
            set_int(sbalways_h, 0);
            set_int(sbvis_timer, 0);
            set_int(sh_v, 0);
            emit("reload", "elm");
         }
      }
      program { name: "scroll";
         signal: "elm,action,scroll";
         source: "elm";
         script {
            new v;
            v = get_int(sbvis_v);
            v |= get_int(sbalways_v);
            if (!v) {
               emit("do-show-vbar", "");
               set_int(sbvis_v, 1);
            }
            v = get_int(sbvis_h);
            v |= get_int(sbalways_h);
            if (!v) {
               emit("do-show-hbar", "");
               set_int(sbvis_h, 1);
            }
            v = get_int(sbvis_timer);
            if (v > 0) cancel_timer(v);
            v = timer(1, "timer0", 0);
            set_int(sbvis_timer, v);
         }
      }
      OVERSCROLL_EFFECT_FUNCTION("top", "shadow_top")
      OVERSCROLL_EFFECT_FUNCTION("bottom", "shadow_bottom")
      OVERSCROLL_EFFECT_FUNCTION("left", "shadow_left")
      OVERSCROLL_EFFECT_FUNCTION("right", "shadow_right")
      program { name: "content_move";
         signal: "elm,state,mouse,move";
         source: "elm";
         script {
            set_int(mouse_down, 1);
         }
      }
      program { name: "content_press";
         signal: "elm,state,mouse,down";
         source: "elm";
         script {
            set_int(mouse_down, 1);
         }
      }
      program { name: "content_unpress";
         signal: "elm,state,mouse,up";
         source: "elm";
         script {
            set_int(mouse_down, 0);
            set_int(effect_hold, 0);
         }
      }
   }
}

group { name: "elm/scroller/contents/default";
   parts {
      part { name: "elm.swallow.content";
         type: SWALLOW;
         description { state: "default" 0.0;
         }
      }
      part { name: "elm.swallow.content_r";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0.0 0.0;
            rel1 {
                relative: 1.0 0.0;
                to: "elm.swallow.content";
            }
            rel2 {
                relative: 1.0 1.0;
                to: "elm.swallow.content";
            }
         }
      }
      part { name: "elm.swallow.content_b";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.0 0.0;
            rel1 {
                relative: 0.0 1.0;
                to: "elm.swallow.content";
            }
            rel2 {
                relative: 1.0 1.0;
                to: "elm.swallow.content";
            }
         }
      }
      part { name: "elm.swallow.content_rb";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 1;
            align: 0.0 0.0;
            rel1 {
                relative: 1.0 1.0;
                to: "elm.swallow.content";
            }
            rel2 {
                relative: 1.0 1.0;
                to: "elm.swallow.content";
            }
         }
      }
   }
}

group { name: "elm/genlist/base/no_effect";
   alias: "elm/list/base/no_effect";
   inherit: "elm/scroller/base/default";

   parts {
      part { name: "bg";
         description { state: "default" 0.0;
            color: 255 255 255 255;
            color_class: "B011";
         }
      }
   }
}

group { name: "elm/genlist/base/default";
   alias: "elm/list/base/default";
   inherit: "elm/scroller/base/effect";

   parts {
      part { name: "bg";
         description { state: "default" 0.0;
            color: 255 255 255 255;
            color_class: "B011";
         }
      }
   }
}


group { name: "elm/genlist/base/transparent";
   alias: "elm/genlist/base/popup";
   alias: "elm/list/base/transparent";
   alias: "elm/list/base/popup";
   inherit: "elm/genlist/base/default";

   parts {
      part { name: "bg";
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
   }
}
