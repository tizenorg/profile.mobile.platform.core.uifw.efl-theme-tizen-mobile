/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// FIXME: There is no UI images for entry !!!
// All images from redwood dark theme

#define ENTRY_BLOCK_HANDLE_SOURCE7 "elm/entry/selection/block_handle_left"
#define ENTRY_BLOCK_HANDLE_SOURCE8 "elm/entry/selection/block_handle_right"
#define ENTRY_CURSOR_HANDLE_SOURCE9 "elm/entry/cursor_handle/default"
#define ENTRY_BLOCK_HANDLE_SOURCE10 "elm/entry/selection/block_handle_edge_left"
#define ENTRY_BLOCK_HANDLE_SOURCE11 "elm/entry/selection/block_handle_edge_right"

group { name: "elm/entry/base/default";
   alias: "elm/entry/base-mixedwrap/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   styles {
      style { name: "entry_textblock_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_TEXT_COLOR" left_margin=1 right_margin=2 wrap=mixed text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR" color="ENTRY_PREEDIT_TEXT_COLOR" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
      }
      style { name: "entry_textblock_disabled_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_DISABLED_TEXT_COLOR" left_margin=1 right_margin=2 wrap=mixed text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR" color="ENTRY_PREEDIT_TEXT_COLOR" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
      }
      style { name: "entry_textblock_guide_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_GUIDE_TEXT_COLOR" left_margin=1 right_margin=2 wrap=mixed text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "elm.text";
         action: PLAY_SAMPLE "touch_sound" 1.0;
      }
   }
}

group { name: "elm/entry/base-charwrap/default";
   alias: "elm/entry/base/char_wrap";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   styles {
      style { name: "entry_textblock_char_wrap_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_TEXT_COLOR" wrap=char left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR" color="ENTRY_PREEDIT_TEXT_COLOR" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
      }
      style { name: "entry_textblock_char_wrap_disabled_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_DISABLED_TEXT_COLOR" wrap=char left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR" color="ENTRY_PREEDIT_TEXT_COLOR" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
      }
      style { name: "entry_textblock_char_wrap_guide_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_GUIDE_TEXT_COLOR" wrap=char left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_char_wrap_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_char_wrap_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_char_wrap_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
	 program { name: "focus";
        signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
     program { name: "gdisable";
        signal: "elm,guide,disabled";
        source: "elm";
        action: STATE_SET "hidden" 0.0;
        target: "elm.guide";
     }
     program { name: "genable";
        signal: "elm,guide,enabled";
        source: "elm";
        action: STATE_SET "default" 0.0;
        target: "elm.guide";
     }
     program { name: "touch_snd";
        signal: "mouse,clicked,1";
        source: "elm.text";
        action: PLAY_SAMPLE "touch_sound" 1.0;
     }
  }
}

group { name: "elm/entry/base-nowrap/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            text {
               style: "entry_textblock_style";
               min: 1 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "elm.text";
         action: PLAY_SAMPLE "touch_sound" 1.0;
      }
   }
}

group { name: "elm/entry/base-single/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   styles {
      style { name: "entry_single_textblock_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_TEXT_COLOR" wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR" color="ENTRY_PREEDIT_TEXT_COLOR" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
      }
      style { name: "entry_single_textblock_disabled_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_DISABLED_TEXT_COLOR" wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link " "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR" color="ENTRY_PREEDIT_TEXT_COLOR" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR;
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color="ENTRY_PREEDIT_UNDERLINE_COLOR;
      }
      style { name: "entry_single_textblock_guide_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_GUIDE_TEXT_COLOR" wrap=none left_margin=1 right_margin=3 text_class=entry ellipsis=1.0";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_single_textblock_guide_style";
               min: 0 1;
               max: 0 0;
               align: 0.0 0.5;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            text {
               style: "entry_single_textblock_style";
               min: 1 1;
               max: 0 0;
               align: 0.0 0.5;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "elm.text";
         action: PLAY_SAMPLE "touch_sound" 1.0;
      }
   }
}

group { name: "elm/entry/base-single-noedit/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_single_textblock_guide_style";
               min: 0 1;
               max: 0 1;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source5: "elm/entry/anchor/default"; // anchor under
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            text {
               style: "entry_single_textblock_style";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
   }
}

group { name: "elm/entry/base-noedit/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "entry_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source5: "elm/entry/anchor/default"; // anchor under
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
   }
}

   group { name: "elm/entry/base-noedit-charwrap/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
         part { name: "elm.guide";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "elm.text";
               rel2.to: "elm.text";
               text {
                  style: "entry_textblock_char_wrap_guide_style";
                  min: 0 1;
                  align: 0.0 0.0;
               }
            }
            description { state: "hidden" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: PLAIN;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 1;
	    source: "elm/entry/selection/default"; // selection under
	    //source2: "X"; // selection over
	    //source3: "X"; // cursor under
	    source5: "elm/entry/anchor/default"; // anchor under
	    source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
	    source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
	    source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
	    //source10: ""; // start edge selection
	    //source11: ""; // end edge selection
	    description { state: "default" 0.0;
               fixed: 1 0;
	       text {
		  style: "entry_textblock_char_wrap_style";
		  min: 0 1;
               align: 0.0 0.0;
	       }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_textblock_char_wrap_disabled_style";
	       }
	    }
	 }
      }
      programs {
         program { name: "focus";
           signal: "load";
	       source: "";
	       action: FOCUS_SET;
	       target: "elm.text";
	    }
	    program { name: "disable";
	       signal: "elm,state,disabled";
	       source: "elm";
	       action: STATE_SET "disabled" 0.0;
	       target: "elm.text";
	    }
	    program { name: "enable";
	       signal: "elm,state,enabled";
	       source: "elm";
	       action: STATE_SET "default" 0.0;
	       target: "elm.text";
	    }
        program { name: "gdisable";
           signal: "elm,guide,disabled";
           source: "elm";
           action: STATE_SET "hidden" 0.0;
           target: "elm.guide";
        }
        program { name: "genable";
           signal: "elm,guide,enabled";
           source: "elm";
           action: STATE_SET "default" 0.0;
           target: "elm.guide";
        }
      }
   }

   group { name: "elm/entry/base-noedit-mixedwrap/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
         part { name: "elm.guide";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "elm.text";
               rel2.to: "elm.text";
               text {
                  style: "entry_textblock_guide_style";
                  min: 0 1;
                  align: 0.0 0.0;
               }
            }
            description { state: "hidden" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            mouse_events: 1;
            scale: 1;
            entry_mode: PLAIN;
            select_mode: BLOCK_HANDLE;
            //cursor_mode: BEFORE;
            multiline: 1;
            source: "elm/entry/selection/default"; // selection under
            //source2: "X"; // selection over
            //source3: "X"; // cursor under
            source5: "elm/entry/anchor/default"; // anchor under
            source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
            source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
            source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
            //source10: ""; // start edge selection
            //source11: ""; // end edge selection
            description { state: "default" 0.0;
               fixed: 1 0;
               text {
                  style: "entry_textblock_style";
                  min: 0 1;
                  align: 0.0 0.0;
               }
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text {
                  style: "entry_textblock_disabled_style";
               }
            }
         }
      }
      programs {
         program { name: "focus";
            signal: "load";
            source: "";
            action: FOCUS_SET;
            target: "elm.text";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "elm.text";
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
         }
         program { name: "gdisable";
            signal: "elm,guide,disabled";
            source: "elm";
            action: STATE_SET "hidden" 0.0;
            target: "elm.guide";
         }
         program { name: "genable";
            signal: "elm,guide,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.guide";
         }
      }
   }

   group { name: "elm/entry/base-nowrap-noedit/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
         part { name: "elm.guide";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "elm.text";
               rel2.to: "elm.text";
               text {
                  style: "entry_textblock_guide_style";
                  min: 0 1;
                  align: 0.0 0.0;
               }
            }
            description { state: "hidden" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: PLAIN;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 1;
	    source: "elm/entry/selection/default"; // selection under
	    //source2: "X"; // selection over
	    //source3: "X"; // cursor under
	    source5: "elm/entry/anchor/default"; // anchor under
	    source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
	    source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
	    source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
	    //source10: ""; // start edge selection
	    //source11: ""; // end edge selection
	    description { state: "default" 0.0;
	       text {
		  style: "entry_textblock_style";
		  min: 1 1;
               align: 0.0 0.0;
	       }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_textblock_disabled_style";
	       }
	    }
	 }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
         program { name: "gdisable";
            signal: "elm,guide,disabled";
            source: "elm";
            action: STATE_SET "hidden" 0.0;
            target: "elm.guide";
         }
         program { name: "genable";
            signal: "elm,guide,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.guide";
         }
      }
   }

  group { name: "elm/entry/base-password/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
         part { name: "elm.guide";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1.to: "elm.text";
               rel2.to: "elm.text";
               text {
                  style: "entry_single_textblock_guide_style";
                  min: 0 1;
                  max: 0 1;
               }
            }
            description { state: "hidden" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: PASSWORD;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 0;
	    source: "elm/entry/selection/default"; // selection under
	    //source2: "X"; // selection over
	    //source3: "X"; // cursor under
	    source4: "elm/entry/cursor/default"; // cursorover
	    source5: "elm/entry/anchor/default"; // anchor under
	    source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
	    source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
	    source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
	    //source10: ""; // start edge selection
	    //source11: ""; // end edge selection
	    description { state: "default" 0.0;
	       text {
		  style: "entry_single_textblock_style";
		  repch: "•";
		  min: 1 1;
                  max: 0 1;
	       }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_single_textblock_disabled_style";
	       }
	    }
	 }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
         program { name: "gdisable";
            signal: "elm,guide,disabled";
            source: "elm";
            action: STATE_SET "hidden" 0.0;
            target: "elm.guide";
         }
         program { name: "genable";
            signal: "elm,guide,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.guide";
         }
         program { name: "touch_snd";
            signal: "mouse,clicked,1";
            source: "elm.text";
            action: PLAY_SAMPLE "touch_sound" 1.0;
         }
      }
   }

	group { name: "elm/entry/cursor/default";
		parts {
			part { name: "clip2";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					rel1.to: "clip";
					rel2.to: "clip";
				visible: 0;
				}
				description { state: "focused" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
			part { name: "clip";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				clip_to: "clip2";
				description { state: "default" 0.0;
					rel1.offset: -10 0;
					rel2.offset: 9 9;
				}
				description { state: "hidden" 0.0;
					inherit: "default" 0.0;
					visible: 0;
				}
			}
			part { name: "base";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				clip_to: "clip";
				description { state: "default" 0.0;
					min: 2 2;
					align: 0.5 1.0;
					color: 0 0 0 0;
				}
			}

			part { name: "glow";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				clip_to: "clip2";
				description { state: "default" 0.0;
					min: 3 0;
					fixed: 1 0;
					align: 0.5 0.5;
					rel1 {
						relative: 0.0  0.0;
						offset: 0 -2;
					}
					rel2 {
						relative: 0.0  1.0;
						offset: 0 -2;
					}
					color: ENTRY_CURSOR_COLOR;
				}
				description { state: "hidden" 0.0;
					inherit: "default" 0.0;
					color: 0 0 0 0;
				}
			}
		}
		programs {
			program { name: "show";
				action: STATE_SET "hidden" 0.0;
				in: 0.6 0.0;
				target: "glow";
				after: "show4";
			}
			program { name: "show4";
				action: STATE_SET "default" 0.0;
				in: 0.6 0.0;
				target: "glow";
				after: "show";
			}
			program { name: "focused";
				signal: "elm,action,focus";
				source: "elm";
				action: STATE_SET "focused" 0.0;
				target: "clip2";
				after: "show4";
			}
			program { name: "unfocused";
				signal: "elm,action,unfocus";
				source: "elm";
				action: STATE_SET "default" 0.0;
				target: "clip2";
				after: "stop_glow";
			}
			program { name: "stop_glow";
			action: ACTION_STOP;
				target: "show";
				target: "show4";
			}
			program { name: "show_cursor";
				signal: "elm,action,show,cursor";
				source: "elm";
				action: ACTION_STOP;
				target: "show";
				target: "show4";
				after: "show_cursor1";
			}
			program { name: "show_cursor1";
				action: STATE_SET "default" 0.0;
				target: "glow";
				after: "show";
			}
		}
	}


	group { name: "elm/entry/selection/default";
		parts {
			part { name: "bg";
				type: RECT;
				scale: 1;
				mouse_events: 0;
				description { state: "default" 0.0;
					color: ENTRY_SELECTION_BG_COLOR;
				}
			}
		}
	}

	group { name: "elm/entry/selection/block_handle_left";
		data.item: "height" "79";
		data.item: "gap" "32";
		images {
		  image: "copy&paste_Handler_left.png" COMP;
		  image: "copy&paste_Handler_left_01.png" COMP;
		  image: "copy&paste_Handler_left_reverse.png" COMP;
		  image: "copy&paste_Handler_left_01_reverse.png" COMP;
		}
		parts {
			part { name: "handle";
				mouse_events: 1;
				scale: 1;
				description { state: "default" 0.0;
					visible: 0;
					fixed: 1 1;
					align: 1 0;
					min: ENTRY_SELECTION_BLOCK_HANDLE_MIN_SIZE;
					max: ENTRY_SELECTION_BLOCK_HANDLE_MIN_SIZE;
					image {
						normal: "copy&paste_Handler_left_01.png";
						border: 0 0 0 0;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
				description { state: "top" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 1 1;
					image {
						normal: "copy&paste_Handler_left.png";
					}
				}
				description { state: "bottom_reversed" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 0 0;
					image {
						normal: "copy&paste_Handler_left_01_reverse.png";
					}
				}
				description { state: "top_reversed" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 0 1;
					image {
						normal: "copy&paste_Handler_left_reverse.png";
					}
				}
			}
		}
		script {
			public handler_ontop;
			public handler_focused;
		}
		programs {
			program { name: "focused";
				signal: "edje,focus,in";
				source: "edje";
				script {
					set_int(handler_focused, 1);
				}
			}
			program { name: "unfocused";
				signal: "edje,focus,out";
				source: "edje";
				script {
					set_int(handler_focused, 0);
					set_state(PART:"handle", "default", 0.0);
				}
			}
			program { name: "bottom_reversed";
				signal: "elm,state,bottom,reversed";
				source: "elm";
				script {
					set_state(PART:"handle", "bottom_reversed", 0.0);
				}
			}
			program { name: "top_reversed";
				signal: "elm,state,top,reversed";
				source: "elm";
				script {
					set_state(PART:"handle", "top_reversed", 0.0);
				}
			}
			program { name: "top";
				signal: "elm,state,top";
				source: "elm";
				script {
					new focused;
					focused = get_int(handler_focused);
					set_int(handler_ontop, 1);
					if (focused)
					{
						set_state(PART:"handle", "top", 0.0);
					}
					else
					{
						set_state(PART:"handle", "default", 0.0);
					}
				}
			}
			program { name: "bottom";
				signal: "elm,state,bottom";
				source: "elm";
				script {
					new focused;
					focused = get_int(handler_focused);
					set_int(handler_ontop, 0);
					if (focused)
					{
						set_state(PART:"handle", "show", 0.0);
					}
					else
					{
						set_state(PART:"handle", "default", 0.0);
					}
				}
			}
		}
	}

	group { name: "elm/entry/selection/block_handle_right";
		data.item: "height" "79";
		data.item: "gap" "32";
		images {
		  image: "copy&paste_Handler_right.png" COMP;
		  image: "copy&paste_Handler_right_01.png" COMP;
		  image: "copy&paste_Handler_right_reverse.png" COMP;
		  image: "copy&paste_Handler_right_01_reverse.png" COMP;
		}
		parts {
			part { name: "handle";
				mouse_events: 1;
				scale: 1;
				description { state: "default" 0.0;
					visible: 0;
					fixed: 1 1;
					align: 0 0;
					min: ENTRY_SELECTION_BLOCK_HANDLE_MIN_SIZE;
					max: ENTRY_SELECTION_BLOCK_HANDLE_MIN_SIZE;
					image {
						normal: "copy&paste_Handler_right.png";
						border: 0 0 0 0;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
				description { state: "top" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 0 1;
					image {
						normal: "copy&paste_Handler_right_01.png";
					}
				}
				description { state: "bottom_reversed" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 1 0;
					image {
						normal: "copy&paste_Handler_right_reverse.png";
					}
				}
				description { state: "top_reversed" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 1 1;
					image {
						normal: "copy&paste_Handler_right_01_reverse.png";
					}
				}
			}
		}
		script {
			public handler_ontop;
			public handler_focused;
		}
		programs {
			program { name: "focused";
				signal: "edje,focus,in";
				source: "edje";
				script {
					set_int(handler_focused, 1);
				}
			}
			program { name: "unfocused";
				signal: "edje,focus,out";
				source: "edje";
				script {
					set_int(handler_focused, 0);
					set_state(PART:"handle", "default", 0.0);
				}
			}
			program { name: "top";
				signal: "elm,state,top";
				source: "elm";
				script {
					new focused;
					focused = get_int(handler_focused);
					set_int(handler_ontop, 1);
					if (focused)
						{
							set_state(PART:"handle", "top", 0.0);
						}
					else
						{
							set_state(PART:"handle", "default", 0.0);
					}
				}
			}
			program { name: "bottom";
				signal: "elm,state,bottom";
				source: "elm";
				script {
					new focused;
					focused = get_int(handler_focused);
					set_int(handler_ontop, 0);
					if (focused)
						{
							set_state(PART:"handle", "show", 0.0);
						}
					else
						{
							set_state(PART:"handle", "default", 0.0);
					}
				}
			}
			program { name: "bottom_reversed";
				signal: "elm,state,bottom,reversed";
				source: "elm";
				script {
					set_state(PART:"handle", "bottom_reversed", 0.0);
				}
			}
			program { name: "top_reversed";
				signal: "elm,state,top,reversed";
				source: "elm";
				script {
					set_state(PART:"handle", "top_reversed", 0.0);
				}
			}
		}
	}

	group { name: "elm/entry/cursor_handle/default";
		images {
		  image: "copy&paste_Handler_center.png" COMP;
		  image: "copy&paste_Handler_center_reverse.png" COMP;
		}
		parts {
			part { name: "handle";
				scale: 1;
				mouse_events: 1;
				description { state: "default" 0.0;
					max: 59 86;
					min: 59 86;
					align: 0 0;
					visible: 0;
					align: 0.5 0;
					image {
						normal: "copy&paste_Handler_center.png";
						border: 0 0 0 0;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
				description { state: "top" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 0.5 1.0;
					image {
						normal: "copy&paste_Handler_center_reverse.png";
						border: 0 0 0 0;
					}
				}
			}
		}
		script {
			public on_top;
		}
		programs {
			program { name: "focused";
				signal: "edje,focus,in";
				source: "edje";
				script {
					new on_top_val = get_int(on_top);
					if (on_top_val)
					{
						set_state(PART:"handle", "top", 0.0);
					}
					else
					{
						set_state(PART:"handle", "show", 0.0);
					}
				}
			}
			program { name: "unfocused";
				signal: "edje,focus,out";
				source: "edje";
				script {
					set_state(PART:"handle", "default", 0.0);
				}
			}
			program { name: "show";
				signal: "edje,cursor,handle,show";
				source: "edje";
				script {
					set_int(on_top, 0);
					set_state(PART:"handle", "show", 0.0);
				}
			}
			program { name: "hide";
				signal: "edje,cursor,handle,hide";
				source: "edje";
				script {
					set_state(PART:"handle", "default", 0.0);
				}
			}
			program { name: "top";
				signal: "edje,cursor,handle,top";
				source: "edje";
				script {
					set_int(on_top, 1);
					set_state(PART:"handle", "top", 0.0);
				}
			}
		}
	}

	group { name: "elm/entry/selection/block_handle_edge_left";
		parts {
			part { name: "align";
				type: SPACER;
				scale: 1;
				description { state: "default" 0.0;
					min: 0 0;
					max: 0 0;
					align: 0 0;
				}
			}
			part { name: "bg";
				type: RECT;
				scale: 1;
				mouse_events: 0;
				description { state: "default" 0.0;
					fixed: 1 0;
					color: ENTRY_SELECTION_EDGE_COLOR;
					min: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH 0;
					max: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH -1;
					rel2 { relative: 0 1; to_x: "align"; }
					align: 0 0;
					visible: 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
		}
		programs {
			program { name: "show";
				signal: "edje,focus,in";
				source: "edje";
				script {
					set_state(PART:"bg", "show", 0.0);
				}
			}
			program { name: "hide";
				signal: "edje,focus,out";
				source: "edje";
				script {
					set_state(PART:"bg", "default", 0.0);
				}
			}
		}
	}

	group { name: "elm/entry/selection/block_handle_edge_right";
		parts {
			part { name: "bg";
				type: RECT;
				scale: 1;
				mouse_events: 0;
				description { state: "default" 0.0;
					color: ENTRY_SELECTION_EDGE_COLOR;
					min: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH 0;
					max: ENTRY_SELECTION_BLOCK_HANDLE_EDGE_WIDTH -1;
					visible: 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
		}
		programs {
			program { name: "show";
				signal: "edje,focus,in";
				source: "edje";
				script {
					set_state(PART:"bg", "show", 0.0);
				}
			}
			program { name: "hide";
				signal: "edje,focus,out";
				source: "edje";
				script {
					set_state(PART:"bg", "default", 0.0);
				}
			}
		}
	}

	group { name: "elm/entry/anchor/default";
		parts {
			part { name: "bg";
				type: SPACER;
				description { state: "default" 0.0;
				}
			}
		}
	}

    group { name: "elm/entry/preedit/default";
        parts {
            part { name: "bg";
                type: RECT;
                mouse_events: 0;
                description { state: "default" 0.0;
                    color: 128 128 128 255;
                }
            }
        }
   }

#define MAGNIFIER_SCALE 1.5

	group { name: "elm/entry/magnifier/fixed-size";
		data.item: "height" MAGNIFIER_HEIGHT_FIXED;
		data.item: "scale" MAGNIFIER_SCALE;
		data.item: "arrow" 30;
		images {
		  image: "copy&paste_Magnifier_left.png" COMP;
		  image: "copy&paste_Magnifier_middle.png" COMP;
		  image: "copy&paste_Magnifier_right.png" COMP;
		}
		parts {
			part { name: "bg";
				mouse_events: 0;
				scale: 1;
				type: RECT;
				description { state: "default" 0.0;
					fixed: 1 1;
					min: MAGNIFIER_WIDTH_FIXED MAGNIFIER_HEIGHT_FIXED;
					align: 0.5 0.0;
					visible: 1;
					color: 0 0 0 0;
				}
			}
			part { name: "bg_middle_left";
				mouse_events: 0;
				scale: 1;
				type: RECT;
				description { state: "default" 0.0;
					min: 20 MAGNIFIER_HEIGHT_FIXED;
					max: 20 -1;
					align: 1.0 0.0;
					rel2 { relative: 0.5 1.0; to: "bg"; }
					visible: 1;
					color: 0 0 0 0;
				}
			}
			part { name: "bg_middle_right";
				mouse_events: 0;
				scale: 1;
				type: RECT;
				description { state: "default" 0.0;
					min: 20 MAGNIFIER_HEIGHT_FIXED;
					max: 20 -1;
					align: 0.0 0.0;
					rel1 { relative: 0.5 0.0; to: "bg"; }
					visible: 1;
					color: 0 0 0 0;
				}
			}
			part { name: "bg_left";
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					min: 142 MAGNIFIER_HEIGHT_FIXED;
					align: 0.0 0.0;
					rel1 { relative: 0.0 0.0; to: "bg"; }
					rel2 { relative: 0.0 1.0; to: "bg_middle_left"; }
					image {
						normal: "copy&paste_Magnifier_left.png";
						border: 21 1 20 44;
					}
					image.middle: 1;
					fill.smooth: 0;
				}
			}
			part { name: "bg_middle";
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					align: 0.0 0.0;
					rel1 { relative: 0.0 0.0; to: "bg_middle_left"; }
					rel2 { relative: 1.0 1.0; to: "bg_middle_right"; }
					image {
						normal: "copy&paste_Magnifier_middle.png";
						border: 1 38 20 44;
					}
					image.middle: 1;
					fill.smooth: 0;
				}
			}
			part { name: "bg_right";
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					min: 142 MAGNIFIER_HEIGHT_FIXED;
					rel1 { relative: 1.0 0.0; to: "bg_middle_right"; }
					rel2.to: "bg";
					image {
						normal: "copy&paste_Magnifier_right.png";
						border: 1 21 20 44;
					}
					image.middle: 1;
					fill.smooth: 0;
				}
			}
			part { name: "swallow";
				type: SWALLOW;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					align: 0.0 0.0;
					rel1 {
						to: "bg";
						offset: 21-5 22-8; //need to update when image with rounded corners releases
					}
					rel2 {
						to: "bg";
						offset: -21+5 -44+10;
					}
				}
			}
		}
	}

	group { name: "elm/entry/matchlist/default";
		data.item: "max_height" "230";
		parts {
			part { name: "base";
				type: SPACER;
				scale : 1;
				description { state: "default" 0.0;
					rel1 {
						relative: 0.0 0.0;
						offset: 0 20;
					}
					rel2 {
						relative: 1.0 1.0;
						offset: 0 20;
					}
				}
			}
			part { name: "elm.swallow.content";
				type: SWALLOW;
				description { state: "default" 0.0;
					align: 0.0 0.0;
					rel1 {
						to: "base";
					}
					rel2 {
						to: "base";
					}
				}
			}
		}
	}

group { name: "elm/entry/base/font_color_black";
   alias: "elm/entry/base-mixedwrap/font_color_black";
   alias: "elm/entry/base/font_color_black/default";
   alias: "elm/entry/base/font_color_black/lighting";
   alias: "elm/entry/base/font_color_black/multiline";
   alias: "elm/entry/base/font_color_black/multiline/default";
   alias: "elm/entry/base/font_color_black/multiline/lighting";
   alias: "elm/entry/base/editfield/font_color_black";

   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";

   styles {
      style { name: "font_color_black_textblock_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_TEXT_COLOR_INC" wrap=mixed left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color=#000000FF";
      }
      style { name: "font_color_black_textblock_disabled_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_DISABLED_TEXT_COLOR_INC" wrap=mixed left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color=#000000FF";
      }
      style { name: "font_color_black_textblock_guide_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_GUIDE_TEXT_COLOR_INC" wrap=mixed left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "font_color_black_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "font_color_black_textblock_style";
               min: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "elm.text";
         action: PLAY_SAMPLE "touch_sound" 1.0;
      }
   }
}

group { name: "elm/entry/base-noedit/font_color_black";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "font_color_black_textblock_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "font_color_black_textblock_style";
               min: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
   }
}

group { name: "elm/entry/base-charwrap/font_color_black";
   alias: "elm/entry/base/font_color_black/char_wrap";
   alias: "elm/entry/base/font_color_black/default/char_wrap";
   alias: "elm/entry/base/font_color_black/lighting/char_wrap";
   alias: "elm/entry/base/font_color_black/multiline/char_wrap";
   alias: "elm/entry/base/font_color_black/multiline/default/char_wrap";
   alias: "elm/entry/base/font_color_black/multiline/lighting/char_wrap";
   alias: "elm/entry/base-charwrap/editfield/font_color_black";

   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";

   styles {
      style { name: "font_color_black_textblock_char_wrap_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_TEXT_COLOR_INC" wrap=char left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color=#000000FF";
      }
      style { name: "font_color_black_textblock_char_wrap_disabled_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_DISABLED_TEXT_COLOR_INC" wrap=char left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color=#000000FF";
      }
      style { name: "font_color_black_textblock_char_wrap_guide_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_GUIDE_TEXT_COLOR_INC" wrap=char left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "font_color_black_textblock_char_wrap_guide_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "font_color_black_textblock_char_wrap_style";
               min: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_textblock_char_wrap_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "elm.text";
         action: PLAY_SAMPLE "touch_sound" 1.0;
      }
   }
}

group { name: "elm/entry/base-single/font_color_black";
   alias: "elm/entry/base-single/font_color_black/default";
   alias: "elm/entry/base-single/font_color_black/lighting";
   alias: "elm/entry/base-single/font_color_black/singleline";
   alias: "elm/entry/base-single/font_color_black/singleline/default";
   alias: "elm/entry/base-single/font_color_black/singleline/lighting";
   alias: "elm/entry/base-single/editfield/font_color_black";
   alias: "elm/entry/base-single/editfield/searchbar/font_color_black";

   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";

   styles {
      style { name: "font_color_black_single_textblock_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_TEXT_COLOR_INC" wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color=#000000FF";
      }
      style { name: "font_color_black_single_textblock_disabled_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_DISABLED_TEXT_COLOR_INC" wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color=#000000FF";
      }
      style { name: "font_color_black_single_textblock_guide_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_GUIDE_TEXT_COLOR_INC" wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "font_color_black_single_textblock_guide_style";
               min: 0 1;
               max: 0 1;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_style";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "elm.text";
         action: PLAY_SAMPLE "touch_sound" 1.0;
      }
   }
}

group { name: "elm/entry/base-single-noedit/font_color_black";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "font_color_black_single_textblock_guide_style";
               min: 0 1;
               max: 0 1;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_style";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
   }
}
group { name: "elm/entry/base-single/font_color_black/tizen_text_class";
   inherit: "elm/entry/base-single/font_color_black";
   styles {
      style { name: "tizen_text_class_single_textblock_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_TEXT_COLOR_INC" wrap=none left_margin=1 right_margin=3 text_class=tizen";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color=#000000FF";
      }
      style { name: "tizen_text_class_single_textblock_disabled_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_DISABLED_TEXT_COLOR_INC" wrap=none left_margin=1 right_margin=3 text_class=tizen";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
         tag:  "preedit_sub1" "+ backing=on backing_color="ENTRY_PREEDIT_SUB1_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub2" "+ backing=on backing_color="ENTRY_PREEDIT_SUB2_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub3" "+ backing=on backing_color="ENTRY_PREEDIT_SUB3_COLOR" underline=on underline_color=#000000FF";
         tag:  "preedit_sub4" "+ backing=on backing_color="ENTRY_PREEDIT_SUB4_COLOR" underline=on underline_color=#000000FF";
      }
      style { name: "tizen_text_class_single_textblock_guide_style";
         base: "font=Tizen:style=Roman font_size="ENTRY_TEXT_SIZE" color="ENTRY_FONT_COLOR_BLACK_GUIDE_TEXT_COLOR_INC" wrap=none left_margin=1 right_margin=3 text_class=tizen ellipsis=1.0";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font_style=Oblique";
         tag:  "b" "+ font_weight=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font_weight=Bold";
      }
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "tizen_text_class_single_textblock_guide_style";
               min: 0 1;
               max: 0 1;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         description { state: "default" 0.0;
            text {
               style: "tizen_text_class_single_textblock_style";
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "tizen_text_class_single_textblock_disabled_style";
            }
         }
      }
   }
}
group { name: "elm/entry/base-password/font_color_black";
   alias: "elm/entry/base-password/editfield/font_color_black";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.guide";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            text {
               style: "font_color_black_single_textblock_guide_style";
               min: 0 1;
               max: 0 1;
            }
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PASSWORD;
         select_mode: BLOCK_HANDLE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         //source2: "X"; // selection over
         //source3: "X"; // cursor under
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         source7: ENTRY_BLOCK_HANDLE_SOURCE7; // start selection handler
         source8: ENTRY_BLOCK_HANDLE_SOURCE8; // end selection handler
         source9: ENTRY_CURSOR_HANDLE_SOURCE9; // cursor handler
         //source10: ""; // start edge selection
         //source11: ""; // end edge selection
         description { state: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_style";
               repch: "•";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
      program { name: "gdisable";
         signal: "elm,guide,disabled";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guide";
      }
      program { name: "genable";
         signal: "elm,guide,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guide";
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "elm.text";
         action: PLAY_SAMPLE "touch_sound" 1.0;
      }
   }
}

group { name: "elm/scroller/entry/default";
      data {
         item: "focus_highlight" "off";
      }
      script {
         public sbvis_v, sbvis_h, sbalways_v, sbalways_h, sbvis_timer;
         public timer0(val) {
            new v;
            v = get_int(sbvis_v);
            if (v) {
               v = get_int(sbalways_v);
               if (!v) {
                  emit("do-hide-vbar", "");
                  set_int(sbvis_v, 0);
               }
            }
            v = get_int(sbvis_h);
            if (v) {
               v = get_int(sbalways_h);
               if (!v) {
                  emit("do-hide-hbar", "");
                  set_int(sbvis_h, 0);
               }
            }
            set_int(sbvis_timer, 0);
            return 0;
         }
      }
      parts {
         part { name: "focus_bg";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
         part { name: "bg";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
         part { name: "clipper";
            type: RECT;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
               rel1.to: "bg";
               rel2.to: "bg";
            }
         }
         part { name: "contentclipper";
            type: RECT;
            scale: 1;
            mouse_events: 0;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1 {
                  to_x: "icon_padding";
                  to_y: "bg";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to_x: "clear_padding";
                  to_y: "bg";
                  relative: 0.0 1.0;
               }
            }
         }
         part { name: "icon_padding";
            type: SPACER;
            scale: 1;
            clip_to: "clipper";
            description { state: "default" 0.0;
               align: 0.0 0.5;
               fixed: 1 1;
               rel1 {
                  to: "bg";
                  relative: 0.0 0.0;
               }
               rel2 {
                  to: "bg";
                  relative: 0.0 1.0;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel2 {
                  to_x: "elm.swallow.icon";
                  relative: 1.0 1.0;
               }
            }
         }
         part { name: "elm.swallow.icon";
            type: SWALLOW;
            scale: 1;
            clip_to: "clipper";
            description { state: "default" 0.0;
               align: 0.0 0.5;
               fixed: 1 1;
               rel1 {
                  to: "bg";
                  relative: 0.0 0.0;
               }
               rel2 {
                  to: "bg";
                  relative: 0.0 1.0;
               }
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "clear_padding";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               align: 1.0 0.5;
               fixed: 1 1;
               rel1 {
                  to_x: "elm.swallow.end";
                  to_y: "bg";
                  relative: 0.0 0.0;
               }
               rel2 {
                  to_x: "elm.swallow.end";
                  to_y: "bg";
                  relative: 0.0 1.0;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               rel1 {
                  to_x: "elm.swallow.clear";
                  relative: 0.0 0.0;
               }
            }
         }
         part { name: "elm.swallow.clear";
            type: SWALLOW;
            scale: 1;
            clip_to: "clipper";
            description { state: "default" 0.0;
               align: 1.0 0.5;
               fixed: 1 1;
               rel1 {
                  to_x: "elm.swallow.end";
                  to_y: "bg";
                  relative: 0.0 0.0;
               }
               rel2 {
                  to_x: "elm.swallow.end";
                  to_y: "bg";
                  relative: 0.0 1.0;
               }
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "elm.swallow.end";
            type: SWALLOW;
            scale: 1;
            clip_to: "clipper";
            description { state: "default" 0.0;
               align: 1.0 0.5;
               fixed: 1 1;
               rel1 {
                  to: "bg";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "bg";
                  relative: 1.0 1.0;
               }
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "elm.swallow.content";
            clip_to: "contentclipper";
            scale: 1;
            type: SWALLOW;
            description { state: "default" 0.0;
               rel1 {
                  to_x: "icon_padding";
                  to_y: "bg";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to_x: "clear_padding";
                  to_y: "bg";
                  relative: 0.0 1.0;
               }
            }
         }
         part { name: "sb_vbar_clip_master";
            type: RECT;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part { name: "sb_vbar_clip";
            clip_to: "sb_vbar_clip_master";
            type: RECT;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part { name: "sb_vbar";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 10 17;
               align: 1.0 0.0;
               rel1 {
                  relative: 0.0 0.0;
                  to_y:     "elm.swallow.content";
                  to_x:     "clear_padding";
               }
               rel2 {
                  relative: 0.0 0.0;
                  to_y:     "sb_hbar";
                  to_x:     "clear_padding";
               }
            }
         }
         part { name: "elm.dragable.vbar";
            type: RECT;
            scale: 1;
            clip_to: "sb_vbar_clip";
            mouse_events: 0;
            dragable {
               x: 0 0 0;
               y: 1 1 0;
               confine: "sb_vbar";
            }
            description { state: "default" 0.0;
               visible: 0;
               fixed: 1 1;
               min: 10 17;
               max: 10 99999;
               rel1 {
                  relative: 0.5  0.5;
                  to: "sb_vbar";
               }
               rel2 {
                  relative: 0.5  0.5;
                  to: "sb_vbar";
               }
            }
         }
         part { name: "sb_hbar_clip_master";
            type: RECT;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part { name: "sb_hbar_clip";
            clip_to: "sb_hbar_clip_master";
            type: RECT;
            scale: 1;
            mouse_events: 0;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part { name: "sb_hbar";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 17 10;
               align: 0.0 1.0;
               rel1 {
                  relative: 0.0 1.0;
                  to_x:     "elm.swallow.content";
                  to_y:     "elm.swallow.content";
               }
               rel2 {
                  relative: 0.0 1.0;
                  to_x:     "sb_vbar";
                  to_y:     "elm.swallow.content";
               }
            }
         }
         part { name: "elm.dragable.hbar";
            type: RECT;
            scale: 1;
            clip_to: "sb_hbar_clip";
            mouse_events: 0;
            dragable {
               x: 1 1 0;
               y: 0 0 0;
               confine: "sb_hbar";
            }
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 17 10;
               max: 99999 10;
               rel1 {
                  relative: 0.5  0.5;
                  to: "sb_hbar";
               }
               rel2 {
                  relative: 0.5  0.5;
                  to: "sb_hbar";
               }
            }
         }
      }
      programs {
         program { name: "load";
            signal: "load";
            source: "";
            script {
               set_state(PART:"sb_hbar_clip", "hidden", 0.0);
               set_state(PART:"sb_vbar_clip", "hidden", 0.0);
               set_int(sbvis_h, 0);
               set_int(sbvis_v, 0);
               set_int(sbalways_v, 0);
               set_int(sbalways_h, 0);
               set_int(sbvis_timer, 0);
               emit("reload", "elm");
            }
         }
         program { name: "icon_show";
            signal: "elm,action,show,icon";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.swallow.icon";
            target: "icon_padding";
         }
         program { name: "icon_hide";
            signal: "elm,action,hide,icon";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.icon";
            target: "icon_padding";
         }
         program { name: "clear_show";
            signal: "elm,state,clear,visible";
            source: "*";
            action: STATE_SET "visible" 0.0;
            target: "elm.swallow.clear";
            target: "clear_padding";
         }
         program { name: "clear_hide";
            signal: "elm,state,clear,hidden";
            source: "*";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.clear";
            target: "clear_padding";
         }
         program { name: "end_show";
            signal: "elm,action,show,end";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.swallow.end";
         }
         program { name: "end_hide";
            signal: "elm,action,hide,end";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.end";
         }
         program { name: "vbar_show";
            signal: "elm,action,show,vbar";
            source: "elm";
            action:  STATE_SET "default" 0.0;
            target: "sb_vbar_clip_master";
         }
         program { name: "vbar_hide";
            signal: "elm,action,hide,vbar";
            source: "elm";
            action:  STATE_SET "hidden" 0.0;
            target: "sb_vbar_clip_master";
         }
         program { name: "vbar_show_always";
            signal: "elm,action,show_always,vbar";
            source: "elm";
            script {
               new v;
               v = get_int(sbalways_v);
               if (!v) {
                  set_int(sbalways_v, 1);
                  v = get_int(sbvis_v);
                  if (!v) {
                     emit("do-show-vbar", "");
                     set_int(sbvis_v, 1);
                  }
               }
            }
         }
         program { name: "vbar_show_notalways";
            signal: "elm,action,show_notalways,vbar";
            source: "elm";
            script {
               new v;
               v = get_int(sbalways_v);
               if (v) {
                  set_int(sbalways_v, 0);
                  v = get_int(sbvis_v);
                  if (!v) {
                     emit("do-hide-vbar", "");
                     set_int(sbvis_v, 0);
                  }
               }
            }
         }
         program { name: "sb_vbar_show";
            signal: "do-show-vbar";
            source: "";
            action:  STATE_SET "default" 0.0;
            transition: LINEAR 0.5;
            target: "sb_vbar_clip";
         }
         program { name: "sb_vbar_hide";
            signal: "do-hide-vbar";
            source: "";
            action:  STATE_SET "hidden" 0.0;
            transition: LINEAR 0.5;
            target: "sb_vbar_clip";
         }

         program { name: "hbar_show";
            signal: "elm,action,show,hbar";
            source: "elm";
            action:  STATE_SET "default" 0.0;
            target: "sb_hbar_clip_master";
         }
         program { name: "hbar_hide";
            signal: "elm,action,hide,hbar";
            source: "elm";
            action:  STATE_SET "hidden" 0.0;
            target: "sb_hbar_clip_master";
         }
         program { name: "hbar_show_always";
            signal: "elm,action,show_always,hbar";
            source: "elm";
            script {
               new v;
               v = get_int(sbalways_h);
               if (!v) {
                  set_int(sbalways_h, 1);
                  v = get_int(sbvis_h);
                  if (!v) {
                     emit("do-show-hbar", "");
                     set_int(sbvis_h, 1);
                  }
               }
            }
         }
         program { name: "hbar_show_notalways";
            signal: "elm,action,show_notalways,hbar";
            source: "elm";
            script {
               new v;
               v = get_int(sbalways_h);
               if (v) {
                  set_int(sbalways_h, 0);
                  v = get_int(sbvis_h);
                  if (!v) {
                     emit("do-hide-hbar", "");
                     set_int(sbvis_h, 0);
                  }
               }
            }
         }
         program { name: "sb_hbar_show";
            signal: "do-show-hbar";
            source: "";
            action:  STATE_SET "default" 0.0;
            transition: LINEAR 0.5;
            target: "sb_hbar_clip";
         }
         program { name: "sb_hbar_hide";
            signal: "do-hide-hbar";
            source: "";
            action:  STATE_SET "hidden" 0.0;
            transition: LINEAR 0.5;
            target: "sb_hbar_clip";
         }

         program { name: "scroll";
            signal: "elm,action,scroll";
            source: "elm";
            script {
               new v;
               v = get_int(sbvis_v);
               v |= get_int(sbalways_v);
               if (!v) {
                  emit("do-show-vbar", "");
                  set_int(sbvis_v, 1);
               }
               v = get_int(sbvis_h);
               v |= get_int(sbalways_h);
               if (!v) {
                  emit("do-show-hbar", "");
                  set_int(sbvis_h, 1);
               }
               v = get_int(sbvis_timer);
               if (v > 0) cancel_timer(v);
               v = timer(1.0, "timer0", 0);
               set_int(sbvis_timer, v);
            }
         }
      }
   }
