// ***************************** Gengrid **************************************/
#define GENGRID_GALLERY_PADDING_LT_SIZE                1 1
#define GENGRID_GALLERY_PADDING_RB_SIZE                1 1
#define GENGRID_GALLERY_ICON_PADDING_LT_SIZE           8 8
#define GENGRID_GALLERY_ICON_TOP_SIZE                  38 38
#define GENGRID_GALLERY_ICON_CENTER_SIZE               72 72
#define GENGRID_GALLERY_ICON_PADDING_LT_SIZE           8 8
#define GENGRID_IMAGE_VIEWER_PADDING_LT_SIZE           2 2
#define GENGRID_IMAGE_VIEWER_PADDING_RB_SIZE           2 2
#define GENGRID_IMAGE_VIEWER_SELECT_LINE_BORDER        4 4 4 4;

// VARIABLES
#define GENGRID_CHECK_IMAGE \
   image: "tw_btn_checkbox_holo_dark.png" COMP; \
   image: "tw_btn_check_holo_dark.png" COMP; \

#define GENGRID_CHECK_SCRIPT \
   public check_mode = 0; \
   public check_state = 0; \
   public check_disabled = 0;

// PARTS
#define GENGRID_PART_CHECK(PART) \
   part { name: "check_bg_clip"; \
      type: RECT; \
      mouse_events: 0; \
      description { state: "default" 0.0; \
         visible: 0; \
      } \
      description { state: "visible" 0.0; \
         visible: 1; \
      } \
   } \
   part { name: "check_bg"; \
      type: IMAGE; \
      mouse_events: 0; \
      scale: 1; \
      clip_to: "check_bg_clip"; \
      description { state: "default" 0.0; \
         min: CHECK_SIZE; \
         max: CHECK_SIZE; \
         align: 1.0 0.0; \
         fixed: 1 1; \
         rel1 { \
            relative: 1.0 0.0; \
            to: PART; \
         } \
         rel2 { \
            relative: 1.0 0.0; \
            to: PART; \
         } \
         image.normal: "tw_btn_checkbox_holo_dark.png"; \
         color_class: "W012L1"; \
      } \
      description { state: "pressed" 0.0; \
         inherit: "default" 0.0; \
         color_class: "W012L1P"; \
      } \
      description { state: "disabled" 0.0; \
         inherit: "default" 0.0; \
         color_class: "W012L1D"; \
      } \
   } \
   part { name: "check"; \
      scale: 1; \
      mouse_events: 0; \
      clip_to: "sequence_clip"; \
      description { state: "default" 0.0; \
         rel1.to: "check_bg"; \
         rel2.to: "check_bg"; \
         image.normal: "tw_btn_check_holo_dark.png"; \
         visible: 0; \
      } \
      description { state: "on" 0.0; \
         inherit: "default" 0.0; \
         visible: 1; \
         color_class: "W012L2"; \
      } \
      description { state: "pressed" 0.0; \
         inherit: "on" 0.0; \
         color_class: "W012L2P"; \
      } \
      description { state: "disabled" 0.0; \
         inherit: "on" 0.0; \
         color_class: "W012L2D"; \
      } \
   } \
   part { name: "sequence_clip"; \
      type: RECT; \
      mouse_events: 0; \
      description { state: "default" 0.0; \
         rel1.to: "check_bg"; \
         rel2 { \
            relative: 0.0 1.0; \
            to: "bg"; \
         } \
         color: 255 255 255 255; \
      } \
      description { state: "visible" 0.0; \
         inherit: "default" 0.0; \
         rel2 { \
            relative: 1.0 1.0; \
            to: "check_bg"; \
         } \
      } \
   }

// PROGRAMS
#define GENGRID_PROGRAM_CHECK \
   program { name: "check_show"; \
      signal: "check,state,show"; \
      source: ""; \
      script { \
         set_int(check_mode, 1); \
         set_state(PART:"check_bg_clip", "visible", 0.0); \
      } \
   } \
   program { name: "check_hide"; \
      signal: "check,state,hide"; \
      source: ""; \
      script { \
         set_int(check_mode, 0); \
         set_state(PART:"check_bg_clip", "default", 0.0); \
      } \
   } \
   program { name: "check_on"; \
      signal: "check,state,on"; \
      source: ""; \
      script { \
         if (!get_int(check_mode)) return; \
         if (get_int(check_disabled) == 1) \
           { \
              set_state(PART:"check_bg", "disabled", 0.0); \
              set_state(PART:"check", "disabled", 0.0); \
              set_state(PART:"sequence_clip", "visible", 0.0); \
           } \
         else \
           { \
              set_state(PART:"check_bg", "on", 0.0); \
              run_program(PROGRAM:"check_show_effect"); \
              run_program(PROGRAM:"check_draw_effect"); \
           } \
         set_int(check_state, 1); \
      } \
   } \
   program { name: "check_off"; \
      signal: "check,state,off"; \
      source: ""; \
      script { \
         if (!get_int(check_mode)) return; \
         if (get_int(check_disabled) == 1) \
            set_state(PART:"check_bg", "disabled", 0.0); \
         else \
            set_state(PART:"check_bg", "default", 0.0); \
         set_state(PART:"check", "default", 0.0); \
         set_state(PART:"sequence_clip", "default", 0.0); \
         set_int(check_state, 0); \
      } \
   } \
   program { name: "check_show_effect"; \
      action: STATE_SET "on" 0.0; \
      transition: LINEAR 0.233; \
      target: "check"; \
   } \
   program { name: "check_draw_effect"; \
      action: STATE_SET "visible" 0.0; \
      transition: LINEAR 0.267; \
      target: "sequence_clip"; \
   } \
   program { name: "disable"; \
      signal: "elm,state,disabled"; \
      source: "elm"; \
      script { \
         if (!get_int(check_mode)) return; \
         if (get_int(check_state) == 1) \
           set_state(PART:"check", "disabled", 0.0); \
         else \
           set_state(PART:"check", "default", 0.0); \
         set_state(PART:"bg", "disabled", 0.0); \
         set_int(check_disabled, 1); \
      } \
   } \
   program { name: "enable"; \
      signal: "elm,state,enabled"; \
      source: "elm"; \
      script { \
         if (!get_int(check_mode)) return; \
         if (get_int(check_state) == 1) \
           set_state(PART:"check", "disabled", 0.0); \
         else \
           set_state(PART:"check", "default", 0.0); \
         set_state(PART:"bg", "default", 0.0); \
         set_int(check_disabled, 0); \
      } \
   }


group { name: "elm/gengrid/item/gallery/default";
   data.item: "contents" "elm.swallow.icon elm.swallow.end elm.swallow.center elm.swallow.top";
   images {
      GENGRID_CHECK_IMAGE
   }
   script {
      GENGRID_CHECK_SCRIPT
   }

   parts {
      part { name: "bg";
         type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "left_top_padding";
         type: SPACER;
         scale : 1;
         description { state: "default" 0.0;
            min: GENGRID_GALLERY_PADDING_LT_SIZE;
            align: 0.0 0.0;
            fixed: 1 1;
            rel1.to: "bg";
            rel2 {
               relative: 0.0 0.0;
               to: "bg";
            }
         }
      }
      part { name: "right_bottom_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: GENGRID_GALLERY_PADDING_RB_SIZE;
            align: 1.0 1.0;
            fixed: 1 1;
            rel1 {
               relative: 1.0 1.0;
               to: "bg";
            }
            rel2.to: "bg";
         }
      }
      part { name: "item_bg";
         type: RECT;
         description { state: "default" 0.0;
            visible: 0;
            color: 0 0 0 0;
            rel1 {
               relative: 1.0 1.0;
               to: "left_top_padding";
            }
            rel2 {
               relative: 0.0 0.0;
               to: "right_bottom_padding";
            }
         }
      }
      part { name: "item_bg_left_top_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: GENGRID_DEFAULT_PADDING_ITEM_BG_LT_SIZE;
            align: 0.0 0.0;
            fixed: 1 1;
            rel1.to: "item_bg";
            rel2 {
               relative: 0.0 0.0;
               to: "item_bg";
            }
         }
      }
      part { name: "item_bg_right_bottom_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: GENGRID_DEFAULT_PADDING_ITEM_BG_RB_SIZE;
            align: 1.0 1.0;
            fixed: 1 1;
            rel1 {
               relative: 1.0 1.0;
               to: "item_bg";
            }
            rel2.to: "item_bg";
         }
      }
      part { name: "elm.swallow.icon";
         type: SWALLOW;
         description { state: "default" 0.0;
            rel1 {
               relative: 1.0 1.0;
               to: "item_bg_left_top_padding";
            }
            rel2 {
               relative: 0.0 0.0;
               to: "item_bg_right_bottom_padding";
            }
         }
      }
      part { name: "elm.swallow.end";
         type: SWALLOW;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.icon";
            rel2.to: "elm.swallow.icon";
         }
      }
      part { name: "icon_left_top_padding";
         type: SPACER;
         description { state: "default" 0.0;
            min: GENGRID_GALLERY_ICON_PADDING_LT_SIZE;
            max: GENGRID_GALLERY_ICON_PADDING_LT_SIZE;
            fixed: 1 1;
            align: 0.0 0.0;
            rel2.relative: 0.0 0.0;
            rel1.to: "elm.swallow.icon";
            rel2.to: "elm.swallow.icon";
         }
      }
      part { name: "elm.swallow.top";
         type: SWALLOW;
         description { state: "default" 0.0;
            min: GENGRID_GALLERY_ICON_TOP_SIZE;
            max: GENGRID_GALLERY_ICON_TOP_SIZE;
            fixed: 1 1;
            align: 0.0 0.0;
            rel1.relative: 1.0 1.0;
            rel1.to: "icon_left_top_padding";
            rel2.to: "icon_left_top_padding";
         }
      }
      part { name: "elm.swallow.center";
         type: SWALLOW;
         description { state: "default" 0.0;
            min: GENGRID_GALLERY_ICON_CENTER_SIZE;
            max: GENGRID_GALLERY_ICON_CENTER_SIZE;
            fixed: 1 1;
            align: 0.5 0.5;
            rel1.to: "elm.swallow.icon";
            rel2.to: "elm.swallow.icon";
         }
      }
      GENGRID_PART_CHECK(elm.swallow.icon)

   }
   programs {
      program { name: "selected";
         signal: "elm,state,selected";
         source: "elm";
         script {
            if (!get_int(check_mode)) return;
            if (get_int(check_state) == 1)
               set_state(PART:"check", "pressed", 0.0)
            else
               set_state(PART:"check", "default", 0.0)
            set_state(PART:"check_bg", "pressed", 0.0);
         }
      }
      program { name: "unselected";
         signal: "elm,state,unselected";
         source: "elm";
         script {
            if (!get_int(check_mode)) return;
            if (get_int(check_state) == 1)
               set_state(PART:"check", "on", 0.0);
            else
               set_state(PART:"check", "default", 0.0);
            set_state(PART:"check_bg", "default", 0.0);
         }
      }
      program { name: "touch_snd";
         signal: "mouse,clicked,1";
         source: "elm.swallow.icon";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.swallow.icon", st, 30, vl);
            play_sample("touch_sound", 1.0);
         }
      }
      program { name: "default";
         signal: "elm,state,default";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "check_bg_clip";
         target: "check_bg";
         target: "check";
      }
      GENGRID_PROGRAM_CHECK
   }
}

group { name: "elm/gengrid/item/image_viewer/default";
   inherit: "elm/gengrid/item/gallery/default";
   data.item: "contents" "elm.swallow.icon elm.swallow.end elm.swallow.center elm.swallow.top";
   images {
      image: "b_image_viewer_select.png" COMP;
   }
   parts {
      part { name: "left_top_padding";
         description { state: "default" 0.0;
            min: GENGRID_IMAGE_VIEWER_PADDING_LT_SIZE;
         }
      }
      part { name: "right_bottom_padding";
         description { state: "default" 0.0;
            min: GENGRID_IMAGE_VIEWER_PADDING_RB_SIZE;
         }
      }
      part { name: "select_line";
         type: IMAGE;
         description { state: "default" 0.0;
            visible: 0;
            rel1.to: "elm.swallow.icon";
            rel2.to: "elm.swallow.icon";
            image {
               normal: "b_image_viewer_select.png";
               border_scale: 1;
               border: GENGRID_IMAGE_VIEWER_SELECT_LINE_BORDER;
            }
         }
         description { state: "visible" 0.0;
           inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program { name: "default";
         signal: "elm,state,default";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "check_bg_clip";
         target: "check_bg";
         target: "check";
         target: "select_line";
      }
      program { name: "select_visible";
         signal: "elm,select,visible";
         source: "";
         action: STATE_SET "enabled" 0.0;
         target: "select_line";
      }
      program { name: "select_default";
         signal: "elm,select,default";
         source: "";
         action: STATE_SET "default" 0.0;
         target: "select_line";
      }
      program { name: "check_on";
         signal: "check,state,on";
         source: "";
         script {
            if (!get_int(check_mode)) return;
            if (get_int(check_disabled) == 1)
              {
                 set_state(PART:"check_bg", "disabled_on", 0.0);
                 set_state(PART:"check", "disable", 0.0);
                 set_state(PART:"sequence_clip", "visible", 0.0);
              }
            else
              {
                 set_state(PART:"check_bg", "on", 0.0);
                 run_program(PROGRAM:"check_show_effect");
                 run_program(PROGRAM:"check_draw_effect");
              }
            set_int(check_state, 1);
            set_state(PART:"select_line", "visible", 0.0);
         }
      }
      program { name: "check_off";
         signal: "check,state,off";
         source: "";
         script {
            if (!get_int(check_mode)) return;
            if (get_int(check_disabled) == 1)
               set_state(PART:"check_bg", "disabled_off", 0.0);
            else
               set_state(PART:"check_bg", "default", 0.0);
            set_state(PART:"sequence_clip", "default", 0.0);
            set_state(PART:"check", "default", 0.0);
            set_int(check_state, 0);
            set_state(PART:"select_line", "default", 0.0);
         }
      }
   }
}