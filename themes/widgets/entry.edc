/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * PROPRIETARY/CONFIDENTIAL
 *
 * This software is the confidential and proprietary information of SAMSUNG
 * ELECTRONICS ("Confidential Information"). You agree and acknowledge that this
 * software is owned by Samsung and you shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the license
 * agreement you entered into with SAMSUNG ELECTRONICS. SAMSUNG make no
 * representations or warranties about the suitability of the software, either
 * express or implied, including but not limited to the implied warranties of
 * merchantability, fitness for a particular purpose, or non-infringement.
 * SAMSUNG shall not be liable for any damages suffered by licensee arising out
 * of or releated to this software.
 *
 */

//#define ENTRY_BLOCK_HANDLE_SOURCE2 "elm/entry/selection/block_handle"
//#define ENTRY_BLOCK_HANDLE_SOURCE3 "elm/entry/selection/block_handle_top"
#define ENTRY_BLOCK_HANDLE_SOURCE2 "elm/entry/selection/block_handle_right"
#define ENTRY_BLOCK_HANDLE_SOURCE3 "elm/entry/selection/block_handle_left"

group { name: "elm/entry/base/default";
   alias: "elm/entry/base-mixedwrap/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   styles {
      style { name: "entry_textblock_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color="ENTRY_TEXT_COLOR_INC" left_margin=1 right_margin=2 wrap=mixed text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
      style { name: "entry_textblock_disabled_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#00000080 left_margin=1 right_margin=2 wrap=mixed text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-charwrap/default";
   alias: "elm/entry/base/char_wrap";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   styles {
      style { name: "entry_textblock_char_wrap_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color="ENTRY_TEXT_COLOR_INC" wrap=char left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
      style { name: "entry_textblock_char_wrap_disabled_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#00000080 wrap=char left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_char_wrap_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_char_wrap_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
      }
   }

group { name: "elm/entry/base-nowrap/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_textblock_style";
               min: 1 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base/editfield";
   alias: "elm/entry/base-mixedwrap/editfield";
   alias: "elm/entry/base/editfield/default";
   alias: "elm/entry/base/editfield/lighting";
   alias: "elm/entry/base/editfield/multiline";
   alias: "elm/entry/base/editfield/multiline/default";
   alias: "elm/entry/base/editfield/multiline/lighting";
   alias: "elm/entry/base/editfield/searchbar/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   styles {
      style { name: "editfield_textblock_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color="ENTRY_TEXT_COLOR_INC" wrap=mixed left_margin=1 right_margin=2";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
      style { name: "editfield_textblock_disabled_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#00000080 wrap=mixed left_margin=1 right_margin=2";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
            style: "editfield_textblock_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "editfield_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-charwrap/editfield";
   alias: "elm/entry/base/editfield/char_wrap";
   alias: "elm/entry/base/editfield/default/char_wrap";
   alias: "elm/entry/base/editfield/lighting/char_wrap";
   alias: "elm/entry/base/editfield/multiline/char_wrap";
   alias: "elm/entry/base/editfield/multiline/default/char_wrap";
   alias: "elm/entry/base/editfield/multiline/lighting/char_wrap";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   styles {
      style { name: "editfield_textblock_char_wrap_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color="ENTRY_TEXT_COLOR_INC" wrap=char left_margin=1 right_margin=2";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
      style { name: "editfield_textblock_char_wrap_disabled_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#00000080 wrap=char left_margin=1 right_margin=2";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "editfield_textblock_char_wrap_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "editfield_textblock_char_wrap_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-single/editfield";
   alias: "elm/entry/base-single/editfield/default";
   alias: "elm/entry/base-single/editfield/lighting";
   alias: "elm/entry/base-single/editfield/singleline";
   alias: "elm/entry/base-single/editfield/singleline/default";
   alias: "elm/entry/base-single/editfield/singleline/lighting";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   styles {
      style { name: "editfield_single_textblock_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color="ENTRY_TEXT_COLOR_INC" wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
      style { name: "editfield_single_textblock_disabled_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#00000080 wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;

      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "editfield_single_textblock_style";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "editfield_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-single/editfield/searchbar/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "editfield_single_textblock_style";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "editfield_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-nowrap/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_textblock_style";
               min: 1 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-single/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   styles {
      style { name: "entry_single_textblock_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color="ENTRY_TEXT_COLOR_INC" wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
      style { name: "entry_single_textblock_disabled_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#00000080 wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link " "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_single_textblock_style";
               min: 1 1;
               max: 0 0;
               align: 0.0 0.5;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-single-noedit/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_single_textblock_style";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-noedit/default";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "entry_textblock_style";
               min: 0 1;
               align: 0.0 0.0;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

   group { name: "elm/entry/base-noedit-charwrap/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: PLAIN;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 1;
	    source: "elm/entry/selection/default"; // selection under
	    source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
	    source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
	    source5: "elm/entry/anchor/default"; // anchor under
	    description { state: "default" 0.0;
               fixed: 1 0;
	       text {
		  style: "entry_textblock_style_charwrap";
		  min: 0 1;
               align: 0.0 0.0;
	       }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_textblock_disabled_style_charwrap";
	       }
	    }
	 }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
      }
   }

   group { name: "elm/entry/base-nowrap-noedit/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: PLAIN;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 1;
	    source: "elm/entry/selection/default"; // selection under
	    source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
	    source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
	    source5: "elm/entry/anchor/default"; // anchor under
	    description { state: "default" 0.0;
	       text {
		  style: "entry_textblock_style";
		  min: 1 1;
               align: 0.0 0.0;
	       }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_textblock_disabled_style";
	       }
	    }
	 }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
      }
   }

  group { name: "elm/entry/base-password/default";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: PASSWORD;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 0;
	    source: "elm/entry/selection/default"; // selection under
	    source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
	    source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
	    source4: "elm/entry/cursor/default"; // cursorover
	    source5: "elm/entry/anchor/default"; // anchor under
	    description { state: "default" 0.0;
	       text {
		  style: "entry_single_textblock_style";
		  repch: "*";
		  min: 1 1;
                  max: 0 1;
	       }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_single_textblock_disabled_style";
	       }
	    }
	 }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
      }
   }

group { name: "elm/entry/base-password/popup";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   styles
   {
      style { name: "entry_single_textblock_popup_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color="ENTRY_TEXT_COLOR_INC" align=center wrap=mixed ellipsis=1.0 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;

      }
      style { name: "entry_single_textblock_disabled_popup_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#00000080 align=center wrap=mixed ellipsis=1.0 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
         tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
      }
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PASSWORD;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "entry_single_textblock_popup_style";
               repch: "*";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "entry_single_textblock_disabled_popup_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

	group { name: "elm/entry/cursor/default";
		parts {
			part { name: "clip2";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					rel1.to: "clip";
					rel2.to: "clip";
				visible: 0;
				}
				description { state: "focused" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
			part { name: "clip";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				clip_to: "clip2";
				description { state: "default" 0.0;
					rel1.offset: -10 0;
					rel2.offset: 9 9;
				}
				description { state: "hidden" 0.0;
					inherit: "default" 0.0;
					visible: 0;
				}
			}
			part { name: "base";
				mouse_events: 0;
				scale: 1;
				clip_to: "clip";
				description { state: "default" 0.0;
					min: 2 2;
					align: 0.5 1.0;
					color: 0 0 0 0;
				}
			}

			part { name: "glow";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				clip_to: "clip2";
				description { state: "default" 0.0;
					min: 3 0;
					fixed: 1 0;
					align: 0.5 0.5;
					rel1 {
						relative: 0.0  0.0;
						offset: 0 2;
					}
					rel2 {
						relative: 0.0  1.0;
						offset: 0 -2;
					}
					color: ENTRY_CURSOR_COLOR_INC;
				}
				description { state: "hidden" 0.0;
					inherit: "default" 0.0;
					color: 0 0 0 0;
				}
			}
		}
		programs {
			program { name: "show";
				action: STATE_SET "hidden" 0.0;
				in: 0.6 0.0;
				target: "glow";
				after: "show4";
			}
			program { name: "show4";
				action: STATE_SET "default" 0.0;
				in: 0.6 0.0;
				target: "glow";
				after: "show";
			}
			program { name: "focused";
				signal: "elm,action,focus";
				source: "elm";
				action: STATE_SET "focused" 0.0;
				target: "clip2";
				after: "show4";
			}
			program { name: "unfocused";
				signal: "elm,action,unfocus";
				source: "elm";
				action: STATE_SET "default" 0.0;
				target: "clip2";
				after: "stop_glow";
			}
			program { name: "stop_glow";
			action: ACTION_STOP;
				target: "show";
				target: "show4";
			}
		}
	}


	group { name: "elm/entry/selection/default";
		parts {
			part { name: "bg";
				type: RECT;
				scale: 1;
				mouse_events: 0;
				description { state: "default" 0.0;
					color: ENTRY_SELECTION_BG_COLOR;
				}
			}
		}
	}

	group { name: "elm/entry/selection/block_handle";
	data.item: "position" "BOTH";
		images {
		  image: "reader_handler_up.png" COMP;
		}
		parts {
			part { name: "bg";
				type: RECT;
				scale: 1;
				mouse_events: 1;
				description { state: "default" 0.0;
					visible: 0;
					fixed: 1 1;
					align: 0.5 0.25;
					min: 50 80;
					color: 0 0 0 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
			part { name: "handle";
				mouse_events: 1;
				scale: 1;
				description { state: "default" 0.0;
					visible: 0;
			fixed: 1 1;
					align: 0.5 0.0;
					min: 48 66;
					rel1 {
						relative: 0.0 0.0;
						offset: 0 0;
					}
					rel2 {
						relative: 0.0 0.0;
						offset: 0 0;
					}
					image {
						normal: "reader_handler_up.png";
						border: 0 0 0 0;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
		}
		programs {
			program { name: "focused";
				signal: "elm,action,focus";
				source: "elm";
				action: STATE_SET "show" 0.0;
				target: "handle";
				target: "bg";
			}
			program { name: "unfocused";
				signal: "elm,action,unfocus";
				source: "elm";
				action: STATE_SET "default" 0.0;
				target: "handle";
				target: "bg";
			}
		}
	}

	group { name: "elm/entry/selection/block_handle_top";
	data.item: "position" "BOTH";
		images {
		  image: "reader_handler_down.png" COMP;
		}
		parts {
			part { name: "bg";
				type: RECT;
				scale: 1;
				mouse_events: 1;
				description { state: "default" 0.0;
					visible: 0;
					fixed: 1 1;
					align: 0.5 0.75;
					min: 50 80;
					color: 0 0 0 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
			part { name: "handle";
				mouse_events: 1;
				scale: 1;
				description { state: "default" 0.0;
					visible: 0;
			fixed: 1 1;
					align: 0.5 1.0;
					min: 48 66;
					rel1 {
						relative: 0.0 0.0;
						offset: 0 0;
					}
					rel2 {
						relative: 0.0 0.0;
						offset: 0 0;
					}
					image {
						normal: "reader_handler_down.png";
						border: 0 0 0 0;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
		}
		programs {
			program { name: "focused";
				signal: "elm,action,focus";
				source: "elm";
				action: STATE_SET "show" 0.0;
				target: "handle";
				target: "bg";
			}
			program { name: "unfocused";
				signal: "elm,action,unfocus";
				source: "elm";
				action: STATE_SET "default" 0.0;
				target: "handle";
				target: "bg";
			}
		}
	}
/////////////////////////////////////////////////////////////////////////
	group { name: "elm/entry/selection/block_handle_left";
		data.item: "position" "BOTTOM";
		data.item: "height" "40";
		images {
		  image: "copy&paste_Icon_left.png" COMP;
		  image: "copy&paste_Icon_left_press.png" COMP;
		  image: "copy&paste_Icon_left_top.png" COMP;
		  image: "copy&paste_Icon_left_top_press.png" COMP;
		}
		parts {
			part { name: "bg";
				type: RECT;
				scale: 1;
				mouse_events: 1;
				description { state: "default" 0.0;
					visible: 0;
					fixed: 1 1;
					align: 1 0;
					min: ENTRY_SELECTION_BLOCK_HANDLE_MIN_SIZE;
					color: 0 0 0 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
			}
			part { name: "handle";
				mouse_events: 1;
				scale: 1;
				description { state: "default" 0.0;
					visible: 0;
					fixed: 1 1;
					align: 1 0;
					min: ENTRY_SELECTION_BLOCK_HANDLE_MIN_SIZE;
					rel1 {
						relative: 1.1 0.0;
						offset: 0 -2;
						to: "bg";
					}
					rel2 {
						relative: 1.1 0.0;
						offset: 0 -2;
						to: "bg";
					}
					image {
						normal: "copy&paste_Icon_left.png";
						border: 0 0 0 0;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
				description { state: "top" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 1 1;
					image {
						normal: "copy&paste_Icon_left_top.png";
					}
				}
				description { state: "press" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					image {
						normal: "copy&paste_Icon_left_press.png";
					}
				}
				description { state: "top_press" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 1 1;
					image {
						normal: "copy&paste_Icon_left_top_press.png";
					}
				}
			}
		}
		script {
			public handler_ontop;
			public handler_pressed;
			public handler_focused;
		}
		programs {
			program { name: "focused";
				signal: "edje,focus,in";
				source: "edje";
				script {
					set_int(handler_focused, 1);
				}
			}
			program { name: "unfocused";
				signal: "edje,focus,out";
				source: "edje";
				script {
					set_int(handler_focused, 0);
					set_state(PART:"handle", "default", 0.0);
				}
			}
			program { name: "top";
			signal: "elm,state,top";
				source: "elm";
				script {
					new pressed;
					new focused;
					pressed = get_int(handler_pressed);
					focused = get_int(handler_focused);
					set_int(handler_ontop, 1);
                                        if (focused)
                                        {
                                             if (pressed)
                                               set_state(PART:"handle", "top_press", 0.0);
                                             else
                                               set_state(PART:"handle", "top", 0.0);
                                        }
                                        else
                                        {
                                             set_state(PART:"handle", "default", 0.0);
                                        }
				}
			}
			program { name: "bottom";
			signal: "elm,state,bottom";
				source: "elm";
				script {
					new pressed;
					new focused;
					pressed = get_int(handler_pressed);
					focused = get_int(handler_focused);
					set_int(handler_ontop, 0);
                                        if (focused)
                                        {
                                             if (pressed)
                                               set_state(PART:"handle", "press", 0.0);
                                             else
                                               set_state(PART:"handle", "show", 0.0);
                                        }
                                        else
                                        {
                                             set_state(PART:"handle", "default", 0.0);
                                        }
				}
			}
			program { name: "pressed";
				signal: "mouse,down,1";
				source: "handle";
				script {
					new pos;
					pos = get_int(handler_ontop);
					set_int(handler_pressed, 1);
					if (pos)
						set_state(PART:"handle", "top_press", 0.0);
					else
						set_state(PART:"handle", "press", 0.0);
				}
			}
			program { name: "unpressed";
				signal: "mouse,up,1";
				source: "handle";
				script {
					new pos;
					pos = get_int(handler_ontop);
					set_int(handler_pressed, 0);
					if (pos)
						set_state(PART:"handle", "top", 0.0);
					else
						set_state(PART:"handle", "show", 0.0);
				}
			}
		}
	}

	group { name: "elm/entry/selection/block_handle_right";
		data.item: "position" "BOTH";
		data.item: "height" "40";
		images {
		  image: "copy&paste_Icon_right.png" COMP;
		  image: "copy&paste_Icon_right_press.png" COMP;
		  image: "copy&paste_Icon_right_top.png" COMP;
		  image: "copy&paste_Icon_right_top_press.png" COMP;
		}
		parts {
			part { name: "handle";
				mouse_events: 1;
				scale: 1;
				description { state: "default" 0.0;
					visible: 0;
					fixed: 1 1;
					align: 0 0;
					min: ENTRY_SELECTION_BLOCK_HANDLE_MIN_SIZE;
					rel1 {
						relative: 0.0 0.0;
						offset: 0 -2;
					}
					rel2 {
						relative: 0.0 0.0;
						offset: 0 -2;
					}
					image {
						normal: "copy&paste_Icon_right.png";
						border: 0 0 0 0;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					visible: 1;
				}
				description { state: "top" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 0 1;
					image {
						normal: "copy&paste_Icon_right_top.png";
					}
				}
				description { state: "press" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					image {
						normal: "copy&paste_Icon_right_press.png";
					}
				}
				description { state: "top_press" 0.0;
					inherit: "default" 0.0;
					visible: 1;
					align: 0 1;
					image {
						normal: "copy&paste_Icon_right_top_press.png";
					}
				}
			}
		}
		script {
			public handler_ontop;
			public handler_pressed;
			public handler_focused;
		}
		programs {
			program { name: "focused";
				signal: "edje,focus,in";
				source: "edje";
				script {
					set_int(handler_focused, 1);
				}
			}
			program { name: "unfocused";
				signal: "edje,focus,out";
				source: "edje";
				script {
					set_int(handler_focused, 0);
					set_state(PART:"handle", "default", 0.0);
				}
			}
			program { name: "top";
			signal: "elm,state,top";
				source: "elm";
				script {
					new pressed;
					new focused;
					pressed = get_int(handler_pressed);
					focused = get_int(handler_focused);
                                        set_int(handler_ontop, 1);
                                        if (focused)
                                        {
                                             if (pressed)
                                               set_state(PART:"handle", "top_press", 0.0);
                                             else
                                               set_state(PART:"handle", "top", 0.0);
                                        }
                                        else
                                        {
                                             set_state(PART:"handle", "default", 0.0);
                                        }
				}
			}
			program { name: "bottom";
			signal: "elm,state,bottom";
				source: "elm";
				script {
					new pressed;
					new focused;
					pressed = get_int(handler_pressed);
					focused = get_int(handler_focused);
					set_int(handler_ontop, 0);
                                        if (focused)
                                        {
                                             if (pressed)
                                               set_state(PART:"handle", "press", 0.0);
                                             else
                                               set_state(PART:"handle", "show", 0.0);
                                        }
                                        else
                                        {
                                             set_state(PART:"handle", "default", 0.0);
                                        }
				}
			}
			program { name: "pressed";
				signal: "mouse,down,1";
				source: "handle";
				script {
					new pos;
					pos = get_int(handler_ontop);
					set_int(handler_pressed, 1);
					if (pos)
						set_state(PART:"handle", "top_press", 0.0);
					else
						set_state(PART:"handle", "press", 0.0);
				}
			}
			program { name: "unpressed";
				signal: "mouse,up,1";
				source: "handle";
				script {
					new pos;
					pos = get_int(handler_ontop);
					set_int(handler_pressed, 0);
					if (pos)
						set_state(PART:"handle", "top", 0.0);
					else
						set_state(PART:"handle", "show", 0.0);
				}
			}
		}
	}


/////////////////////////////////////////////////////////////////////////

	group { name: "elm/entry/selection/block_bar";
		images {
		  image: "reader_longtap_blue.png" COMP;
		}
		parts {
			part { name: "bar_bg";
				scale: 1;
				mouse_events: 0;
				description { state: "default" 0.0;
					visible: 0;
					image {
						normal: "reader_longtap_blue.png";
						border: 0 0 0 0;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
			}
		}
	}



	group { name: "elm/entry/anchor/default";
		parts {
			part { name: "bg";
				type: RECT;
				mouse_events: 0;
				description { state: "default" 0.0;
					color: 128 0 0 64;
				}
			}
		}
	}

    group { name: "elm/entry/preedit/default";
        parts {
            part { name: "bg";
                type: RECT;
                mouse_events: 0;
                description { state: "default" 0.0;
                    color: 128 128 128 255;
                }
            }
        }
   }


#define MAGNIFIER_SCALE 1.2

	group { name: "elm/entry/magnifier/fill-width";
		data.item: "height" MAGNIFIER_HEIGHT_FILL;
		data.item: "scale" MAGNIFIER_SCALE;
		images {
		  image: "magnifier_noarrow.png" COMP;
		  image: "magnifier_noarrow_line.png" COMP;
		}
		parts {
			part { name: "bg";
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					align: 0.5 0.0;
					rel1 { offset: -20 -10; }
					rel2 { offset: 22 15; }
					image {
						normal: "magnifier_noarrow.png";
						border: 25 25 35 25;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
			}
			part { name: "swallow";
				type: SWALLOW;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					align: 0.0 0.0;
					rel1 {
						to: "bg";
						offset: 18 18;
					}
					rel2 {
						to: "bg";
						offset: -20 -20;
					}
				}
			}
			part { name: "outline";
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					visible: 0;
					align: 0.0 0.0;
					rel1 { to: "bg"; offset: 0 0; }
					rel2 { to: "bg"; offset: -1 -1; }
					image {
						normal: "magnifier_noarrow_line.png";
						border: 25 25 35 25;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
			}
		}
	}


	group { name: "elm/entry/magnifier/fixed-size";
		data.item: "height" MAGNIFIER_HEIGHT_FIXED;
		data.item: "scale" MAGNIFIER_SCALE;
		images {
		  image: "magnifier.png" COMP;
		  image: "magnifier_line.png" COMP;
		}
		parts {
			part { name: "bg";
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
			fixed: 1 1;
					min: MAGNIFIER_WIDTH_FIXED MAGNIFIER_HEIGHT_FIXED;
					align: 0.5 0.0;
					rel1.offset: 0 8;
					image {
						normal: "magnifier.png";
						border: 12 14 14 20;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
			}
			part { name: "swallow";
				type: SWALLOW;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
			fixed: 1 1;
					align: 0.0 0.0;
					rel1 {
						to: "bg";
						offset: 12 14;
					}
					rel2 {
						to: "bg";
						offset: -14 -20;
					}
				}
			}
			part { name: "outline";
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
			fixed: 1 1;
					visible: 0;
					align: 0.0 0.0;
					rel1 { to: "bg"; offset: 0 0; }
					rel2 { to: "bg"; offset: -1 -1; }
					image {
						normal: "magnifier_line.png";
						border: 12 14 14 20;
					}
					image.middle: SOLID;
					fill.smooth: 0;
				}
			}
		}
	}

	group { name: "elm/entry/matchlist/default";
		data.item: "max_height" "230";
		parts {
			part { name: "base";
				type: RECT;
				scale : 1;
				mouse_events: 1;
				repeat_events: 1;
				description { state: "default" 0.0;
					color: 0 0 0 0;
					rel1 {
						relative: 0.0 0.0;
						offset: 0 20;
					}
					rel2 {
						relative: 1.0 1.0;
						offset: 0 20;
					}
				}
			}
			part { name: "elm.swallow.content";
				type: SWALLOW;
				description { state: "default" 0.0;
					align: 0.0 0.0;
					rel1 {
						to: "base";
					}
					rel2 {
						to: "base";
					}
				}
			}
		}
	}

/* Entry's bubble style */

      styles
	{
	   style { name: "entry_bubble_date_area_textblock_style";
			base: "font=SLP:style=Roman font_size="ENTRY_BUBBLE_DATE_AREA_TEXT_SIZE_INC" color="ENTRY_TEXT_COLOR_INC" left_margin=2 right_margin=2 wrap=mixed text_class=entry";
	      tag:  "br" "\n";
	      tag:  "ps" "ps";
	      tag:  "tab" "\t";
	      tag:  "em" "+ font=SLP:style=Oblique";
	      tag:  "b" "+ font=SLP:style=Bold";
	      tag:  "link" "+ color=#800 underline=on underline_color=#8008";
	      tag:  "hilight" "+ font=SLP:style=Bold";
	      tag:  "preedit" "+ underline=on underline_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC;
	      tag:  "preedit_sel" "+ backing=on backing_color="ENTRY_PREEDIT_BACKGROUND_COLOR_INC" color="ENTRY_PREEDIT_TEXT_COLOR_INC" underline=on underline_color="ENTRY_PREEDIT_TEXT_COLOR_INC;
	   }
	}

   group { name: "elm/entry/base/readmessage";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
         part {
            name: "elm.rect.left.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
	       min: ENTRY_BUBBLE_EX_PAD 0;
               fixed: 1 0;
	       align: 0.0 0.0;
               color: 0 0 0 0;
	       rel2.relative: 0.0 1.0;
	    }
         }
         part {
            name: "elm.rect.right.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
	       min: ENTRY_BUBBLE_IX_PAD 0;
	       fixed: 1 0;
	       align: 0.0 0.0;
               color: 0 0 0 0;
	       rel1 { relative: 1.0 0.0; to: "elm.text"; }
               rel2.to: "elm.text";
	    }
	 }
         part {
           name: "elm.rect.top.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_Y_PAD;
              fixed: 0 1;
              align: 0.0 0.0;
              color: 0 0 0 0;
              rel2.relative: 1.0 0.0;
            }
         }
         part {
           name: "elm.rect.bottom.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_Y_PAD;
              fixed: 0 1;
              align: 0.0 1.0;
              color: 0 0 0 0;
              rel1.relative: 0.0 1.0;
            }
         }
	 part {
	    name: "elm.image.bg";
	    type: IMAGE;
	    scale: 1;
	    description {
	       state: "default" 0.0;
	       rel2.to_x: "elm.rect.right.pad";
	       image {
		  normal: "00_MessageBubble_BG_receive.png";
		  border: 1 20 13 20;
		  border_scale: 1;
	       }
	    }
	 }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: EDITABLE;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 1;
	    source: "elm/entry/selection/default"; // selection under
	    source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
	    source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
	    source4: "elm/entry/cursor/default"; // cursorover
	    source5: "elm/entry/anchor/default"; // anchor under
//	    source6: "X"; // anchor over
	    description { state: "default" 0.0;
               fixed: 1 0;
               align: 0.0 0.0;
               rel1 { relative: 1.0 1.0; to_x: "elm.rect.left.pad"; to_y: "elm.rect.top.pad"; }
               rel2 { relative: 1.0 0.0; to_y: "elm.rect.bottom.pad"; }
	       text {
		  style: "entry_textblock_style";
		  min: 0 1;
                  max: 1 0;
	       }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_textblock_disabled_style";
	       }
	    }
	 }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
      }
   }

   group { name: "elm/entry/base-noedit/readmessage";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
         part {
            name: "elm.rect.left.pad";
	        type: RECT;
	        scale: 1;
	        description {
	           state: "default" 0.0;
               min: ENTRY_BUBBLE_EX_PAD 0;
               fixed: 1 0;
	           align: 0.0 0.0;
               color: 0 0 0 0;
	           rel2.relative: 0.0 1.0;
	       }
	       description {
               state: "callerid_on" 0.0;
               inherit: "default" 0.0;
	           min: ENTRY_BUBBLE_EX_CALLERID_PAD 0;
	       }
         }
         part {
            name: "elm.rect.right.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               min: ENTRY_BUBBLE_IX_PAD 0;
	       fixed: 1 0;
	       align: 0.0 0.0;
               color: 0 0 0 0;
	       rel1 { relative: 1.0 0.0; to: "elm.text"; }
               rel2.to: "elm.text";
	    }
	 }
         part {
           name: "elm.rect.top.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_Y_PAD;
              fixed: 0 1;
              align: 0.0 0.0;
              color: 0 0 0 0;
              rel2.relative: 1.0 0.0;
           }
         }
         part {
           name: "elm.rect.topleft.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: ENTRY_BUBBLE_CALLERID_PAD ENTRY_BUBBLE_CALLERID_PAD;
              max: ENTRY_BUBBLE_CALLERID_PAD ENTRY_BUBBLE_CALLERID_PAD;
              fixed: 1 1;
              align: 0.0 0.0;
              visible: 0;
           }
         }
         part {
           name: "elm.rect.bottom.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_BOTTOM_PAD;
              fixed: 0 1;
              align: 0.0 1.0;
              color: 0 0 0 0;
              rel1.relative: 0.0 1.0;
           }
         }
         part {
           name: "elm.rect.bottomleft.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: ENTRY_BUBBLE_BOTTOMRIGHT_PAD  2;
              max: ENTRY_BUBBLE_BOTTOMRIGHT_PAD 2;
              align: 0.0 1.0;
			  visible: 0;
           }
         }
         part {
           name: "elm.rect.groupchat.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 46 30;
              max: 46 30;
              align: 0.0 0.0;
			  visible: 0;
           }
           description {
              state: "callerid_on" 0.0;
              inherit: "default" 0.0;
              min: 130 30;
              max: 130 30;
           }
         }
         part {
           name: "elm.rect.groupchat.text.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 120 14;
              max: 120 14;
              align: 0.0 0.0;
			  visible: 0;
			  rel1 { relative: 0.0 1.0; to: "elm.rect.groupchat.pad"; }
           }
         }
         part { name: "elm.text.groupchat";
            type: TEXT;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.0 0.0;
               fixed: 1 1;
               text {
                  font: "SLP:style=Roman";
                  size: ENTRY_BUBBLE_GROUPCHAT_SIZE_INC;
                  min: 1 0;
				  align: 0.0 0.5;
                  text_class: "slp_roman";
               }
               visible: 1;
               color: ENTRY_BUBBLE_GROUPCHAT_COLOR_INC;
               rel1 { relative: 1.0 0.0; to: "elm.rect.groupchat.pad"; }
               rel2.to_y: "elm.rect.groupchat.pad";
            }
         }
	 part {
	    name: "elm.image.bg";
	    type: IMAGE;
	    scale: 1;
	    description {
	       state: "default" 0.0;
	       rel2.to_x: "elm.rect.right.pad";
	       image {
		  normal: "00_MessageBubble_BG_receive.png";
		  border: ENTRY_BUBBLE_RECEV_BG_BORDER_INC;
		  border_scale: 1;
	       }
	    }
	    description {
	       state: "callerid_on" 0.0;
           inherit: "default" 0.0;
           rel1 { relative: 1.0 0.0; to_x: "elm.rect.bottomleft.pad"; }
	    }
	    description {
	       state: "callerid_groupchat" 0.0;
           inherit: "default" 0.0;
           rel1 { relative: 1.0 1.0; to_x: "elm.rect.bottomleft.pad"; to_y:"elm.rect.groupchat.pad"; }
	    }
	    description {
	       state: "groupchat_on" 0.0;
           inherit: "default" 0.0;
           rel1 { relative: 0.0 1.0; to_y:"elm.rect.groupchat.pad"; }
	    }
	 }
         // it's temporary blocked for prepare entry's signal feature
         /*
         part {
           name: "elm.text.subject";
           type: TEXTBLOCK;
           scale: 1;
           description {
              state: "default" 0.0;
              align: 0.0 0.0;
              text {
                 style: "entry_textblock_style";
                 min: 0 1;
              }
              rel1 { relative: 1.0 1.0; to_x: "elm.rect.left.pad"; to_y: "elm.rect.top.pad"; }
              rel2 { relative: 0.0 1.0; to_x: "elm.rect.right.pad"; to_y: "elm.rect.top.pad"; }
           }
         }
         */

         part {
           name: "elm.rect.subject.line";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              visible: 0;
              min: 0 1;
              align: 0.0 0.0;
              color: 0 0 0 255;
              rel1 { relative: 1.0 1.0; to_x: "elm.rect.left.pad"; to_y: "elm.rect.top.pad"; }
              rel2 { relative: 0.0 1.0; to_x: "elm.rect.right.pad"; to_y: "elm.rect.top.pad"; }
           }
         }
         part {
            name: "elm.swallow.callerid";
            type: SWALLOW;
            scale: 1;
            description {
               state: "default" 0.0;
               min: ENTRY_BUBBLE_CALLERID_WIDTH ENTRY_BUBBLE_CALLERID_HEIGHT;
               max: ENTRY_BUBBLE_CALLERID_WIDTH ENTRY_BUBBLE_CALLERID_HEIGHT;
               fixed: 1 1;
               align: 0.0 0.0;
               visible: 0;
               rel1 { relative: ENTRY_BUBBLE_RECEV_CALLERID_REL1_INC; to: "elm.rect.topleft.pad"; to_y: "elm.rect.topleft.pad"; }
               rel2 { relative: ENTRY_BUBBLE_RECEV_CALLERID_REL2_INC; to_y: "elm.rect.bottom.pad"; }
            }
            description { state: "callerid_on" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part {
            name: "elm.rect.callerid.pad";
            type: RECT;
            scale: 1;
            description {
               state: "default" 0.0;
               min: ENTRY_BUBBLE_CALLERID_PAD ENTRY_BUBBLE_CALLERID_PAD;
               max: ENTRY_BUBBLE_CALLERID_PAD ENTRY_BUBBLE_CALLERID_PAD;
               fixed: 1 1;
               align: 0.0 0.0;
               visible: 0;
               rel1 { relative: 1.0 1.0; to: "elm.swallow.callerid"; to_y: "elm.rect.top.pad"; }
               rel2 { relative: 1.0 0.0; to_y: "elm.rect.bottom.pad"; }
            }
         }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: PLAIN;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 1;
	    source: "elm/entry/selection/default"; // selection under
	    source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
	    source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
	    source5: "elm/entry/anchor/default"; // anchor under
	    description {
               state: "default" 0.0;
               fixed: 1 0;
               align: 0.0 0.0;
               rel1 { relative: 1.0 1.0; to_x: "elm.rect.left.pad"; to_y: "elm.rect.subject.line"; }
               rel2 { relative: 1.0 1.0; to_y: "elm.rect.subject.line"; }
	       text {
		  style: "entry_textblock_style";
		  min: 0 1;
                  max: 1 0;
	       }
            }
		/* callerid only */
	    description { state: "callerid_on" 0.0;
               inherit: "default" 0.0;
               rel1 { relative: 1.0 1.0; to_x: ENTRY_BUBBLE_READ_TEXT_CALLID_REL1_X_INC; to_y: "elm.rect.subject.line"; }
               rel2 { relative: 1.0 1.0; to_y: "elm.rect.subject.line"; }
	    }
		/* callerid and groupchat */
	    description { state: "callerid_groupchat" 0.0;
               inherit: "default" 0.0;
               rel1 { relative: 1.0 1.0; to_x: ENTRY_BUBBLE_READ_TEXT_CALLID_REL1_X_INC; to_y: ENTRY_BUBBLE_TEXT_CALLID_REL2_Y_INC; }
               rel2 { relative: 1.0 1.0; to_y: ENTRY_BUBBLE_TEXT_CALLID_REL2_Y_INC; }
	    }
		/* groupchat only */
	    description { state: "groupchat_on" 0.0;
               inherit: "default" 0.0;
               rel1 { relative: 1.0 1.0; to_x: "elm.rect.left.pad"; to_y: ENTRY_BUBBLE_TEXT_CALLID_REL2_Y_INC; }
               rel2 { relative: 1.0 1.0; to_y: ENTRY_BUBBLE_TEXT_CALLID_REL2_Y_INC; }
	    }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               text {
                  style: "entry_textblock_disabled_style";
               }
            }
	 }
         part {
            name: "elm.rect.status.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               min: ENTRY_BUBBLE_STATUS_TIME_PAD_MIN_H_INC 64;
               max: ENTRY_BUBBLE_STATUS_TIME_PAD_MIN_H_INC 64;
	       fixed: 1 1;
	       align: 0.0 1.0;
               visible: 0;
			   color: 255 0 0 255;
	       rel1 { relative: ENTRY_BUBBLE_READ_STATUS_TIME_PAD_REL_INC; to_x: "elm.rect.right.pad"; to_y: "elm.rect.bottom.pad"; }
	       rel2 { relative: 1.0 1.0; to_y: "elm.rect.bottom.pad"; }
	    }
	 }
         part {
            name: "elm.rect.time.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               min: ENTRY_BUBBLE_STATUS_TIME_PAD_MIN_H_INC GENLIST_PADDING_34_INC;
               max: ENTRY_BUBBLE_STATUS_TIME_PAD_MIN_H_INC GENLIST_PADDING_34_INC;
	       fixed: 1 1;
	       align: 0.0 0.0;
               visible: 0;
			   color: 0 255 0 255;
	       rel1.to: "elm.rect.status.pad";
	       rel2 { relative: 1.0 1.0; to_y: "elm.rect.bottom.pad"; }
	    }
	 }
         part { name: "elm.text.status";
            type: TEXT;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.0 1.0;
               fixed: 1 1;
               text {
                  font: "SLP:style=Roman";
                  size: ENTRY_BUBBLE_STATUS_TIME_SIZE_INC;
                  min: 1 0;
                  text_class: "slp_roman";
               }
               visible: 1;
               color: ENTRY_BUBBLE_READ_STATUS_TIME_COLOR_INC;
               rel1 { relative: ENTRY_BUBBLE_READ_STATUS_REL_INC; to_x: "elm.rect.status.pad"; to_y: "elm.rect.status.pad"; }
               rel2 { relative: ENTRY_BUBBLE_READ_STATUS_REL_INC; to_x: "elm.rect.status.pad"; to_y: "elm.rect.status.pad"; }
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "elm.text.time";
            type: TEXT;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.0 0.0;
               fixed: 1 1;
               text {
                  font: "SLP:style=Roman";
                  size: ENTRY_BUBBLE_STATUS_TIME_SIZE_INC;
                  min: 1 0;
                  text_class: "slp_roman";
               }
               visible: 1;
               color: ENTRY_BUBBLE_READ_STATUS_TIME_COLOR_INC;
               rel1 { relative: ENTRY_BUBBLE_READ_TIME_REL_INC; to_x: "elm.rect.time.pad"; to_y: "elm.rect.time.pad"; }
               rel2 { relative: ENTRY_BUBBLE_READ_TIME_REL_INC; to_x: "elm.rect.time.pad"; to_y: "elm.rect.time.pad"; }
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part {
            name: "elm.swallow.icon1";
	    type: SWALLOW;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               min: GENLIST_PADDING_64_INC GENLIST_PADDING_64_INC;
               max: GENLIST_PADDING_64_INC GENLIST_PADDING_64_INC;
	       fixed: 1 1;
	       align: 0.0 1.0;
               visible: 0;
	       rel1 { relative: 1.5 0.3; to_x: "elm.rect.right.pad"; to_y: "elm.rect.bottom.pad"; }
	       rel2 { relative: 1.0 0.3; to_y: "elm.rect.bottom.pad"; }
	    }
            description { state: "enabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
	 }
         part {
           name: "elm.swallow.end";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.0 0.0;
              rel1 { relative: 1.0 1.0; to_x: "elm.rect.left.pad"; to_y: "elm.text"; }
              rel2 { relative: 0.0 0.0; to_x: "elm.rect.right.pad"; to_y: "elm.rect.bottom.pad"; }
           }
         }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
	 program { name: "go_callerid_on";
	    signal: "elm,state,callerid,enabled";
	    source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "default")) {
              set_state(PART:"elm.image.bg", "callerid_on", 0.0);
              set_state(PART:"elm.text", "callerid_on", 0.0);
			}
            else if (!strcmp(st, "groupchat_on")) {
              set_state(PART:"elm.image.bg", "callerid_groupchat", 0.0);
              set_state(PART:"elm.text", "callerid_groupchat", 0.0);
			}

            set_state(PART:"elm.swallow.callerid", "callerid_on", 0.0);
            set_state(PART:"elm.rect.left.pad", "callerid_on", 0.0);
            set_state(PART:"elm.rect.groupchat.pad", "callerid_on", 0.0);
         }
	 }
	 program { name: "go_callerid_off";
	    signal: "elm,state,callerid,disabled";
	    source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "callerid_groupchat")) {
              set_state(PART:"elm.image.bg", "groupchat_on", 0.0);
              set_state(PART:"elm.text", "groupchat_on", 0.0);
			}
            else {
              set_state(PART:"elm.image.bg", "default", 0.0);
              set_state(PART:"elm.text", "default", 0.0);
			}

            set_state(PART:"elm.swallow.callerid", "default", 0.0);
            set_state(PART:"elm.rect.groupchat.pad", "default", 0.0);
		 }
	 }
/* groupchat - since white-hd theme */
#if ENTRY_BUBBLE_GROUPCHART_ENABLE_INC
	 program { name: "go_groupchat_on";
	    signal: "elm,state,groupchat,enabled";
	    source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "default")) {
              set_state(PART:"elm.image.bg", "groupchat_on", 0.0);
              set_state(PART:"elm.text", "groupchat_on", 0.0);
			}
            else if (!strcmp(st, "callerid_on")) {
              set_state(PART:"elm.image.bg", "callerid_groupchat", 0.0);
              set_state(PART:"elm.text", "callerid_groupchat", 0.0);
			}
         }
	 }
#endif
	 program { name: "go_textstatus_on";
	    signal: "elm,state,text,status,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text.time";
	    target: "elm.text.status";
            after: "go_contentstatus_off";
	 }
	 program { name: "go_textstatus_off";
	    signal: "elm,state,text,status,disbled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text.time";
	    target: "elm.text.status";
	 }
	 program { name: "go_contentstatus_on";
	    signal: "elm,state,content,status,enabled";
	    source: "elm";
	    action: STATE_SET "enabled" 0.0;
	    target: "elm.swallow.icon1";
            after: "go_textstatus_off";
	 }
	 program { name: "go_contentstatus_off";
	    signal: "elm,state,content,status,disabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.swallow.icon1";
	 }
      }
   }

   group { name: "elm/entry/base-noedit-charwrap/readmessage";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
         part {
            name: "elm.rect.left.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               min: ENTRY_BUBBLE_EX_PAD 0;
               fixed: 1 0;
	       align: 0.0 0.0;
               color: 0 0 0 0;
	       rel2.relative: 0.0 1.0;
	    }
         }
         part {
            name: "elm.rect.right.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               min: ENTRY_BUBBLE_IX_PAD 0;
               fixed: 1 0;
	       align: 0.0 0.0;
               color: 0 0 0 0;
	       rel1 { relative: 1.0 0.0; to_x: "elm.text"; }
               rel2.to_x: "elm.text";
	    }
	 }
         part {
           name: "elm.rect.top.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_Y_PAD;
              fixed: 0 1;
              align: 0.0 0.0;
              color: 0 0 0 0;
              rel2.relative: 1.0 0.0;
           }
         }
         part {
           name: "elm.rect.bottom.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_Y_PAD;
              fixed: 0 1;
              align: 0.0 1.0;
              color: 0 0 0 0;
              rel1.relative: 0.0 1.0;
           }
         }
	 part {
	    name: "elm.image.bg";
	    type: IMAGE;
	    scale: 1;
	    description {
	       state: "default" 0.0;
	       rel2.to_x: "elm.rect.right.pad";
	       image {
		  normal: "00_MessageBubble_BG_receive.png";
		  border: 1 20 13 20;
		  border_scale: 1;
	       }
	    }
	 }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: PLAIN;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 1;
	    source: "elm/entry/selection/default"; // selection under
	    source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
	    source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
	    source5: "elm/entry/anchor/default"; // anchor under
	    description { state: "default" 0.0;
               fixed: 1 0;
               align: 0.0 0.0;
               rel1 { relative: 1.0 1.0; to_x: "elm.rect.left.pad"; to_y: "elm.rect.top.pad"; }
               rel2 { relative: 1.0 0.0; to_y: "elm.rect.bottom.pad"; }
	       text {
		  style: "entry_textblock_style_charwrap";
		  min: 0 1;
                  max: 1 0;
	       }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_textblock_disabled_style_charwrap";
	       }
	    }
	 }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
      }
   }

   group { name: "elm/entry/base/sentmessage";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
         part {
            name: "elm.rect.right.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
	       min: ENTRY_BUBBLE_EX_PAD 0;
               fixed: 1 0;
	       align: 1.0 0.0;
               color: 0 0 0 0;
               rel1.relative: 1.0 0.0;
	    }
         }
         part {
            name: "elm.rect.left.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
	       min: ENTRY_BUBBLE_IX_PAD 0;
	       fixed: 1 0;
	       align: 1.0 0.0;
               color: 0 0 0 0;
	       rel1 { relative: 0.0 0.0; to: "elm.text"; }
               rel2 { relative: 0.0 1.0; to: "elm.text"; }
	    }
	 }
         part {
           name: "elm.rect.top.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_Y_PAD;
              fixed: 0 1;
              align: 0.0 0.0;
              color: 0 0 0 0;
              rel2.relative: 1.0 0.0;
           }
         }
         part {
           name: "elm.rect.bottom.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_Y_PAD;
              fixed: 0 1;
              align: 0.0 1.0;
              color: 0 0 0 0;
              rel1.relative: 0.0 1.0;
           }
         }
	 part {
	    name: "elm.image.bg";
	    type: IMAGE;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               rel1.to_x: "elm.rect.left.pad";
	       image {
		  normal: "00_MessageBubble_BG_send.png";
		  border: 20 1 13 20;
		  border_scale: 1;
	       }
	    }
	 }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: EDITABLE;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 1;
	    source: "elm/entry/selection/default"; // selection under
	    source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
	    source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
	    source4: "elm/entry/cursor/default"; // cursorover
	    source5: "elm/entry/anchor/default"; // anchor under
//	    source6: "X"; // anchor over
	    description { state: "default" 0.0;
	       fixed: 1 0;
               align: 1.0 0.0;
               rel1 { relative: 0.0 1.0; to_y: "elm.rect.top.pad";}
               rel2 { relative: 0.0 0.0; to_x: "elm.rect.right.pad"; to_y: "elm.rect.bottom.pad"; }
	       text {
		  style: "entry_textblock_style";
		  min: 0 1;
                  max: 1 0;
	       }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_textblock_disabled_style";
	       }
	    }
	 }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
      }
   }

   group { name: "elm/entry/base-noedit/sentmessage";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
         part {
           name: "elm.rect.right.pad";
	       type: RECT;
	       scale: 1;
	       description {
	          state: "default" 0.0;
	          min: ENTRY_BUBBLE_EX_PAD 0;
              fixed: 1 0;
	          align: 1.0 0.0;
              color: 0 0 0 0;
              rel1.relative: 1.0 0.0;
	       }
	       description {
               state: "callerid_on" 0.0;
               inherit: "default" 0.0;
	           min: ENTRY_BUBBLE_EX_CALLERID_PAD 0;
	       }
         }
         part {
            name: "elm.rect.left.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
	       min: ENTRY_BUBBLE_IX_PAD 0;
	       fixed: 1 0;
	       align: 1.0 0.0;
               color: 0 0 0 0;
	       rel1 { relative: 0.0 0.0; to: "elm.text"; }
               rel2 { relative: 0.0 1.0; to: "elm.text"; }
	    }
	 }
         part {
           name: "elm.rect.topright.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: ENTRY_BUBBLE_CALLERID_PAD ENTRY_BUBBLE_CALLERID_PAD;
              max: ENTRY_BUBBLE_CALLERID_PAD ENTRY_BUBBLE_CALLERID_PAD;
              align: 1.0 0.0;
              visible: 0;
              rel1.relative: 1.0 0.0;
           }
         }
         part {
           name: "elm.rect.top.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_Y_PAD;
              fixed: 0 1;
              align: 0.0 0.0;
              color: 0 0 0 0;
              rel2.relative: 1.0 0.0;
           }
         }
         part {
           name: "elm.rect.bottom.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_BOTTOM_PAD;
              fixed: 0 1;
              align: 0.0 1.0;
              color: 0 0 0 0;
              rel1.relative: 0.0 1.0;
           }
         }
         part {
           name: "elm.rect.bottomright.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: ENTRY_BUBBLE_BOTTOMRIGHT_PAD  2;
              max: ENTRY_BUBBLE_BOTTOMRIGHT_PAD 2;
              align: 1.0 1.0;
			  visible: 0;
           }
         }
         part {
           name: "elm.rect.groupchat.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 46 30;
              max: 46 30;
              align: 1.0 0.0;
			  visible: 0;
           }
           description {
              state: "callerid_on" 0.0;
              inherit: "default" 0.0;
              min: 130 30;
              max: 130 30;
           }
         }
         part {
           name: "elm.rect.groupchat.text.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 120 14;
              max: 120 14;
              align: 0.0 0.0;
			  visible: 0;
			  rel1 { relative: 0.0 1.0; to: "elm.rect.groupchat.pad"; }
           }
         }
         part { name: "elm.text.groupchat";
            type: TEXT;
            scale: 1;
            description { state: "default" 0.0;
               align: 1.0 1.0;
               fixed: 1 1;
               text {
                  font: "SLP:style=Roman";
                  size: ENTRY_BUBBLE_GROUPCHAT_SIZE_INC;
                  min: 1 0;
				  align: 1.0 0.5;
                  text_class: "slp_roman";
               }
               visible: 1;
               color: ENTRY_BUBBLE_GROUPCHAT_COLOR_INC;
               rel2 { relative: 0.0 1.0; to: "elm.rect.groupchat.pad"; }
            }
         }
	 part {
	    name: "elm.image.bg";
	    type: IMAGE;
	    scale: 1;
	    description {
	       state: "default" 0.0;
           rel1.to_x: "elm.rect.left.pad";
	       image {
		      normal: "00_MessageBubble_BG_send.png";
		      border: ENTRY_BUBBLE_SENT_BG_BORDER_INC;
		      border_scale: 1;
	       }
	    }
	    description {
	       state: "callerid_on" 0.0;
           inherit: "default" 0.0;
           rel2 { relative: 0.0 1.0; to: "elm.rect.bottomright.pad"; }
	    }
	    description {
	       state: "callerid_groupchat" 0.0;
           inherit: "default" 0.0;
		   rel1 { relative: 0.0 1.0; to_x:"elm.rect.left.pad"; to_y:"elm.rect.groupchat.pad"; }
           rel2 { relative: 0.0 1.0; to: "elm.rect.bottomright.pad"; }
	    }
	    description {
	       state: "groupchat_on" 0.0;
           inherit: "default" 0.0;
		   rel1 { relative: 0.0 1.0; to_x:"elm.rect.left.pad"; to_y:"elm.rect.groupchat.pad"; }
	    }
	 }
         // it's temporary blocked for prepare entry's signal feature
         /*
         part {
           name: "elm.text.subject";
           type: TEXTBLOCK;
           scale: 1;
           description {
              state: "default" 0.0;
              align: 0.0 0.0;
              text {
                 style: "entry_textblock_style";
                 min: 0 1;
              }
              rel1 { relative: 1.0 1.0; to_x: "elm.rect.left.pad"; to_y: "elm.rect.top.pad"; }
              rel2 { relative: 0.0 1.0; to_x: "elm.rect.right.pad"; to_y: "elm.rect.top.pad"; }
           }
         }
         */

         part {
           name: "elm.rect.subject.line";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              visible: 0;
              min: 0 1;
              align: 0.0 0.0;
              color: 0 0 0 255;
              rel1 { relative: 1.0 1.0; to_x: "elm.rect.left.pad"; to_y: "elm.rect.top.pad"; }
              rel2 { relative: 0.0 1.0; to_x: "elm.rect.right.pad"; to_y: "elm.rect.top.pad"; }
           }
         }
         part {
            name: "elm.swallow.callerid";
            type: SWALLOW;
            scale: 1;
            description {
               state: "default" 0.0;
               min: ENTRY_BUBBLE_CALLERID_WIDTH ENTRY_BUBBLE_CALLERID_HEIGHT;
               max: ENTRY_BUBBLE_CALLERID_WIDTH ENTRY_BUBBLE_CALLERID_HEIGHT;
               align: 1.0 0.0;
               visible: 0;
               rel1 { relative: ENTRY_BUBBLE_CALLERID_RELATIVE_INC; to_x: "elm.rect.topright.pad"; to_y: "elm.rect.topright.pad"; }
               rel2 { relative: ENTRY_BUBBLE_CALLERID_RELATIVE_INC; to_x: "elm.rect.topright.pad"; to_y: "elm.rect.bottom.pad"; }
            }
            description { state: "callerid_on" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part {
            name: "elm.rect.callerid.pad";
            type: RECT;
            scale: 1;
            description {
               state: "default" 0.0;
               min: ENTRY_BUBBLE_CALLERID_PAD ENTRY_BUBBLE_CALLERID_PAD;
               max: ENTRY_BUBBLE_CALLERID_PAD ENTRY_BUBBLE_CALLERID_PAD;
               align: 1.0 0.0;
               visible: 0;
               rel1 { relative: 0.0 1.0; to_x: "elm.swallow.callerid"; to_y: "elm.rect.topright.pad"; }
               rel2 { relative: 0.0 1.0; to_x: "elm.swallow.callerid"; to_y: "elm.rect.bottom.pad"; }
	        }
         }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: PLAIN;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 1;
	    source: "elm/entry/selection/default"; // selection under
	    source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
	    source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
	    source5: "elm/entry/anchor/default"; // anchor under
	    description {
           state: "default" 0.0;
           fixed: 1 0;
           align: 1.0 0.0;
           rel1 { relative: 0.0 1.0; to_y: "elm.rect.subject.line"; }
           rel2 { relative: 0.0 1.0; to_x: "elm.rect.right.pad"; to_y: "elm.rect.subject.line"; }
	       text {
		      style: "entry_textblock_style";
		      min: 0 1;
              max: 1 0;
	       }
	    }
		/* callerid only */
	    description { state: "callerid_on" 0.0;
               inherit: "default" 0.0;
               rel1 { relative: 0.0 1.0; to_y: "elm.rect.subject.line";}
               rel2 { relative: 0.0 1.0; to_x: ENTRY_BUBBLE_TEXT_CALLID_REL2_X_INC; to_y: "elm.rect.subject.line"; }
	    }
		/* callerid and groupchat */
	    description { state: "callerid_groupchat" 0.0;
               inherit: "default" 0.0;
               rel1 { relative: 0.0 1.0; to_y: ENTRY_BUBBLE_TEXT_CALLID_REL2_Y_INC; }
               rel2 { relative: 0.0 1.0; to_x: ENTRY_BUBBLE_TEXT_CALLID_REL2_X_INC; to_y: ENTRY_BUBBLE_TEXT_CALLID_REL2_Y_INC; }
	    }
		/* groupchat only */
	    description { state: "groupchat_on" 0.0;
               inherit: "default" 0.0;
               rel1 { relative: 0.0 1.0; to_y: ENTRY_BUBBLE_TEXT_CALLID_REL2_Y_INC; }
               rel2 { relative: 0.0 1.0; to_x: "elm.rect.right.pad"; to_y: ENTRY_BUBBLE_TEXT_CALLID_REL2_Y_INC; }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_textblock_disabled_style";
	       }
	    }
	 }
         part {
            name: "elm.rect.status.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               min: ENTRY_BUBBLE_STATUS_TIME_PAD_MIN_H_INC 64;
	       fixed: 1 1;
	       align: 1.0 1.0;
               visible: 0;
			   color: 255 0 0 255;
	       rel1 { relative: ENTRY_BUBBLE_STATUS_TIME_PAD_REL_INC; to_x: "elm.rect.left.pad"; to_y: "elm.rect.bottom.pad"; }
	       rel2 { relative: ENTRY_BUBBLE_STATUS_TIME_PAD_REL_INC; to_x: "elm.rect.left.pad"; to_y: "elm.rect.bottom.pad"; }
	    }
	 }
         part {
            name: "elm.rect.time.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               min: ENTRY_BUBBLE_STATUS_TIME_PAD_MIN_H_INC GENLIST_PADDING_34_INC;
               max: ENTRY_BUBBLE_STATUS_TIME_PAD_MIN_H_INC GENLIST_PADDING_34_INC;
	       fixed: 1 1;
	       align: 0.0 0.0;
               visible: 0;
			   color: 0 255 0 255;
	       rel1.to: "elm.rect.status.pad";
	       rel2 { relative: 0.0 1.0; to_x: "elm.rect.status.pad"; to_y: "elm.rect.bottom.pad"; }
	    }
	 }
         part { name: "elm.text.status";
            type: TEXT;
            scale: 1;
            description { state: "default" 0.0;
               align: 1.0 1.0;
               fixed: 1 1;
               text {
                  font: "SLP:style=Roman";
                  size: ENTRY_BUBBLE_STATUS_TIME_SIZE_INC;
                  min: 1 0;
                  text_class: "slp_roman";
               }
               visible: 1;
               color: ENTRY_BUBBLE_SENT_STATUS_TIME_COLOR_INC;
               rel1 { relative: 0.0 0.0; to_x: "elm.rect.status.pad"; to_y: "elm.rect.status.pad"; }
               rel2 { relative: 0.0 0.0; to_x: "elm.rect.status.pad"; to_y: "elm.rect.status.pad"; }
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "elm.text.time";
            type: TEXT;
            scale: 1;
            description { state: "default" 0.0;
               align: 1.0 0.0;
               fixed: 1 1;
               text {
                  font: "SLP:style=Roman";
                  size: ENTRY_BUBBLE_STATUS_TIME_SIZE_INC;
                  min: 1 0;
                  text_class: "slp_roman";
               }
               visible: 1;
               color: ENTRY_BUBBLE_SENT_STATUS_TIME_COLOR_INC;
               rel1 { relative: 0.0 1.0; to_x: "elm.rect.status.pad"; to_y: "elm.rect.time.pad"; }
               rel2 { relative: 0.0 1.0; to_x: "elm.rect.status.pad"; to_y: "elm.rect.time.pad"; }
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part {
            name: "elm.swallow.icon1";
	    type: SWALLOW;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               min: GENLIST_PADDING_64_INC GENLIST_PADDING_64_INC;
               max: GENLIST_PADDING_64_INC GENLIST_PADDING_64_INC;
	       fixed: 1 1;
	       align: 1.0 1.0;
               visible: 0;
	       rel1 { relative: -0.8 0.3; to_x: "elm.rect.left.pad"; to_y: "elm.rect.bottom.pad"; }
	       rel2 { relative: -0.8 0.3; to_x: "elm.rect.left.pad"; to_y: "elm.rect.bottom.pad"; }
	    }
            description { state: "enabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
	 }
         part {
           name: "elm.swallow.end";
           type: SWALLOW;
           scale: 1;
           description {
              state: "default" 0.0;
              align: 0.0 0.0;
              rel1 { relative: 1.0 1.0; to_x: "elm.rect.left.pad"; to_y: "elm.text"; }
              rel2 { relative: 0.0 0.0; to_x: "elm.rect.right.pad"; to_y: "elm.rect.bottom.pad"; }
           }
         }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
	 program { name: "go_callerid_on";
	    signal: "elm,state,callerid,enabled";
	    source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "default")) {
              set_state(PART:"elm.image.bg", "callerid_on", 0.0);
              set_state(PART:"elm.text", "callerid_on", 0.0);
			}
            else if (!strcmp(st, "groupchat_on")) {
              set_state(PART:"elm.image.bg", "callerid_groupchat", 0.0);
              set_state(PART:"elm.text", "callerid_groupchat", 0.0);
			}

            set_state(PART:"elm.swallow.callerid", "callerid_on", 0.0);
            set_state(PART:"elm.rect.right.pad", "callerid_on", 0.0);
            set_state(PART:"elm.rect.groupchat.pad", "callerid_on", 0.0);
         }
	 }
	 program { name: "go_callerid_off";
	    signal: "elm,state,callerid,disabled";
	    source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "callerid_groupchat")) {
              set_state(PART:"elm.image.bg", "groupchat_on", 0.0);
              set_state(PART:"elm.text", "groupchat_on", 0.0);
			}
            else {
              set_state(PART:"elm.image.bg", "default", 0.0);
              set_state(PART:"elm.text", "default", 0.0);
			}

            set_state(PART:"elm.swallow.callerid", "default", 0.0);
            set_state(PART:"elm.rect.groupchat.pad", "default", 0.0);
		 }
	 }
/* groupchat - since white-hd theme */
#if ENTRY_BUBBLE_GROUPCHART_ENABLE_INC
	 program { name: "go_groupchat_on";
	    signal: "elm,state,groupchat,enabled";
	    source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "default")) {
              set_state(PART:"elm.image.bg", "groupchat_on", 0.0);
              set_state(PART:"elm.text", "groupchat_on", 0.0);
			}
            else if (!strcmp(st, "callerid_on")) {
              set_state(PART:"elm.image.bg", "callerid_groupchat", 0.0);
              set_state(PART:"elm.text", "callerid_groupchat", 0.0);
			}
         }
	 }
#endif
	 program { name: "go_groupchat_off";
	    signal: "elm,state,groupchat,disabled";
	    source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "callerid_groupchat")) {
              set_state(PART:"elm.image.bg", "callerid_on", 0.0);
              set_state(PART:"elm.text", "callerid_on", 0.0);
			}
            else {
              set_state(PART:"elm.image.bg", "default", 0.0);
              set_state(PART:"elm.text", "default", 0.0);
			}
		 }
	 }
	 program { name: "go_textstatus_on";
	    signal: "elm,state,text,status,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text.time";
	    target: "elm.text.status";
            after: "go_contentstatus_off";
	 }
	 program { name: "go_textstatus_off";
	    signal: "elm,state,text,status,disbled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text.time";
	    target: "elm.text.status";
	 }
	 program { name: "go_contentstatus_on";
	    signal: "elm,state,content,status,enabled";
	    source: "elm";
	    action: STATE_SET "enabled" 0.0;
	    target: "elm.swallow.icon1";
            after: "go_textstatus_off";
	 }
	 program { name: "go_contentstatus_off";
	    signal: "elm,state,content,status,disabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.swallow.icon1";
	 }
      }
   }

   group { name: "elm/entry/base-noedit-charwrap/sentmessage";
      data.item: "default_font_size" "24";
      data.item: "min_font_size" "8";
      data.item: "max_font_size" "60";
      data {
         item: context_menu_orientation "horizontal";
      }
      parts {
         part {
            name: "elm.rect.right.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
	       min: ENTRY_BUBBLE_EX_PAD 0;
               fixed: 1 0;
	       align: 1.0 0.0;
               color: 0 0 0 0;
               rel1.relative: 1.0 0.0;
	    }
         }
         part {
            name: "elm.rect.left.pad";
	    type: RECT;
	    scale: 1;
	    description {
	       state: "default" 0.0;
	       min: ENTRY_BUBBLE_IX_PAD 0;
	       fixed: 1 0;
	       align: 1.0 0.0;
               color: 0 0 0 0;
	       rel1 { relative: 0.0 0.0; to: "elm.text"; }
               rel2 { relative: 0.0 1.0; to: "elm.text"; }
	    }
	 }
         part {
           name: "elm.rect.top.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_Y_PAD;
              fixed: 0 1;
              align: 0.0 0.0;
              color: 0 0 0 0;
              rel2.relative: 1.0 0.0;
           }
         }
         part {
           name: "elm.rect.bottom.pad";
           type: RECT;
           scale: 1;
           description {
              state: "default" 0.0;
              min: 0 ENTRY_BUBBLE_Y_PAD;
              fixed: 0 1;
              align: 0.0 1.0;
              color: 0 0 0 0;
              rel1.relative: 0.0 1.0;
           }
         }
	 part {
	    name: "elm.image.bg";
	    type: IMAGE;
	    scale: 1;
	    description {
	       state: "default" 0.0;
               rel1.to_x: "elm.rect.left.pad";
	       image {
		  normal: "00_MessageBubble_BG_send.png";
		  border: 20 1 13 20;
		  border_scale: 1;
	       }
	    }
	 }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: PLAIN;
	    select_mode: BLOCK_HANDLE;
	    //cursor_mode: BEFORE;
	    multiline: 1;
	    source: "elm/entry/selection/default"; // selection under
	    source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
	    source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
	    source5: "elm/entry/anchor/default"; // anchor under
	    description { state: "default" 0.0;
               fixed: 1 0;
               align: 1.0 0.0;
               rel1 { relative: 0.0 1.0; to_y: "elm.rect.top.pad";}
               rel2 { relative: 0.0 0.0; to_x: "elm.rect.right.pad"; to_y: "elm.rect.bottom.pad"; }
	       text {
		  style: "entry_textblock_style_charwrap";
		  min: 0 1;
                  max: 1 0;
	       }
	    }
	    description { state: "disabled" 0.0;
               inherit: "default" 0.0;
	       text {
		  style: "entry_textblock_disabled_style_charwrap";
	       }
	    }
	 }
      }
      programs {
	 program { name: "focus";
            signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "disable";
	    signal: "elm,state,disabled";
	    source: "elm";
	    action: STATE_SET "disabled" 0.0;
	    target: "elm.text";
	 }
	 program { name: "enable";
	    signal: "elm,state,enabled";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
      }
   }

group { name: "elm/entry/base/font_color_black";
   alias: "elm/entry/base-mixedwrap/font_color_black";
   alias: "elm/entry/base/font_color_black/default";
   alias: "elm/entry/base/font_color_black/lighting";
   alias: "elm/entry/base/font_color_black/multiline";
   alias: "elm/entry/base/font_color_black/multiline/default";
   alias: "elm/entry/base/font_color_black/multiline/lighting";
   alias: "elm/entry/base/editfield/font_color_black";

   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";

   styles {
      style { name: "font_color_black_textblock_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#000000FF wrap=mixed left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
      }
      style { name: "font_color_black_textblock_disabled_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#00000080 wrap=mixed left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "font_color_black_textblock_style";
               min: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-noedit/font_color_black";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "font_color_black_textblock_style";
               min: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_textblock_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-charwrap/font_color_black";
   alias: "elm/entry/base/font_color_black/char_wrap";
   alias: "elm/entry/base/font_color_black/default/char_wrap";
   alias: "elm/entry/base/font_color_black/lighting/char_wrap";
   alias: "elm/entry/base/font_color_black/multiline/char_wrap";
   alias: "elm/entry/base/font_color_black/multiline/default/char_wrap";
   alias: "elm/entry/base/font_color_black/multiline/lighting/char_wrap";
   alias: "elm/entry/base-charwrap/editfield/font_color_black";

   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";

   styles {
      style { name: "font_color_black_textblock_char_wrap_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#000000FF wrap=char left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
      }
      style { name: "font_color_black_textblock_char_wrap_disabled_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#00000080 wrap=char left_margin=1 right_margin=2 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 1;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         //source6: "X"; // anchor over
         description { state: "default" 0.0;
            fixed: 1 0;
            text {
               style: "font_color_black_textblock_char_wrap_style";
               min: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_textblock_char_wrap_disabled_style";
               min: 0 1;
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-single/font_color_black";
   alias: "elm/entry/base-single/font_color_black/default";
   alias: "elm/entry/base-single/font_color_black/lighting";
   alias: "elm/entry/base-single/font_color_black/singleline";
   alias: "elm/entry/base-single/font_color_black/singleline/default";
   alias: "elm/entry/base-single/font_color_black/singleline/lighting";
   alias: "elm/entry/base-single/editfield/font_color_black";
   alias: "elm/entry/base-single/editfield/searchbar/font_color_black";

   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";

   styles {
      style { name: "font_color_black_single_textblock_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#000000FF wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#800 underline=on underline_color=#8008";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
      }
      style { name: "font_color_black_single_textblock_disabled_style";
         base: "font=SLP:style=Roman font_size="ENTRY_TEXT_SIZE_INC" color=#00000080 wrap=none left_margin=1 right_margin=3 text_class=entry";
         tag:  "br" "\n";
         tag:  "ps" "ps";
         tag:  "tab" "\t";
         tag:  "em" "+ font=SLP:style=Oblique";
         tag:  "b" "+ font=SLP:style=Bold";
         tag:  "link" "+ color=#00000080 underline=on underline_color=#00000080";
         tag:  "hilight" "+ font=SLP:style=Bold";
         tag:  "preedit" "+ underline=on underline_color=#000000FF";
         tag:  "preedit_sel" "+ backing=on backing_color=#000000FF color=#FFFFFFFF";
      }
   }
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: EDITABLE;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_style";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/entry/base-single-noedit/font_color_black";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PLAIN;
         select_mode: BLOCK_HANDLE;
         //cursor_mode: BEFORE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_style";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}
group { name: "elm/entry/base-password/font_color_black";
   alias: "elm/entry/base-password/editfield/font_color_black";
   data.item: "default_font_size" "24";
   data.item: "min_font_size" "8";
   data.item: "max_font_size" "60";
   data {
      item: context_menu_orientation "horizontal";
   }
   parts {
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 1;
         scale: 1;
         entry_mode: PASSWORD;
         select_mode: BLOCK_HANDLE;
         multiline: 0;
         source: "elm/entry/selection/default"; // selection under
         source2: ENTRY_BLOCK_HANDLE_SOURCE2; // block handle
         source3: ENTRY_BLOCK_HANDLE_SOURCE3; // block handle
         source4: "elm/entry/cursor/default"; // cursorover
         source5: "elm/entry/anchor/default"; // anchor under
         description { state: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_style";
               repch: "*";
               min: 1 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text {
               style: "font_color_black_single_textblock_disabled_style";
            }
         }
      }
   }
   programs {
      program { name: "focus";
         signal: "load";
         source: "";
         action: FOCUS_SET;
         target: "elm.text";
      }
      program { name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
      }
      program { name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
      }
   }
}

group { name: "elm/scroller/entry/default";
      alias : "elm/scroller/entry/editfield";
      alias : "elm/scroller/entry/editfield/searchbar/default";
      data {
         item: "focus_highlight" "on";
      }
      script {
         public sbvis_v, sbvis_h, sbalways_v, sbalways_h, sbvis_timer;
         public timer0(val) {
            new v;
            v = get_int(sbvis_v);
            if (v) {
               v = get_int(sbalways_v);
               if (!v) {
                  emit("do-hide-vbar", "");
                  set_int(sbvis_v, 0);
               }
            }
            v = get_int(sbvis_h);
            if (v) {
               v = get_int(sbalways_h);
               if (!v) {
                  emit("do-hide-hbar", "");
                  set_int(sbvis_h, 0);
               }
            }
            set_int(sbvis_timer, 0);
            return 0;
         }
      }
      images {
         image: "bt_sm_base2.png" COMP;
      }
      parts {
         part { name: "bg";
            type: RECT;
            description { state: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "clipper";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               rel1.to: "bg";
               rel2.to: "bg";
            }
         }
         part { name: "contentclipper";
            type: RECT;
            mouse_events: 0;
            clip_to: "clipper";
            description { state: "default" 0.0;
               rel1.to: "elm.swallow.icon";
               rel1.relative: 1.0 0.0;
               rel2.to: "elm.swallow.end";
               rel2.relative: 0.0 1.0;
            }
         }
         part { name: "elm.swallow.icon";
            type: SWALLOW;
            clip_to: "clipper";
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  to: "bg";
                  relative: 0.0 0.0;
               }
               rel2 {
                  to: "bg";
                  relative: 0.0 1.0;
               }
               visible: 0;
            }
            description { state: "visible" 0.0;
               fixed: 1 1;
               align: 0.0 1.0;
               rel1 {
                         to: "bg";
                         relative: 0.0 0.0;
               }
               rel2 {
                  to: "bg";
                  relative: 0.0 1.0;
               }
               visible: 1;
            }
         }
         part { name: "elm.swallow.end";
            type: SWALLOW;
            clip_to: "clipper";
            description { state: "default" 0.0;
               fixed: 1 1;
               rel1 {
                  to: "bg";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "bg";
                  relative: 1.0 1.0;
               }
               visible: 0;
            }
            description { state: "visible" 0.0;
               fixed: 1 1;
               align: 1.0 1.0;
               rel1 {
                  to: "bg";
                  relative: 1.0 0.0;
               }
               rel2 {
                  to: "bg";
                  relative: 1.0 1.0;
               }
               visible: 1;
            }
         }
         part { name: "elm.swallow.content";
            clip_to: "contentclipper";
            type: SWALLOW;
            description { state: "default" 0.0;
               rel1 {
                       to: "elm.swallow.icon";
                       relative: 1.0 0.0;
               }
               rel2 {
                to: "elm.swallow.end";
                relative: 0.0 1.0;
               }
            }
         }
         part { name: "sb_vbar_clip_master";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part { name: "sb_vbar_clip";
            clip_to: "sb_vbar_clip_master";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part { name: "sb_vbar";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               fixed: 1 1;
               visible: 0;
               min: 10 17;
               align: 1.0 0.0;
               rel1 {
                  relative: 0.0 0.0;
                  to_y:     "elm.swallow.content";
                  to_x:     "elm.swallow.end";
               }
               rel2 {
                  relative: 0.0 0.0;
                  to_y:     "sb_hbar";
                  to_x:     "elm.swallow.end";
               }
            }
         }
         part { name: "elm.dragable.vbar";
            clip_to: "sb_vbar_clip";
            mouse_events: 0;
            dragable {
               x: 0 0 0;
               y: 1 1 0;
               confine: "sb_vbar";
            }
            description { state: "default" 0.0;
               visible: 0;
               fixed: 1 1;
               min: 10 17;
               max: 10 99999;
               rel1 {
                  relative: 0.5  0.5;
                  to: "sb_vbar";
               }
               rel2 {
                  relative: 0.5  0.5;
                  to: "sb_vbar";
               }
               image {
                  normal: "bt_sm_base2.png";
                  border: 6 6 6 6;
                  middle: SOLID;
               }
            }
         }
         part { name: "sb_hbar_clip_master";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part { name: "sb_hbar_clip";
            clip_to: "sb_hbar_clip_master";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part { name: "sb_hbar";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               fixed: 1 1;
               visible: 0;
               min: 17 10;
               align: 0.0 1.0;
               rel1 {
                  relative: 0.0 1.0;
                  to_x:     "elm.swallow.content";
                  to_y:     "elm.swallow.content";
               }
               rel2 {
                  relative: 0.0 1.0;
                  to_x:     "sb_vbar";
                  to_y:     "elm.swallow.content";
               }
            }
         }
         part { name: "elm.dragable.hbar";
            clip_to: "sb_hbar_clip";
            mouse_events: 0;
            dragable {
               x: 1 1 0;
               y: 0 0 0;
               confine: "sb_hbar";
            }
            description { state: "default" 0.0;
               fixed: 1 1;
               min: 17 10;
               max: 99999 10;
               rel1 {
                  relative: 0.5  0.5;
                  to: "sb_hbar";
               }
               rel2 {
                  relative: 0.5  0.5;
                  to: "sb_hbar";
               }
               image {
                  normal: "bt_sm_base2.png";
                  border: 4 4 4 4;
                  middle: SOLID;
               }
            }
         }
      }
      programs {
         program { name: "load";
            signal: "load";
            source: "";
            script {
               set_state(PART:"sb_hbar_clip", "hidden", 0.0);
               set_state(PART:"sb_vbar_clip", "hidden", 0.0);
               set_int(sbvis_h, 0);
               set_int(sbvis_v, 0);
               set_int(sbalways_v, 0);
               set_int(sbalways_h, 0);
               set_int(sbvis_timer, 0);
            }
         }
         program { name: "icon_show";
            signal: "elm,action,show,icon";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.swallow.icon";
         }
         program { name: "icon_hide";
            signal: "elm,action,hide,icon";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.icon";
         }
         program { name: "end_show";
            signal: "elm,action,show,end";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.swallow.end";
         }
         program { name: "end_hide";
            signal: "elm,action,hide,end";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.end";
         }
         program { name: "vbar_show";
            signal: "elm,action,show,vbar";
            source: "elm";
            action:  STATE_SET "default" 0.0;
            target: "sb_vbar_clip_master";
         }
         program { name: "vbar_hide";
            signal: "elm,action,hide,vbar";
            source: "elm";
            action:  STATE_SET "hidden" 0.0;
            target: "sb_vbar_clip_master";
         }
         program { name: "vbar_show_always";
            signal: "elm,action,show_always,vbar";
            source: "elm";
            script {
               new v;
               v = get_int(sbvis_v);
               v |= get_int(sbalways_v);
               if (!v) {
                  set_int(sbalways_v, 1);
                  emit("do-show-vbar", "");
                  set_int(sbvis_v, 1);
               }
            }
         }
         program { name: "vbar_show_notalways";
            signal: "elm,action,show_notalways,vbar";
            source: "elm";
            script {
               new v;
               v = get_int(sbalways_v);
               if (v) {
                  set_int(sbalways_v, 0);
                  v = get_int(sbvis_v);
                  if (!v) {
                     emit("do-hide-vbar", "");
                     set_int(sbvis_v, 0);
                  }
               }
            }
         }
         program { name: "sb_vbar_show";
            signal: "do-show-vbar";
            source: "";
            action:  STATE_SET "default" 0.0;
            transition: LINEAR 0.5;
            target: "sb_vbar_clip";
         }
         program { name: "sb_vbar_hide";
            signal: "do-hide-vbar";
            source: "";
            action:  STATE_SET "hidden" 0.0;
            transition: LINEAR 0.5;
            target: "sb_vbar_clip";
         }

         program { name: "hbar_show";
            signal: "elm,action,show,hbar";
            source: "elm";
            action:  STATE_SET "default" 0.0;
            target: "sb_hbar_clip_master";
         }
         program { name: "hbar_hide";
            signal: "elm,action,hide,hbar";
            source: "elm";
            action:  STATE_SET "hidden" 0.0;
            target: "sb_hbar_clip_master";
         }
         program { name: "hbar_show_always";
            signal: "elm,action,show_always,hbar";
            source: "elm";
            script {
               new v;
               v = get_int(sbvis_h);
               v |= get_int(sbalways_h);
               if (!v) {
                  set_int(sbalways_h, 1);
                  emit("do-show-hbar", "");
                  set_int(sbvis_h, 1);
               }
            }
         }
         program { name: "hbar_show_notalways";
            signal: "elm,action,show_notalways,hbar";
            source: "elm";
            script {
               new v;
               v = get_int(sbalways_h);
               if (v) {
                  set_int(sbalways_h, 0);
                  v = get_int(sbvis_h);
                  if (!v) {
                     emit("do-hide-hbar", "");
                     set_int(sbvis_h, 0);
                  }
               }
            }
         }
         program { name: "sb_hbar_show";
            signal: "do-show-hbar";
            source: "";
            action:  STATE_SET "default" 0.0;
            transition: LINEAR 0.5;
            target: "sb_hbar_clip";
         }
         program { name: "sb_hbar_hide";
            signal: "do-hide-hbar";
            source: "";
            action:  STATE_SET "hidden" 0.0;
            transition: LINEAR 0.5;
            target: "sb_hbar_clip";
         }

         program { name: "scroll";
            signal: "elm,action,scroll";
            source: "elm";
            script {
               new v;
               v = get_int(sbvis_v);
               v |= get_int(sbalways_v);
               if (!v) {
                  emit("do-show-vbar", "");
                  set_int(sbvis_v, 1);
               }
               v = get_int(sbvis_h);
               v |= get_int(sbalways_h);
               if (!v) {
                  emit("do-show-hbar", "");
                  set_int(sbvis_h, 1);
               }
               v = get_int(sbvis_timer);
               if (v > 0) cancel_timer(v);
               v = timer(1.0, "timer0", 0);
               set_int(sbvis_timer, v);
            }
         }
      }
   }
