/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved 
 *
 * PROPRIETARY/CONFIDENTIAL
 *
 * This software is the confidential and proprietary information of SAMSUNG
 * ELECTRONICS ("Confidential Information"). You agree and acknowledge that this
 * software is owned by Samsung and you shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the license
 * agreement you entered into with SAMSUNG ELECTRONICS. SAMSUNG make no
 * representations or warranties about the suitability of the software, either
 * express or implied, including but not limited to the implied warranties of
 * merchantability, fitness for a particular purpose, or non-infringement.
 * SAMSUNG shall not be liable for any damages suffered by licensee arising out
 * of or releated to this software.
 *
 */

/////////////////////////////////////////////////////////////////////////////
 group { name: "elm/conformant/base/default";
     script {
        public indicator_visible = 0;     //Indicator visible check
        public indicator_opacity = 0;     //0=opaque, 1=translucent, 2=transparent
        public indicator_overlap = 0;     //check indicator overlap/nooverlap
        public clipboard_disable  = 0;     //check clipboard enable/disable
        public keypad_disable = 0;  //check virtualkeypad enable/disable
        public landscape = 0; //Landscape mode status
        public portrait_overlap = 0; //save portrait_overlap mode
        public portrait_opacity = 0; //save portrait_opacity
     }
     parts {
        part { name: "elm.swallow.bg";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
           }
        }
        part { name: "elm.swallow.content";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0; //indi: nooverlap, sip: enable
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
              rel2.relative: 1.0 0.0;
              rel2.to: "sip_area";
           }
           description { state: "nooverlap_disable_sip" 0.0; //indi: nooverlap, sip: disable
              inherit: "default" 0.0;
              rel2.relative: 1.0 1.0;
              rel2.to: "elm.swallow.bg";
           }
           description { state: "overlap" 0.0; //indi: overlap, sip: enable
              inherit: "default" 0.0;
              rel1.relative: 0.0 0.0;
              rel1.to: "elm.swallow.indicator";
           }
           description { state: "overlap_disable_sip" 0.0; //indi: overlap, sip: disable
              inherit: "default" 0.0;
              rel1.relative: 0.0 0.0;
              rel1.to: "elm.swallow.indicator";
              rel2.relative: 1.0 1.0;
              rel2.to: "elm.swallow.bg";
           }
        }
        part { name: "elm.swallow.ug";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
              rel2.relative: 1.0 0.0;
              rel2.to: "sip_area";
           }
           description { state: "overlap" 0.0;
              inherit: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 0.0;
              rel1.to: "elm.swallow.indicator";
              rel2.relative: 1.0 0.0;
              rel2.to: "sip_area";
           }
        }
        part { name: "indicator_bg";
           type: RECT;
           scale: 1;
           mouse_events: 0;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_DEFAULT_COLOR_INC;
           }
           description { state: "translucent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSLUCENT_COLOR_INC;
           }
           description { state: "transparent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSPARENT_COLOR_INC;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "elm.swallow.indicator";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "sip_area";
           type: RECT;
           description { state: "default" 0.0;
              fixed: 0 1;
              min: 0 0;
              rel1.relative: 0.0 0.0;
              rel1.to_y: "elm.swallow.virtualkeypad";
              rel2.relative: 1.0 1.0;
              rel2.to_y: "elm.swallow.virtualkeypad";
              visible: 0;
           }
           description { state: "clipboard_on" 0.0;
              inherit: "default" 0.0;
              rel1.to_y: "elm.swallow.clipboard";
              rel2.to_y: "elm.swallow.clipboard";
           }
        }
        part { name: "elm.swallow.clipboard";
           type: SWALLOW;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.0 1.0;
              rel1.relative: 0.0 1.0;
           }
        }
        part { name: "elm.swallow.virtualkeypad";
           type: SWALLOW;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.0 1.0;
              rel1.relative: 0.0 1.0;
           }
        }
     }
     programs {
        program {
            name: "show_indicator";
            signal: "elm,state,indicator,show";
            source: "elm";
            script {
               set_int(indicator_visible, 1);
               set_state(PART:"elm.swallow.indicator", "default", 0.0);
               if (get_int(landscape) == 0)
                 {
                    if (get_int(indicator_opacity) == 0)
                      set_state(PART:"indicator_bg", "opaque", 0.0);
                    if (get_int(indicator_opacity) == 1)
                      set_state(PART:"indicator_bg", "translucent", 0.0);
                    if (get_int(indicator_opacity) == 2)
                      set_state(PART:"indicator_bg", "transparent", 0.0);
                 }
               else
                 {
                    set_int(landscape, 0);
                    emit("elm,state,landscape", "elm");
                 }
            }
        }
        program {
            name: "hide_indicator";
            signal: "elm,state,indicator,hide";
            source: "elm";
            script {
               set_int(indicator_visible, 0);
               set_state(PART:"elm.swallow.indicator", "hide", 0.0);
               set_state(PART:"indicator_bg", "hide", 0.0);
            }
        }
        program {
            name: "opaque_indicator";
            signal: "elm,state,indicator,opaque";
            source: "elm";
            script {
               if (get_int(landscape) == 0)
                 {
                    set_int(indicator_opacity, 0);
                    if (get_int(indicator_visible) == 1)
                      set_state(PART:"indicator_bg", "opaque", 0.0);
                 }
               else
                 {
                    set_int(landscape, 0);
                    emit("elm,state,landscape", "elm");
                 }
            }
        }
        program {
            name: "translucent_indicator";
            signal: "elm,state,indicator,translucent";
            source: "elm";
            script {
               if (get_int(landscape) == 0)
                 {
                    set_int(indicator_opacity, 1);
                    if (get_int(indicator_visible) == 1)
                      set_state(PART:"indicator_bg", "translucent", 0.0);
                 }
               else
                 {
                    set_int(landscape, 0);
                    emit("elm,state,landscape", "elm");
                 }
            }
        }
        program {
            name: "transparent_indicator";
            signal: "elm,state,indicator,transparent";
            source: "elm";
            script {
               set_int(indicator_opacity, 2);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
        program {
           name: "overlap_indicator";
           signal: "elm,state,indicator,overlap";
           source: "";
           script {
              set_int(indicator_overlap, 1);
              set_state(PART:"elm.swallow.ug", "overlap", 0.0);
              if ((get_int(keypad_disable) == 1) && (get_int(clipboard_disable) == 1))
                set_state(PART:"elm.swallow.content", "overlap_disable_sip", 0.0);
              else
                set_state(PART:"elm.swallow.content", "overlap", 0.0);
          }
        }
        program {
           name: "nooverlap_indicator";
           signal: "elm,state,indicator,nooverlap";
           source: "";
           script {
              //Only portrait state get nooverlap mode
              set_int(portrait_overlap, 0);
              if (get_int(landscape) == 0)
                {
                   set_int(indicator_overlap, 0);
                   set_state(PART:"elm.swallow.ug", "default", 0.0);
              if ((get_int(keypad_disable) == 1) && (get_int(clipboard_disable) == 1))
                set_state(PART:"elm.swallow.content", "nooverlap_disable_sip", 0.0);
              else
                set_state(PART:"elm.swallow.content", "default", 0.0);
                }
           }
        }
        program { name: "enable_clipboard";
           signal: "elm,state,clipboard,enable";
           source: "";
           script {
              set_int(clipboard_disable, 0);
              //set content state
              if (get_int(indicator_overlap) == 0)
                set_state(PART:"elm.swallow.content", "default", 0.0);
              else
                set_state(PART:"elm.swallow.content", "overlap", 0.0);
           }
        }
        program { name: "disable_clipboard";
           signal: "elm,state,clipboard,disable";
           source: "";
           script {
              set_int(clipboard_disable, 1);
              set_state(PART:"sip_area", "default", 0.0);
              if (get_int(indicator_overlap) == 0)
                {
                   if (get_int(keypad_disable) == 1)
                     set_state(PART:"elm.swallow.content", "nooverlap_disable_sip", 0.0);
                   else
                     set_state(PART:"elm.swallow.content", "default", 0.0);
                }
              else
                {
                   if (get_int(keypad_disable) == 1)
                     set_state(PART:"elm.swallow.content", "overlap_disable_sip", 0.0);
                   else
                     set_state(PART:"elm.swallow.content", "overlap", 0.0);
                }
           }
        }
        program { name: "enable_virtualkeypad";
           signal: "elm,state,virtualkeypad,enable";
           source: "";
           script {
              set_int(keypad_disable, 0);
              if (get_int(indicator_overlap) == 0)
                set_state(PART:"elm.swallow.content", "default", 0.0);
              else
                set_state(PART:"elm.swallow.content", "overlap", 0.0);
           }
        }
        program { name: "disable_virtualkeypad";
           signal: "elm,state,virtualkeypad,disable";
           source: "";
           script {
              set_int(keypad_disable, 1);
              if (get_int(clipboard_disable) == 1)
                {
                   set_state(PART:"sip_area", "clipboard_on", 0.0);
                   if (get_int(indicator_overlap) == 0)
                     set_state(PART:"elm.swallow.content", "nooverlap_disable_sip", 0.0);
                   else
                     set_state(PART:"elm.swallow.content", "overlap_disable_sip", 0.0);
                }
              else
                {
                   if (get_int(indicator_overlap) == 0)
                     set_state(PART:"elm.swallow.content", "default", 0.0);
                   else
                     set_state(PART:"elm.swallow.content", "overlap", 0.0);
                }
           }
        }
        program {
            name: "change_to_landscape";
            signal: "elm,state,landscape";
            source: "elm";
            script {
               if (get_int(landscape) == 0) {
                  set_int(portrait_overlap, get_int(indicator_overlap));
                  set_int(portrait_opacity, get_int(indicator_opacity));
                  set_int(landscape, 1);
                  run_program(PROGRAM:"overlap_indicator");
                  run_program(PROGRAM:"transparent_indicator");
               }
            }
         }
         program {
            name: "change_to_portrait";
            signal: "elm,state,portrait";
            source: "elm";
            script {
               if (get_int(landscape) == 1) {  //content start (0, indicator height)
                  set_int(indicator_overlap, get_int(portrait_overlap));
                  set_int(indicator_opacity, get_int(portrait_opacity));
                  set_int(landscape, 0);
                  if (get_int(indicator_overlap) == 0) { //start (0,60)
                     run_program(PROGRAM:"nooverlap_indicator");

                  }
                  else { //content start (0, 0)
                     run_program(PROGRAM:"overlap_indicator");
                  }
                  if (get_int(portrait_opacity) == 2) //transparent
                     run_program(PROGRAM:"transparent_indicator");
                  else if (get_int(portrait_opacity) == 1) //translucent
                     run_program(PROGRAM:"translucent_indicator");
                  else
                     run_program(PROGRAM:"opaque_indicator");
               }
            }
         }
         program { name: "landscape_mode";
            source: "elm";
            signal: "elm,state,orient,90";
            action: SIGNAL_EMIT "elm,state,landscape" "elm";
         }
         program { name: "landscape_mode2";
            source: "elm";
            signal: "elm,state,orient,270";
            action: SIGNAL_EMIT "elm,state,landscape" "elm";
         }
         program { name: "portrait_mode";
            source: "elm";
            signal: "elm,state,orient,0";
            action: SIGNAL_EMIT "elm,state,portrait" "elm";
         }
         program { name: "portrait_mode2";
            source: "elm";
            signal: "elm,state,orient,180";
            action: SIGNAL_EMIT "elm,state,portrait" "elm";
        }
        program {
            name: "clipboard_on";
            signal: "elm,state,clipboard,on";
            source: "elm";
            action: STATE_SET "clipboard_on" 0.0;
            target: "sip_area";
        }
        program {
            name: "clipboard_off";
            signal: "elm,state,clipboard,off";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "sip_area";
        }
     }
  }
 group { name: "elm/conformant/base/indicator_overlap";
     script {
        public indicator_visible = 0;     //Indicator visible check
        public indicator_opacity = 0;     //0=opaque, 1=translucent, 2=transparent
     }
     parts {
        part { name: "elm.swallow.bg";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
           }
        }
        part { name: "elm.swallow.content";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel2.relative: 1.0 0.0;
              rel2.to: "sip_area";
           }
        }
        part { name: "elm.swallow.ug";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
              rel2.relative: 1.0 0.0;
              rel2.to: "sip_area";
           }
        }
        part { name: "indicator_bg";
           type: RECT;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_DEFAULT_COLOR_INC;
           }
           description { state: "translucent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSLUCENT_COLOR_INC;
           }
           description { state: "transparent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSPARENT_COLOR_INC;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "elm.swallow.indicator";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "sip_area";
           type: RECT;
           description { state: "default" 0.0;
              fixed: 0 1;
              min: 0 0;
              rel1.relative: 0.0 0.0;
              rel1.to_y: "elm.swallow.virtualkeypad";
              rel2.relative: 1.0 1.0;
              rel2.to_y: "elm.swallow.virtualkeypad";
              visible: 0;
           }
           description { state: "clipboard_on" 0.0;
              inherit: "default" 0.0;
              rel1.to_y: "elm.swallow.clipboard";
              rel2.to_y: "elm.swallow.clipboard";
           }
        }
        part { name: "elm.swallow.clipboard";
           type: SWALLOW;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.0 1.0;
              rel1.relative: 0.0 1.0;
           }
        }
        part { name: "elm.swallow.virtualkeypad";
           type: SWALLOW;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.0 1.0;
              rel1.relative: 0.0 1.0;
           }
        }
     }
     programs {
        program {
            name: "show_indicator";
            signal: "elm,state,indicator,show";
            source: "elm";
            script {
               set_int(indicator_visible, 1);
               set_state(PART:"elm.swallow.indicator", "default", 0.0);
               if (get_int(indicator_opacity) == 0)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
               if (get_int(indicator_opacity) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
               if (get_int(indicator_opacity) == 2)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
        program {
            name: "hide_indicator";
            signal: "elm,state,indicator,hide";
            source: "elm";
            script {
               set_int(indicator_visible, 0);
               set_state(PART:"elm.swallow.indicator", "hide", 0.0);
               set_state(PART:"indicator_bg", "hide", 0.0);
            }
        }
        program {
            name: "opaque_indicator";
            signal: "elm,state,indicator,opaque";
            source: "elm";
            script {
               set_int(indicator_opacity, 0);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
            }
        }
        program {
            name: "translucent_indicator";
            signal: "elm,state,indicator,translucent";
            source: "elm";
            script {
               set_int(indicator_opacity, 1);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
            }
        }
        program {
            name: "transparent_indicator";
            signal: "elm,state,indicator,transparent";
            source: "elm";
            script {
               set_int(indicator_opacity, 2);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
        program {
            name: "clipboard_on";
            signal: "elm,state,clipboard,on";
            source: "elm";
            action: STATE_SET "clipboard_on" 0.0;
            target: "sip_area";
        }
        program {
            name: "clipboard_off";
            signal: "elm,state,clipboard,off";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "sip_area";
        }
     }
  }

  group { name: "elm/conformant/base/nokeypad";
     script {
        public indicator_visible = 0;     //Indicator visible check
        public indicator_opacity = 0;     //0=opaque, 1=translucent, 2=transparent
     }
     parts {
        part { name: "elm.swallow.bg";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
           }
        }
        part { name: "elm.swallow.content";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
           }
        }
        part { name: "elm.swallow.ug";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator";
           }
        }
        part { name: "indicator_bg";
           type: RECT;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_DEFAULT_COLOR_INC;
           }
           description { state: "translucent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSLUCENT_COLOR_INC;
           }
           description { state: "transparent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSPARENT_COLOR_INC;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "elm.swallow.indicator";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
     }
     programs {
        program {
            name: "show_indicator";
            signal: "elm,state,indicator,show";
            source: "elm";
            script {
               set_int(indicator_visible, 1);
               set_state(PART:"elm.swallow.indicator", "default", 0.0);
               if (get_int(indicator_opacity) == 0)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
               if (get_int(indicator_opacity) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
               if (get_int(indicator_opacity) == 2)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
        program {
            name: "hide_indicator";
            signal: "elm,state,indicator,hide";
            source: "elm";
            script {
               set_int(indicator_visible, 0);
               set_state(PART:"elm.swallow.indicator", "hide", 0.0);
               set_state(PART:"indicator_bg", "hide", 0.0);
            }
        }
        program {
            name: "opaque_indicator";
            signal: "elm,state,indicator,opaque";
            source: "elm";
            script {
               set_int(indicator_opacity, 0);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
            }
        }
        program {
            name: "translucent_indicator";
            signal: "elm,state,indicator,translucent";
            source: "elm";
            script {
               set_int(indicator_opacity, 1);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
            }
        }
        program {
            name: "transparent_indicator";
            signal: "elm,state,indicator,transparent";
            source: "elm";
            script {
               set_int(indicator_opacity, 2);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
     }
  }
  group { name: "elm/conformant/base/without_resize";
     script {
        public indicator_visible = 0;     //Indicator visible check
        public indicator_opacity = 0;     //0=opaque, 1=translucent, 2=transparent
     }
     parts {
        part { name: "elm.swallow.bg";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
           }
        }
        part { name: "elm.swallow.indicator_area";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
           }
        }
        part { name: "elm.swallow.content";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              align: 0.5 0.5;
              rel1.relative: 0.0 1.0;
              rel1.to: "elm.swallow.indicator_area";
           }
        }
        part { name: "indicator_bg";
           type: RECT;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_DEFAULT_COLOR_INC;
           }
           description { state: "translucent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSLUCENT_COLOR_INC;
           }
           description { state: "transparent" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
              color: CONFORMANT_INDICATOR_BG_TRANSPARENT_COLOR_INC;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
        part { name: "elm.swallow.indicator";
           type: SWALLOW;
           scale: 1;
           description { state: "default" 0.0;
              fixed: 0 1;
              align: 0.5 0.0;
              min: 0 LAYOUT_INDICATOR_HEIGHT_INC;
              rel2.relative: 1.0 0.0;
              visible: 1;
           }
            description { state: "hide" 0.0;
              inherit: "default" 0.0;
              visible: 0;
              min: 0 0;
           }
        }
     }
     programs {
        program {
            name: "show_indicator";
            signal: "elm,state,indicator,show";
            source: "elm";
            script {
               set_int(indicator_visible, 1);
               set_state(PART:"elm.swallow.indicator", "default", 0.0);
               if (get_int(indicator_opacity) == 0)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
               if (get_int(indicator_opacity) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
               if (get_int(indicator_opacity) == 2)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
        program {
            name: "hide_indicator";
            signal: "elm,state,indicator,hide";
            source: "elm";
            script {
               set_int(indicator_visible, 0);
               set_state(PART:"elm.swallow.indicator", "hide", 0.0);
               set_state(PART:"indicator_bg", "hide", 0.0);
            }
        }
        program {
            name: "opaque_indicator";
            signal: "elm,state,indicator,opaque";
            source: "elm";
            script {
               set_int(indicator_opacity, 0);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "opaque", 0.0);
            }
        }
        program {
            name: "translucent_indicator";
            signal: "elm,state,indicator,translucent";
            source: "elm";
            script {
               set_int(indicator_opacity, 1);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "translucent", 0.0);
            }
        }
        program {
            name: "transparent_indicator";
            signal: "elm,state,indicator,transparent";
            source: "elm";
            script {
               set_int(indicator_opacity, 2);
               if (get_int(indicator_visible) == 1)
                  set_state(PART:"indicator_bg", "transparent", 0.0);
            }
        }
     }
  }