/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

   /*************************************************/
   /* elm_layout -> fundamental template style      */
   /*************************************************/
   group { name: "elm/layout/application/default";
      alias: "elm/layout/application/noindicator";
      parts {
         part { name: "elm.swallow.bg";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
         //Might be no need anymore
         part { name: "elm.swallow.controlbar";
            type: SWALLOW;
            description { state: "default" 0.0;
               visible: 0;
            }
         }
      }
   }
   /*************************************************************************/
   /* elm_layout -> fundamental template style with controlbar (deprecated) */
   /*************************************************************************/
   group { name: "elm/layout/application/controlbar";
      parts {
         part { name: "elm.swallow.bg";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
               rel2.relative: 1.0 0.0;
               rel2.to: "elm.swallow.controlbar";
            }
         }
         part { name: "elm.swallow.controlbar";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
               min: 0 CONTROLBAR_LARGE_HEIGHT_INC;
               fixed: 0 1;
               rel1 { relative: 0.0 1.0; }
               rel2 { relative: 1.0 1.0; }
               align: 0.5 1.0;
            }
         }
      }
   }
   /************************************************************/
   /* elm_layout -> fundamental template style with tabbar */
   /************************************************************/
   group { name: "elm/layout/application/tabbar";
      alias: "elm/layout/tabbar/default";
      parts {
         part { name: "elm.swallow.bg";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
         part { name: "elm.swallow.tabbar";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
               min: 0 TABBAR_DEFAULT_HEIGHT_INC;
               fixed: 0 1;
               rel1 { relative: 0.0 0.0; }
               rel2 { relative: 1.0 0.0; }
               align: 0.5 0.0;
            }
            description { state: "icon_text" 0.0;
               inherit: "default" 0.0;
               min: 0 TABBAR_ICON_TEXT_HEIGHT_INC;
            }
            description { state: "horizontal" 0.0;
               inherit: "default" 0.0;
               min: 0 TABBAR_HORIZONTAL_HEIGHT_INC;
            }
            description { state: "horizontal_icon_text" 0.0;
               inherit: "default" 0.0;
               min: 0 TABBAR_HORIZONTAL_ICON_TEXT_HEIGHT_INC;
            }
            description { state: "hidden" 0.0;
               inherit: "default" 0.0;
               min: 0 0;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to_y: "elm.swallow.tabbar";
               rel1.relative: 0.0 1.0;
            }
         }
      }
      programs {
         program { name: "show_tabbar";
            signal: "elm,state,show,tabbar";
            signal: "elm,state,default,tabbar";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.tabbar";
         }
         program { name: "hide_tabbar";
            signal: "elm,state,hide,tabbar";
            source: "elm";
            action: STATE_SET "hidden" 0.0;
            target: "elm.swallow.tabbar";
         }
         program { name: "icon_text_tabbar";
            signal: "elm,state,icon_text,tabbar";
            source: "elm";
            action: STATE_SET "icon_text" 0.0;
            target: "elm.swallow.tabbar";
         }
         program { name: "horizontal_tabbar";
            signal: "elm,state,horizontal,tabbar";
            source: "elm";
            action: STATE_SET "horizontal" 0.0;
            target: "elm.swallow.tabbar";
         }
         program { name: "horizontal_icon_text_tabbar";
            signal: "elm,state,horizontal_icon_text,tabbar";
            source: "elm";
            action: STATE_SET "horizontal_icon_text" 0.0;
            target: "elm.swallow.tabbar";
         }
      }
   }

   /*************************************************/
   /* elm_layout -> searchbar style                 */
   /*************************************************/
   group { name: "elm/layout/application/searchbar_base";
      parts {
         part { name: "elm.swallow.bg";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
         part { name: "searchbar";
            type: SWALLOW;
            mouse_events: 1;
            scale: 1;
            description { state: "default" 0.0;
               min: 0 SEARCHBAR_H_INC;
               fixed: 0 1;
               align: 0.0 1.0;
               rel2 {
                  relative: 1.0 0.0;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               align: 0.0 0.0;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            mouse_events: 1;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.0 0.0;
               rel1 {
                  relative: 0.0 1.0;
                  to: "searchbar";
               }
            }
         }
      }
      programs {
         program { name: "show_searchbar";
            signal: "elm,state,show,searchbar";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "searchbar";
         }
         program { name: "show_searchbar_with_animation";
            signal: "elm,state,show,searchbar,animation";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.3;
            target: "searchbar";
         }
         program { name: "hide_searchbar";
            signal: "elm,state,hide,searchbar";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "searchbar";
         }
         program { name: "hide_searchbar_with_animation";
            signal: "elm,state,hide,searchbar,animation";
            source: "elm";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.3;
            target: "searchbar";
         }
      }
   }

   /*************************************************/
   /* elm_layout -> integrated style (deprecated)   */
   /*************************************************/
   group { name: "elm/standard/window/integration";
      parts {
         /* for event blocking */
         part { name: "base_event";
            type: RECT;
            repeat_events: 0;
            description { state: "default" 0.0;
               visible: 1;
               color: 0 0 0 0;
            }
            description { state: "block_events" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "repeat_events" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "base";
            type: RECT;
            mouse_events: 1;
            repeat_events: 1;
            description { state: "default" 0.0;
               color_class: "B011";
            }
            description { state: "white_bg" 0.0;
               color: 255 255 255 255;
            }
            description { state: "black_bg" 0.0;
               color: 0 0 0 255;
            }
            description { state: "beige_bg" 0.0;
               color: 246 245 237 255;
            }
            description { state: "group_list_bg" 0.0;
               color_class: "B011";
            }
            description { state: "transparent_bg" 0.0;
               color: 0 0 0 0;
            }
            description { state: "edit_mode" 0.0;
               color_class: "B011";
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            description {
               state: "default" 0.0;
               visible: 0;
               rel1 { relative: 0.0 0.0; }
               rel2 { relative: 1.0 1.0; }
            }
            description { state: "show" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "show_with_navi_bar" 0.0;
               inherit: "default" 0.0;
               rel1 { relative: 0.0 1.0; to_y: "elm.swallow.navi_bar"; }
               visible: 1;
            }
            description { state: "show" 1.0;
               inherit: "default" 0.0;
               rel2 { relative: 1.0 0.0; to_y: "elm.swallow.controlbar"; }
               visible: 1;
            }
            description { state: "show_with_navi_bar" 1.0;
               inherit: "default" 0.0;
               rel1 { relative: 0.0 1.0; to_y: "elm.swallow.navi_bar"; }
               rel2 { relative: 1.0 0.0; to_y: "elm.swallow.controlbar"; }
               visible: 1;
            }
         }
         part { name: "elm.swallow.navi_bar";
            type: SWALLOW;
            scale: 1;
            description {
               state: "default" 0.0;
               visible: 0;
               min: 0 NAVIFRAME_TITLE_H_INC;
               fixed: 0 1;
               rel1 { relative: 0.0 0.0; }
               rel2 { relative: 1.0 0.0; }
               align: 0.5 0;
            }
            description { state: "show" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "elm.swallow.controlbar";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               min: 0 CONTROLBAR_LARGE_HEIGHT_INC;
               fixed: 0 1;
               rel1 { relative: 0.0 1.0; }
               rel2 { relative: 1.0 1.0; }
               align: 0.5 1.0;
            }
            description { state: "show" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "block_events";
            signal: "elm,base_event,block_events";
            source: "elm";
            action: STATE_SET "block_events" 0.0;
            target: "base_event";
         }
         program { name: "repeat_events";
            signal: "elm,base_event,repeat_events";
            source: "elm";
            action: STATE_SET "repeat_events" 0.0;
            target: "base_event";
         }
         program { name: "show_default_bg";
            signal: "elm,bg,show,default";
            source: "elm";
            script {
               set_state(PART:"base", "default", 0.0);
            }
         }
         program { name: "show_black_bg";
            signal: "elm,bg,show,black";
            source: "elm";
            script {
               set_state(PART:"base", "black_bg", 0.0);
            }
         }
         program { name: "show_white_bg";
            signal: "elm,bg,show,white";
            source: "elm";
            script {
               set_state(PART:"base", "white_bg", 0.0);
            }
         }
         program { name: "show_beige_bg";
            signal: "elm,bg,show,beige";
            source: "elm";
            script {
               set_state(PART:"base", "beige_bg", 0.0);
            }
         }
         program { name: "show_group_list_bg";
            signal: "elm,bg,show,group_list";
            source: "elm";
            script {
               set_state(PART:"base", "group_list_bg", 0.0);
            }
         }
         program { name: "show_transparent_bg";
            signal: "elm,bg,show,transparent";
            source: "elm";
            script {
               set_state(PART:"base", "transparent_bg", 0.0);
            }
         }
         program { name: "show_edit_mode_bg";
            signal: "elm,bg,show,edit_mode";
            source: "elm";
            script {
               set_state(PART:"base", "edit_mode", 0.0);
            }
         }
         program { name: "show_navi_bar";
            signal: "elm,state,show,navi_bar";
            source: "elm";
            script {
               set_state(PART:"elm.swallow.navi_bar", "show", 0.0);
               run_program(PROGRAM:"check_location");
            }
         }
         program { name: "hide_navi_bar";
            signal: "elm,state,hide,navi_bar";
            source: "elm";
            script {
               set_state(PART:"elm.swallow.navi_bar", "default", 0.0);
               run_program(PROGRAM:"check_location");
            }
         }
         program { name: "show_content";
            signal: "elm,state,show,content";
            source: "elm";
            script {
               set_state(PART:"elm.swallow.content", "show", 0.0);
               run_program(PROGRAM:"check_location");
            }
         }
         program { name: "hide_content";
            signal: "elm,state,hide,content";
            source: "elm";
            script {
               set_state(PART:"elm.swallow.content", "hide", 0.0);
               run_program(PROGRAM:"check_location");
            }
         }
         program { name: "show_controlbar";
            signal: "elm,state,show,controlbar";
            source: "elm";
            script {
               set_state(PART:"elm.swallow.controlbar", "show", 0.0);
               run_program(PROGRAM:"check_location");
            }
         }
         program { name: "hide_controlbar";
            signal: "elm,state,hide,controlbar";
            source: "elm";
            script {
               set_state(PART:"elm.swallow.controlbar", "default", 0.0);
               run_program(PROGRAM:"check_location");
            }
         }
         program { name: "check_location";
            script {
               new st[30];
               new Float:vl;
               new navi_bar = 0, content = 0, controlbar = 0;

               get_state(PART:"elm.swallow.navi_bar", st, 30, vl)
               if (!strncmp(st, "show", 4))  navi_bar = 1;
               get_state(PART:"elm.swallow.content", st, 30, vl)
               if (!strncmp(st, "show", 4))  content = 1;
               get_state(PART:"elm.swallow.controlbar", st, 30, vl)
               if (!strncmp(st, "show", 4))  controlbar = 1;

               // set navi bar
               if (navi_bar == 1) {
                  set_state(PART:"elm.swallow.navi_bar", "show", 0.0)
               }

               // set content
               if (content == 1) {
                  if (navi_bar == 1) {
                     set_state(PART:"elm.swallow.content", "show_with_navi_bar", 0.0)
                  } else {
                     set_state(PART:"elm.swallow.content", "show", 0.0)
                  }
                  get_state(PART:"elm.swallow.content", st, 30, vl)

                  if (controlbar == 1) {
                     set_state(PART:"elm.swallow.content", st, 1.0)
                  }
               }
            }
         }
      }
   }

   /************************************************************/
   /* elm_layout -> fundamental template style with fastscroll */
   /************************************************************/
   group { name: "elm/layout/application/fastscroll";
      parts {
         part {
            name: "bg";
            type: RECT;
            scale: 1;
            description {
               state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
         part {
            name: "right.padding";
            type: SPACER;
            scale: 1;
            description {
               state: "default" 0.0;
               rel1.relative: 1.0 0.0;
               align: 1.0 0.5;
               min: INDEX_ITEM_MIN_WIDTH_INC 0;
               fixed: 1 0;
            }
         }
         part {
            name: "elm.swallow.content";
            type: SWALLOW;
            scale: 1;
            description {
               state: "default" 0.0;
               rel2 {
                  to: "right.padding";
                  relative: 0.0 1.0;
               }
            }
            description {
               state: "fastscroll_hide" 0.0;
               rel2.to: "bg";
               rel2.relative: 1.0 1.0;
            }
         }
         part {
            name: "elm.swallow.fastscroll";
            type: SWALLOW;
            scale: 1;
            description {
               state: "default" 0.0;
            }
            description {
               state: "fastscroll_hide" 0.0;
               visible: 0;
            }
         }
      }
      programs {
         program {
            name: "fastscroll_hide";
            signal: "elm,state,fastscroll,hide";
            source: "";
            action: STATE_SET "fastscroll_hide" 0.0;
            target: "elm.swallow.content";
            target: "elm.swallow.fastscroll";
         }
         program {
            name: "fastscroll_show";
            signal: "elm,state,fastscroll,show";
            source: "";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.content";
            target: "elm.swallow.fastscroll";
         }
      }
   }

group { name: "elm/layout/editfield/default";
   images {
      image: "00_edit_field_clear.png" COMP;
   }
   script {
      public mouse_down = 0;
      public multi_down = 0;
   }
   parts {
      part {
         name: "base";
         type: RECT;
         scale: 1;
         ignore_flags: ON_HOLD;
         description {
            state: "default" 0.0;
            min: 0 EDITFIELD_DEFAULT_MINH_INC;
            color: 0 0 0 0;
         }
      }
      part {
         name: "top1";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: 0 EDITFIELD_DEFAULT_TOP1_SINGLE_INC;
            fixed: 1 1;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
            align: 0.5 0;
         }
      }
      part {
         name: "left1";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: EDITFIELD_DEFAULT_LEFT1_INC 0;
            fixed: 1 1;
            align: 0 0;
            rel1.relative : 0.0 0.0;
            rel2.relative : 0.0 1.0;
         }
      }
      part {
         name: "right1";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: EDITFIELD_DEFAULT_RIGHT1_ERASER_SHOW_INC 0;
            fixed: 1 1;
            align: 1 0;
            rel1.relative : 1.0 0.0;
            rel2.relative : 1.0 1.0;
         }
      }
      part {
         name: "right2";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: EDITFIELD_DEFAULT_RIGHT2_INC 0;
            fixed: 1 1;
            align: 1 0;
            rel1.relative : 1.0 0.0;
            rel2.relative : 1.0 1.0;
         }
      }
      part {
         name: "bottom1";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: 0 EDITFIELD_DEFAULT_BOTTOM1_SINGLE_INC;
            fixed: 1 1;
            align: 0 1;
            rel1.relative: 0.0 1.0;
         }
      }
      part {
         name: "elm.guidetext";
         type: TEXT;
         scale: 1;
         ignore_flags: ON_HOLD;
         description {
            state: "default" 0.0;
            align: 0.0 0.0;
            fixed: 1 1;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            color: EDITFIELD_GUIDE_TEXT_COLOR_INC;
            text {
               font: "Tizen:style=Roman";
               size: ENTRY_TEXT_SIZE_INC;
               min: 0 0;
               align: 0.0 0.5;
               text_class: "tizen";
            }
         }
         description {
            state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part {
         name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         ignore_flags: ON_HOLD;
         description {
            state: "default" 0.0;
            min: 0 40;
            rel1 {
               relative : 1.0 1.0;
               to_x: "left1";
               to_y: "top1";
            }
            rel2 {
               relative : 0.0 0.0;
               to_x: "right1";
               to_y: "bottom1";
            }
            align: 0.0 0.5;
         }
      }
      part {
         name: "eraser_image";
         scale: 1;
         clip_to: "eraser_image.clipper";
         description {
            state: "default" 0.0;
            visible: 0;
            min: EDITFIELD_DEFAULT_ERASER_MINW_INC EDITFIELD_DEFAULT_ERASER_MINH_INC;
            fixed: 1 1;
            align: 1 0.5;
            rel1 {
               relative: 0.0 0.5;
               to_x : "right2";
            }
            rel2 {
               relative: 0.0 0.5;
               to_x : "right2";
            }
            image.normal: "00_edit_field_clear.png";
         }
         description {
            state: "elm.eraser.show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "eraser_image.clipper";
         type: RECT;
         description { state: "default" 0.0;
         }
         description { state: "elm.eraser.show" 0.0;
            color_class: "F053";
         }
         description { state: "elm.eraser.pressed" 0.0;
            color_class: "F053P";
         }
      }
      part {
         name: "eraser";
         type: RECT;
         scale: 1;
         mouse_events: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            min: EDITFIELD_DEFAULT_ERASER_EVENT_MINW_INC EDITFIELD_DEFAULT_ERASER_EVENT_MINH_INC;
            fixed: 1 1;
            align: 1 0.5;
            color: 0 0 0 0;
            rel1 {
               relative: 0.0 0.5;
               to_x : "right2";
            }
            rel2 {
               relative: 0.0 0.5;
               to_x : "right2";
            }
         }
         description {
            state: "elm.eraser.show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program {
         name: "guidetext_show";
         signal: "elm,state,guidetext,show";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guidetext";
      }
      program {
         name: "guidetext_hide";
         signal: "elm,state,guidetext,hide";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guidetext";
      }
      program {
         name: "eraser_show";
         signal: "elm,state,eraser,show";
         source: "elm";
         action: STATE_SET "elm.eraser.show" 0.0;
         target: "eraser_image";
         target: "eraser_image.clipper";
         target: "eraser";
      }
      program {
         name: "eraser_hide";
         signal: "elm,state,eraser,hide";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "eraser_image";
         target: "eraser_image.clipper";
         target: "eraser";
      }
      program {
         name: "eraser_clicked";
         signal: "mouse,clicked,1";
         source: "eraser";
         script {
            if (get_int(multi_down) == 0)
               emit("elm,eraser,clicked", "elm");
         }
      }
      program {
         name: "eraser_pressed";
         signal: "mouse,down,1";
         source: "eraser";
         script {
            if (get_int(multi_down) == 0 && get_int(mouse_down) == 0) {
               set_int(mouse_down, 1);
               set_state(PART:"eraser_image.clipper", "elm.eraser.pressed", 0.0);
            }
         }
      }
      program {
         name: "eraser_unpressed";
         signal: "mouse,up,1";
         source: "eraser";
         script {
            if (get_int(mouse_down) == 1) {
               set_int(mouse_down, 0);
               set_state(PART:"eraser_image.clipper", "elm.eraser.show", 0.0);
            }
         }
      }
      program {
         name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program {
         name: "multi_up";
         signal: "elm,action,multi,up";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
   }
}

group { name: "elm/layout/editfield/title";
   images {
      image: "00_edit_field_clear.png" COMP;
   }
   script {
      public mouse_down = 0;
      public multi_down = 0;
   }
   parts {
      part {
         name: "base";
         type: RECT;
         scale: 1;
         ignore_flags: ON_HOLD;
         description {
            state: "default" 0.0;
            min: 0 EDITFIELD_TITLE_MINH_INC;
            color: 0 0 0 0;
         }
      }
      part {
         name: "top1";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: 0 EDITFIELD_DEFAULT_TOP1_MULTI_INC;
            fixed: 1 1;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
            align: 0.5 0;
         }
      }
      part {
         name: "top2";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: 0 EDITFIELD_DEFAULT_TOP2_INC;
            fixed: 1 1;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
            align: 0.5 0;
         }
      }
      part {
         name: "left1";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: EDITFIELD_DEFAULT_LEFT1_INC 0;
            fixed: 1 1;
            align: 0 0;
            rel1.relative : 0.0 0.0;
            rel2.relative : 0.0 1.0;
         }
      }
      part {
         name: "left2";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: EDITFIELD_DEFAULT_LEFT2_INC 0;
            fixed: 1 1;
            align: 0 0;
            rel1.relative : 0.0 0.0;
            rel2.relative : 0.0 1.0;
         }
      }
      part {
         name: "right1";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: EDITFIELD_DEFAULT_RIGHT1_ERASER_SHOW_INC 0;
            fixed: 1 1;
            align: 1 0;
            rel1.relative : 1.0 0.0;
            rel2.relative : 1.0 1.0;
         }
      }
      part {
         name: "right2";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: EDITFIELD_DEFAULT_RIGHT2_INC 0;
            fixed: 1 1;
            align: 1 0;
            rel1.relative : 1.0 0.0;
            rel2.relative : 1.0 1.0;
         }
      }
      part {
         name: "bottom1";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: 0 EDITFIELD_DEFAULT_BOTTOM1_MULTI_INC;
            fixed: 1 1;
            align: 0 1;
            rel1.relative: 0.0 1.0;
         }
      }
      part {
         name: "bottom2";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: 0 EDITFIELD_DEFAULT_BOTTOM2_MULTI_INC;
            fixed: 0 1;
            rel1.relative: 0.0 1.0;
            align: 0 1;
         }
      }
      part {
         name: "eraser_base";
         type: RECT;
         scale: 1;
         ignore_flags: ON_HOLD;
         description {
            state: "default" 0.0;
            visible: 0;
            rel1 {
               relative: 0.0 1.0;
               to_y: "top1";
            }
         }
      }
      part {
         name: "elm.text";
         type: TEXT;
         scale: 1;
         ignore_flags: ON_HOLD;
         description {
            state: "default" 0.0;
            align: 0.0 0.0;
            min: 0 34;
            fixed: 1 1;
            rel1 {
               relative: 1.0 1.0;
               to_x: "left2";
               to_y: "top2";
            }
            rel2 {
               relative: 1.0 1.0;
               to_x: "left2";
               to_y: "top2";
            }
            color: EDITFIELD_TITLE_COLOR_INC;
            text {
               font: "Tizen:style=Medium";
               size: EDITFIELD_TITLE_SIZE_INC;
               min: 1 1;
               align: 0.0 0.0;
               text_class: "tizen";
            }
         }
      }
      part {
         name: "elm.guidetext";
         type: TEXT;
         scale: 1;
         ignore_flags: ON_HOLD;
         description {
            state: "default" 0.0;
            align: 0.0 0.0;
            fixed: 1 1;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
            color: EDITFIELD_GUIDE_TEXT_COLOR_INC;
            text {
               font: "Tizen:style=Roman";
               size: ENTRY_TEXT_SIZE_INC;
               min: 0 0;
               align: 0.0 0.5;
               text_class: "tizen";
            }
         }
         description {
            state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part {
         name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         ignore_flags: ON_HOLD;
         description {
            state: "default" 0.0;
            min: 0 40;
            rel1 {
               relative : 1.0 1.0;
               to_x: "left1";
               to_y: "top1";
            }
            rel2 {
               relative : 0.0 0.0;
               to_x: "right1";
               to_y: "bottom1";
            }
            align: 0.0 0.5;
         }
      }
      part {
         name: "eraser_image";
         scale: 1;
         clip_to: "eraser_image.clipper";
         description {
            state: "default" 0.0;
            visible: 0;
            min: EDITFIELD_DEFAULT_ERASER_MINW_INC EDITFIELD_DEFAULT_ERASER_MINH_INC;
            fixed: 1 1;
            align: 1 0.5;
            rel1 {
               relative: 0.0 0.5;
               to_x : "right2";
               to_y : "eraser_base";
            }
            rel2 {
               relative: 0.0 0.5;
               to_x : "right2";
               to_y : "eraser_base";
            }
            image.normal: "00_edit_field_clear.png";
         }
         description {
            state: "elm.eraser.show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "eraser_image.clipper";
         type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "elm.eraser.show" 0.0;
            color_class: "F053";
         }
         description { state: "elm.eraser.pressed" 0.0;
            color_class: "F053P";
         }
      }
      part {
         name: "eraser";
         type: RECT;
         scale: 1;
         mouse_events: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            min: EDITFIELD_DEFAULT_ERASER_EVENT_MINW_INC EDITFIELD_DEFAULT_ERASER_EVENT_MINH_INC;
            fixed: 1 1;
            align: 1 0.5;
            color: 0 0 0 0;
            rel1 {
               relative: 0.0 0.5;
               to_x : "right2";
               to_y : "eraser_base";
            }
            rel2 {
               relative: 0.0 0.5;
               to_x : "right2";
               to_y : "eraser_base";
            }
         }
         description {
            state: "elm.eraser.show" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program {
         name: "guidetext_show";
         signal: "elm,state,guidetext,show";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.guidetext";
      }
      program {
         name: "guidetext_hide";
         signal: "elm,state,guidetext,hide";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.guidetext";
      }
      program {
         name: "eraser_show";
         signal: "elm,state,eraser,show";
         source: "elm";
         action: STATE_SET "elm.eraser.show" 0.0;
         target: "eraser_image";
         target: "eraser_image.clipper";
         target: "eraser";
      }
      program {
         name: "eraser_hide";
         signal: "elm,state,eraser,hide";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "eraser_image";
         target: "eraser_image.clipper";
         target: "eraser";
      }
      program {
         name: "eraser_clicked";
         signal: "mouse,clicked,1";
         source: "eraser";
         script {
            if (get_int(multi_down) == 0)
               emit("elm,eraser,clicked", "elm");
         }
      }
      program {
         name: "eraser_pressed";
         signal: "mouse,down,1";
         source: "eraser";
         script {
            if (get_int(multi_down) == 0 && get_int(mouse_down) == 0) {
               set_int(mouse_down, 1);
               set_state(PART:"eraser_image.clipper", "elm.eraser.pressed", 0.0);
            }
         }
      }
      program {
         name: "eraser_unpressed";
         signal: "mouse,up,1";
         source: "eraser";
         script {
            if (get_int(mouse_down) == 1) {
               set_int(mouse_down, 0);
               set_state(PART:"eraser_image.clipper", "elm.eraser.show", 0.0);
            }
         }
      }
      program {
         name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program {
         name: "multi_up";
         signal: "elm,action,multi,up";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
   }
}

group { name: "elm/layout/searchbar/default";
   script {
      public multi_down = 0;
   }
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            visible: 1;
            color_class: "B0215";
         }
      }
      part { name: "inputfield_base";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SEARCHBAR_BASE_HEIGHT_INC;
            align: 0.0 0.0;
         }
      }
      part { name: "top_left_padding";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: SEARCHBAR_LEFT_PADDING_INC SEARCHBAR_TOP_PADDING_INC;
            fixed: 1 1;
            align: 0.0 0.0;
            rel1 { relative: 0.0 0.0; to: "inputfield_base"; }
            rel2 { relative: 0.0 0.0; to: "inputfield_base"; }
         }
      }
      part { name: "bottom_right_padding";
         type: SPACER;
         scale: 1;
         description {
            state: "default" 0.0;
            min: SEARCHBAR_RIGHT_PADDING_INC SEARCHBAR_BOTTOM_PADDING_INC;
            fixed: 1 1;
            align: 1.0 1.0;
            rel1 { relative: 1.0 1.0; to: "inputfield_base"; }
            rel2 { relative: 1.0 1.0; to: "inputfield_base"; }
         }
      }
      part { name: "inputfield_rect";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            min: SEARCHBAR_WIDTH_INC SEARCHBAR_HEIGHT_INC;
            align: 0.0 0.5;
            rel1 { relative: 1.0 1.0; to: "top_left_padding"; }
            rel2 { relative: 0.0 0.0; to: "bottom_right_padding"; }
            color: 0 0 0 0;
         }
      }
      part {
         name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            min: SEARCHBAR_WIDTH_INC SEARCHBAR_HEIGHT_INC;
            rel1 {
               relative : 0.0 0.0;
               to: "inputfield_rect";
            }
            rel2 {
               relative : 1.0 1.0;
               to: "inputfield_rect";
            }
            align: 0.0 0.5;
         }
      }
   }
   programs {
     program {
         name: "bg_clicked";
         signal: "mouse,clicked,1";
         source: "inputfield_rect";
         script {
            if (get_int(multi_down) == 0)
               emit("elm,bg,clicked", "elm");
         }
      }
      program {
         name: "sound_play";
         signal: "mouse,clicked,1";
         source: "elm.text";
         script {
            if (get_int(multi_down) == 0)
               run_program(PROGRAM:"play_sample");
         }
      }
      program {
         name: "play_sample";
         action: RUN_PLUGIN "touch_sound";
      }
      program {
         name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program {
         name: "multi_up";
         signal: "elm,action,multi,up";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
   }
}

group { name: "elm/layout/searchbar/cancel_button";
   script {
      public multi_down = 0;
   }
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            color_class: "B0215";
         }
      }
      part { name: "inputfield_base";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SEARCHBAR_BASE_HEIGHT_INC;
            align: 0.0 0.0;
         }
      }
     part { name: "top_padding_rect";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SEARCHBAR_TOP_PADDING_INC;
            fixed: 0 1;
            align: 0 0;
            rel1.to: "inputfield_base";
            rel2.to: "inputfield_base";
            rel2.relative: 1.0 0.0;
         }
      }
      part { name: "bottom_padding_rect";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SEARCHBAR_BOTTOM_PADDING_INC;
            fixed: 0 1;
            align: 0 1;
            rel1.to: "inputfield_base";
            rel1.relative: 0.0 1.0;
            rel2.to: "inputfield_base";
         }
      }
      part { name: "base_bg";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 SEARCHBAR_HEIGHT_INC;
            align: 0 0.5;
            fixed: 0 1;
            rel1 {
               relative: 0.0 1.0;
               to: "top_padding_rect";
            }
            rel2 {
               relative: 1.0 0.0;
               to: "bottom_padding_rect";
            }
         }
      }
      part { name: "left_padding_rect";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SEARCHBAR_LEFT_PADDING_INC 0;
            fixed: 1 0;
            align: 0 0;
            rel1.to: "inputfield_base";
            rel2.to: "inputfield_base";
            rel2.relative: 0.0 1.0;
         }
      }
      part { name: "right_padding_rect";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: SEARCHBAR_RIGHT_PADDING_INC 0;
            fixed: 1 0;
            align: 1.0 0.0;
            rel1.to: "inputfield_base";
            rel1.relative: 1.0 0.0;
            rel2.to: "inputfield_base";
         }
      }
      part { name: "inputfield_rect";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.0 0.5;
            min: SEARCHBAR_WIDTH_INC SEARCHBAR_HEIGHT_INC;
            rel1 {
               relative: 1.0 0.0;
               to_x: "left_padding_rect";
               to_y: "base_bg";
            }
            rel2 {
               relative: 0.0 1.0;
               to_x: "right_btn_padding_rect";
               to_y: "base_bg";
            }
            color: 0 0 0 0;
         }
      }
      part { name: "right_btn_padding_rect";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 0;
            fixed: 1 0;
            align: 1.0 0.0;
            rel1.relative: 0.0 0.0;
            rel1.to: "right_padding_rect";
            rel2.relative: 0.0 1.0;
            rel2.to: "right_padding_rect";
         }
         description { state: "in" 0.0;
            inherit: "default" 0.0;
            min: SEARCHBAR_CANCEL_BUTTON_LEFT_PADDING_INC 0;
            rel1.to: "button_cancel";
            rel2.to: "button_cancel";
         }
      }
      part { name: "button_cancel";
         type: SWALLOW;
         mouse_events: 1;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: SEARCHBAR_CANCEL_BUTTON_W_INC 0;
            align: 1.0 0.5;
            state: "default" 0.0;
            rel1 {
               relative: 0.0 1.0;
               to_x: "right_padding_rect";
               to_y: "top_padding_rect";
            }
            rel2 {
               relative: 0.0 0.0;
               to_x: "right_padding_rect";
               to_y: "bottom_padding_rect";
            }
         }
      }
      part {
         name: "elm.swallow.content";
         type: SWALLOW;
         scale: 1;
         ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            min: SEARCHBAR_WIDTH_INC SEARCHBAR_HEIGHT_INC;
            rel1 {
               relative : 0.0 0.0;
               to: "inputfield_rect";
            }
            rel2 {
               relative : 1.0 1.0;
               to: "inputfield_rect";
            }
            align: 0.0 0.5;
         }
      }
   }
   programs {
      program {
         name: "sound_play";
         signal: "mouse,clicked,1";
         source: "elm.text";
         script {
            if (get_int(multi_down) == 0)
               run_program(PROGRAM:"play_sample");
         }
      }
      program {
         name: "play_sample";
         action: RUN_PLUGIN "touch_sound";
      }
     program {
         name: "bg_clicked";
         signal: "mouse,clicked,1";
         source: "inputfield_rect";
         script {
            if (get_int(multi_down) == 0)
               emit("elm,bg,clicked", "elm");
         }
      }
      program {
         name: "multi_down";
         signal: "elm,action,multi,down";
         source: "elm";
         script {
            set_int(multi_down, 1);
         }
      }
      program {
         name: "multi_up";
         signal: "elm,action,multi,up";
         source: "elm";
         script {
            set_int(multi_down, 0);
         }
      }
      program { name: "cancel_in";
         signal: "cancel,in";
         source: "";
         action: STATE_SET "in" 0.0;
         target: "right_btn_padding_rect";
         transition: LINEAR 0.3;
      }
      program { name: "cancel_out";
         signal: "cancel,out";
         source: "";
         action: STATE_SET "default" 0.0;
         target: "right_btn_padding_rect";
         transition: LINEAR 0.3;
      }
      program { name: "cancel_show";
         signal: "cancel,show";
         source: "";
         action: STATE_SET "in" 0.0;
         target: "right_btn_padding_rect";
      }
      program { name: "cancel_hide";
         signal: "cancel,hide";
         source: "";
         action: STATE_SET "default" 0.0;
         target: "right_btn_padding_rect";
      }
   }
}

group {
   name: "elm/layout/nocontents/default";
   styles{
      style { name: "nocontent_style";
         base: "font=Tizen:style=Bold font_size="NOCONTENT_TEXT_BLOCK_TEXT_SIZE_INC" align=center color=#FFFFFF color_class=T0552 wrap=mixed ellipsis=1.0 text_class=T0552";
         tag:  "br" "\n";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "b" "+ font_weight=Bold";
         tag:  "tab" "\t";
      }
      style { name: "nocontent_style_dim";
         base: "font=Tizen:style=Bold font_size="NOCONTENT_TEXT_BLOCK_TEXT_SIZE_INC" align=center color=#FFFFFF color_class=T0552 wrap=mixed ellipsis=1.0 text_class=T0552";
         tag:  "br" "\n";
         tag:  "hilight" "+ font_weight=Bold";
         tag:  "b" "+ font_weight=Bold";
         tag:  "tab" "\t";
      }
      style { name: "nocontent_help_text";
         base: "font=Tizen:style=Regular font_size="NOCONTENT_HELP_TEXT_BLOCK_TEXT_SIZE_INC" align=left color=#FFFFFF color_class=T055 wrap=mixed ellipsis=1.0 text_class=T055";
         tag:  "br" "\n";
         tag:  "hilight" "+ font_style=Regular";
         tag:  "b" "+ font_style=Regular";
         tag:  "tab" "\t";
      }
   }
   script {
      public center_align = 0;
      public landscape_mode = 0;
   }
   parts {
      part{ name: "bottom_base";
        type:SPACER;
        scale:1;
        description { state: "default" 0.0;
          fixed: 0 1;
          align: 0.0 1.0;
          min: NOCONTENT_BOTTOM_BASE_PORTRAIT_MIN_WIDTH_HEIGHT_INC;
          rel1 {
             relative: 0.0 1.0;
          }
          rel2 {
             relative: 1.0 1.0;
          }
        }
        description { state: "landscape" 0.0;
           inherit: "default" 0.0;
           min: NOCONTENT_BOTTOM_BASE_LANDS_MIN_WIDTH_HEIGHT_INC;
        }
      }
      part{ name: "base";
        type:SPACER;
        scale:1;
        description { state: "default" 0.0;
          align: 0.5 0.0;
          rel1 {
             relative: 0.0 0.0;
          }
          rel2 {
             relative: 1.0 0.0;
             to: "bottom_base";
          }
        }
      }
      part { name: "bg";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            min: NOCONTENT_BASE_PORTRAIT_MIN_WIDTH_HEIGHT_INC;
            rel1 {
               relative: 0.0 0.5;
               to: "base";
            }
            rel2 {
               relative: 1.0 0.5;
               to: "base";
            }
         }
         description { state: "help_txt_port_centre_align";
            inherit: "default" 0.0;
            min: NOCONTENT_BASE_PORTRAIT_MIN_WIDTH_HEIGHT_WITH_TEXT;
         }
         description { state: "landscape" 0.0;
            inherit: "default" 0.0;
            min: NOCONTENT_BASE_LANDS_MIN_WIDTH_HEIGHT_INC;
         }
         description { state: "help_txt_lands_centre_align";
            inherit: "default" 0.0;
            min: NOCONTENT_BASE_LANDS_MIN_WIDTH_HEIGHT_WITH_TEXT;
         }
      }
      part { name: "nocontents.image";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: NOCONTENT_IMAGE_WIDTH_HEIGHT_INC;
            align: 0.5 0.0;
            rel1 {
               relative: 0.5 0.0;
               to: "bg";
            }
            rel2 {
               relative: 0.5 0.0;
               to: "bg";
            }
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         scale: 1;
         description { state: "default" 0.0;
            min: NOCONTENT_TEXT_STYLE_BG_MIN_INC;
            align: 0.5 0.0;
            fixed: 0 1;
            rel1 {
               relative: 0.0 1.0;
               to_y: "nocontents.image";
            }
            rel2 {
               relative: 1.0 1.0;
               to_y: "nocontents.image";
            }
            text {
               style: "nocontent_style";
               min: 0 1;
               max: 0 1;
            }
         }
         description { state: "disabled" 1.0;
            inherit: "default" 0.0;
            text {
               style: "nocontent_style_dim";
               min: 0 1;
               max: 0 1;
            }
         }
      }
      part { name: "padding_after_text";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            min: NOCONTENT_PORTRAIT_AFTER_TEXT_PADDING_INC;
            fixed: 1 1;
            rel1 {
               relative: 0.0 1.0;
               to_y: "elm.text";
            }
            rel2 {
               relative: 0.0 1.0;
               to_y: "elm.text";
            }
         }
         description { state: "landscape" 0.0;
            inherit: "default" 0.0;
            min: NOCONTENT_LANDSCAPE_AFTER_TEXT_PADDING_INC;
         }
      }
      part { name: "right_pad_help_text";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            align: 1.0 0.0;
            min: NOCONTENT_PORTRAIT_AFTER_TEXT_PADDING_INC;
            fixed: 1 1;
            rel1 {
               relative: 1.0 0.0;
            }
            rel2 {
               relative: 1.0 1.0;
            }
         }
         description { state: "landscape" 0.0;
            inherit: "default" 0.0;
            min: NOCONTENT_LANDSCAPE_AFTER_TEXT_PADDING_INC;
         }
      }
      part { name: "elm.help.text";
         type: TEXTBLOCK;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.5 0.0;
            min: NOCONTENT_PORTRAIT_HELP_TEXT_STYLE_BG_MIN_INC;
            fixed: 1 1;
            rel1 {
               relative: 1.0 1.0;
               to: "padding_after_text";
            }
            rel2 {
               relative: 0.0 1.0;
               to_x: "right_pad_help_text";
               to_y: "padding_after_text";
            }
            text {
               style: "nocontent_help_text";
               align: 0.0 0.0;
               min: 0 1;
               max: 0 1;
            }
         }
         description { state: "landscape" 0.0;
            inherit: "default" 0.0;
            min: NOCONTENT_LANDSCAPE_HELP_TEXT_STYLE_BG_MIN_INC;
         }
      }
      part { name: "pad_left_button";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            min: NOCONTENT_PORTRAIT_BUTTON_PADDING_INC;
            fixed: 1 1;
            rel1 {
               relative: 0.0 1.0;
            }
            rel2 {
               relative: 0.0 1.0;
            }
         }
         description { state: "landscape" 0.0;
            inherit: "default" 0.0;
            min: NOCONTENT_LANDSCAPE_BUTTON_PADDING_INC;
         }
      }
      part { name: "pad_right_button";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            align: 1.0 0.0;
            min: NOCONTENT_PORTRAIT_BUTTON_PADDING_INC;
            fixed: 1 1;
            rel1 {
               relative: 1.0 1.0;
            }
            rel2 {
               relative: 1.0 1.0;
            }
         }
         description { state: "landscape" 0.0;
            inherit: "default" 0.0;
            min: NOCONTENT_LANDSCAPE_BUTTON_PADDING_INC;
         }
      }
      part { name: "swallow_area";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            min: NOCONTENT_SWALLOW_AREA_MIN_INC;
            fixed: 1 1;
            align: 0.5 0.0;
            rel1 {
               relative: 1.0 0.0;
               to_x: "pad_left_button";
               to_y: "bottom_base";
            }
            rel2 {
               relative: 0.0 0.0;
               to_x: "pad_right_button";
               to_y: "bottom_base";
            }
         }
      }
   }
   programs {
      program { name: "landscape_mode";
         source: "elm";
         signal: "elm,state,orient,90";
         script {
            set_int(landscape_mode, 1);
            if (get_int(center_align) == 1)
               set_state(PART:"bg", "help_txt_lands_centre_align", 0.0);
            else
               set_state(PART:"bg", "landscape", 0.0);
            set_state(PART:"bottom_base", "landscape", 0.0);
            set_state(PART:"elm.help.text", "landscape", 0.0);
            set_state(PART:"padding_after_text", "landscape", 0.0);
            set_state(PART:"right_pad_help_text", "landscape", 0.0);
            set_state(PART:"pad_left_button", "landscape", 0.0);
            set_state(PART:"pad_right_button", "landscape", 0.0);
         }
      }
      program { name: "landscape_mode2";
         source: "elm";
         signal: "elm,state,orient,270";
         script {
            set_int(landscape_mode, 1);
            if (get_int(center_align) == 1)
               set_state(PART:"bg", "help_txt_lands_centre_align", 0.0);
            else
               set_state(PART:"bg", "landscape", 0.0);
            set_state(PART:"bottom_base", "landscape", 0.0);
            set_state(PART:"elm.help.text", "landscape", 0.0);
            set_state(PART:"padding_after_text", "landscape", 0.0);
            set_state(PART:"right_pad_help_text", "landscape", 0.0);
            set_state(PART:"pad_left_button", "landscape", 0.0);
            set_state(PART:"pad_right_button", "landscape", 0.0);
         }
      }
      program { name: "portrait_mode";
         source: "elm";
         signal: "elm,state,orient,0";
         script {
            set_int(landscape_mode, 0);
            if (get_int(center_align) == 1)
               set_state(PART:"bg", "help_txt_port_centre_align", 0.0);
            else
               set_state(PART:"bg", "default", 0.0);
            set_state(PART:"bottom_base", "default", 0.0);
            set_state(PART:"elm.help.text", "default", 0.0);
            set_state(PART:"padding_after_text", "default", 0.0);
            set_state(PART:"right_pad_help_text", "default", 0.0);
            set_state(PART:"pad_left_button", "default", 0.0);
            set_state(PART:"pad_right_button", "default", 0.0);
         }
      }
      program { name: "portrait_mode2";
         source: "elm";
         signal: "elm,state,orient,180";
         script {
            set_int(landscape_mode, 0);
            if (get_int(center_align) == 1)
               set_state(PART:"bg", "help_txt_port_centre_align", 0.0);
            else
               set_state(PART:"bg", "default", 0.0);
            set_state(PART:"bottom_base", "default", 0.0);
            set_state(PART:"elm.help.text", "default", 0.0);
            set_state(PART:"padding_after_text", "default", 0.0);
            set_state(PART:"right_pad_help_text", "default", 0.0);
            set_state(PART:"pad_left_button", "default", 0.0);
            set_state(PART:"pad_right_button", "default", 0.0);
         }
      }
      program { name: "disabled";
            signal: "text,disabled";
            source: "";
            action: STATE_SET "disabled" 0.0;
            target: "elm.text";
      }
      program { name: "align_center";
         signal: "align.center";
         source: "elm";
         script {
            if (get_int(landscape_mode) == 1)
               set_state(PART:"bg", "help_txt_lands_centre_align", 0.0);
            else
               set_state(PART:"bg", "help_txt_port_centre_align", 0.0);
            set_int(center_align, 1);
         }
      }
   }
}

group {
   name: "elm/layout/nocontents/search";
   alias: "elm/nocontents/base/search";
   parts {
      part { name: "bg";
         type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "elm.text";
         mouse_events: 0;
         type: TEXTBLOCK;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.5;
            min: NOCONTENT_TEXT_STYLE_BG_MIN_INC;
            rel1 {
               relative: 0.0 0.5;
               to:"bg";
            }
            rel2 {
               relative: 1.0 0.5;
               to:"bg";
            }
            text {
               style: "nocontent_style";
               min: 0 1;
               max: 0 1;
            }
         }
      }
      part { name: "text_bottom_padding";
         type: SPACER;
         scale: 1;
         description { state: "default" 0.0;
            min: 0 NOCONTENT_BASE_SEARCH_PADDING_INC;
            fixed: 0 1;
            align: 0.5 0.0;
            rel1 {
               relative: 0.0 1.0;
               to:"elm.text";
            }
            rel2 {
               relative: 1.0 1.0;
               to:"elm.text";
            }
         }
      }
      part { name: "custom";
         mouse_events: 1;
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            align: 0.5 0.0;
            visible: 1;
            rel1 {
               relative: 0.0 1.0;
               to:"text_bottom_padding";
            }
            rel2 {
               relative: 1.0 1.0;
               to:"text_bottom_padding";
            }
         }
      }
   }
}

   group { name: "elm/layout/drawer/panel";
      parts {
         part { name: "elm.swallow.content";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
         part { name: "elm.swallow.bg";
            type: SWALLOW;
            mouse_events: 0;
            description { state: "default" 0.0;
            }
         }
         part { name: "elm.swallow.left";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
         part { name: "elm.swallow.right";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
            }
         }
      }
   }

#define DRAWER_PORT_SIZE 720 (1280-LAYOUT_INDICATOR_HEIGHT_INC)
#define DRAWER_LAND_SIZE 1280 720
#define DRAWER_SIDE_SPACE 160 0
#define DRAWER_THRES 0.2

   group { name: "elm/layout/drawer/default";
      script {
         public down_center;     //0 or 1
         public down_dx;         //mouse down cursor position.
         public cur_pos;         //center current position. -1: left, 0: center, 1: right
         public direct;          //center moving direction. -1: left, 0: center, 1: right
         public right_swallowed; //0 or 1
         public left_swallowed;  //0 or 1
         public left_dx;         //mouse down cursor on left swallow
         public right_dx;        //mouse down cursor on right swallow
         public mouse_down = 0;
         public multi_down = 0;
      }
      parts {
         part { name: "base";
            type: RECT;
            description { state: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "drag_area_left_space";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.relative: -1 0;
               rel2.relative: -1 1;
               min: DRAWER_SIDE_SPACE;
               fixed: 1 1;
               align: 0 0;
            }
         }
         part { name: "drag_area_right_space";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.relative: 2 0;
               rel2.relative: 2 1;
               min: DRAWER_SIDE_SPACE;
               fixed: 1 1;
               align: 1 0;
            }
         }
         part { name: "right_drag_area";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               visible: 0;
               rel1.relative: 0 0;
               rel2.relative: 0 1;
               rel2.to: "drag_area_right_space";
            }
         }
         part { name: "left_drag_area";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               visible: 0;
               rel1.relative: 1 0;
               rel2.relative: 1 1;
               rel1.to: "drag_area_left_space";
            }
         }
         part { name: "left_space";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.relative: 0 0;
               rel2.relative: 0 1;
               min: DRAWER_SIDE_SPACE;
               fixed: 1 1;
               align: 0 0;
            }
         }
         part { name: "right_space";
            type: SPACER;
            scale: 1;
            description { state: "default" 0.0;
               rel1.relative: 1 0;
               rel2.relative: 1 1;
               min: DRAWER_SIDE_SPACE;
               fixed: 1 1;
               align: 1 0;
            }
         }
         part { name: "elm.swallow.left";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
               rel2.relative: 0 1;
               rel2.to: "right_space";
               visible: 0;
            }
            description { state: "show" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "elm.swallow.right";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
               rel1.relative: 1 0;
               rel1.to: "left_space";
               visible: 0;
            }
            description { state: "show" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "elm.swallow.center";
            type: SWALLOW;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
            }
            description { state: "left" 0.0;
               rel1.to_x: "left_dragable";
               rel2.to_x: "left_dragable";
            }
            description { state: "right" 0.0;
               rel1.to_x: "right_dragable";
               rel2.to_x: "right_dragable";
            }
         }
         part { name: "right_dragable";
            type: RECT;
            scale: 1;
            repeat_events: 1;
            dragable {
               x: 1 1 0;
               confine: "right_drag_area";
            }
            description { state: "default" 0.0;
               min: DRAWER_PORT_SIZE;
               rel2.relative: 0 0;
               fixed: 1 1;
               color: 0 0 0 0;
            }
            description { state: "inactive" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
            description { state: "landscape" 0.0;
               inherit: "default" 0.0;
               min: DRAWER_LAND_SIZE;
            }
            description { state: "landscape.inactive" 0.0;
               inherit: "landscape" 0.0;
               visible: 0;
            }
         }
         part { name: "left_dragable";
            type: RECT;
            scale: 1;
            repeat_events: 1;
            dragable {
               x: 1 1 0;
               confine: "left_drag_area";
            }
            description { state: "default" 0.0;
               min: DRAWER_PORT_SIZE;
               rel2.relative: 0 0;
               fixed: 1 1;
               color: 0 0 0 0;
            }
            description { state: "inactive" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
            description { state: "landscape" 0.0;
               inherit: "default" 0.0;
               min: DRAWER_LAND_SIZE;
            }
            description { state: "landscape.inactive" 0.0;
               inherit: "landscape" 0.0;
               visible: 0;
            }
         }
      }
      programs {
         program { name: "load";
            signal: "load";
            source: "";
            script {
               set_drag(PART:"left_dragable", 1, 0);
               set_drag(PART:"right_dragable", 0, 0);
            }
         }
         program { name: "mouse,down,center,double";
            signal: "mouse,down,1,double";
            source: "elm.swallow.center";
            script {
               if (get_int(multi_down) == 0 && get_int(mouse_down) == 0)
                  emit("mouse,down,1", "elm.swallow.center");
            }
         }
         program { name: "mouse,down,center";
            signal: "mouse,down,1";
            source: "elm.swallow.center";
            script {
               if (get_int(cur_pos) == 0 && get_int(multi_down) == 0 && get_int(mouse_down) == 0) {
                  set_int(mouse_down, 1);
                  new dx, dy;
                  get_mouse(dx, dy);
                  set_int(down_dx, dx);
                  set_int(down_center, 1);
               }
            }
         }
         program { name: "mouse,move,center";
            signal: "mouse,move";
            source: "elm.swallow.center";
            script {
               if (get_int(cur_pos) == 0) {
                  if (get_int(down_center) == 1) {

                     //decide the drag direction here.
                     new dx1, dy1, dx2;
                     get_mouse(dx1, dy1);
                     dx2 = get_int(down_dx);

                     //right
                     if (dx1 > dx2 && get_int(left_swallowed) == 1) {
                        set_state(PART:"elm.swallow.center", "right", 0.0);
                        set_state(PART:"elm.swallow.left", "show", 0.0);
                        set_state(PART:"elm.swallow.right", "default", 0.0);
                        set_int(direct, 1);
                     }
                     //left
                     else if (dx1 < dx2 && get_int(right_swallowed) == 1){
                        set_state(PART:"elm.swallow.center", "left", 0.0);
                        set_state(PART:"elm.swallow.right", "show", 0.0);
                        set_state(PART:"elm.swallow.left", "default", 0.0);
                        set_int(direct, -1);
                     }
                     set_int(down_center, 0);
                  }
               }
            }
         }
         program { name: "mouse,up,center";
            signal: "mouse,up,1";
            source: "elm.swallow.center";
            script {
               if (get_int(direct) == 0 && get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  set_drag(PART:"left_dragable", 1, 0);
                  set_drag(PART:"right_dragable", 0, 0);
               }
            }
         }
         program { name: "mouse,up,right";
            signal: "mouse,up,1";
            source: "right_dragable";
            script {
               if (get_int(direct) == 1 && get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  new Float:dx, Float:dy;
                  get_drag(PART:"right_dragable", dx, dy);

                  //Right -> Center
                  if (get_int(cur_pos) == 1) {

                     //Roll back the drag position if the drag size is smaller
                     //than threshold.
                     if (dx > (1.0 - DRAWER_THRES)) {
                        set_drag(PART:"right_dragable", 1, 0);
                     }
                     //set to center
                     else {
                        set_state(PART:"elm.swallow.center", "default", 0.0);
                        set_state(PART:"elm.swallow.left", "default", 0.0);
                        set_drag(PART:"right_dragable", 0, 0);
                        set_drag(PART:"left_dragable", 1, 0);
                        set_int(cur_pos, 0);
                        set_int(direct, 0);
                        emit("elm,state,center,active", "");
                        emit("elm,state,left,inactive", "");
                     }
                  }
                  //Center -> Right
                  else {
                     //Roll back the drag position if the drag size is smaller
                     //than threshold.
                     if (dx < DRAWER_THRES) {
                        set_state(PART:"elm.swallow.center", "default", 0.0);
                        set_state(PART:"elm.swallow.left", "default", 0.0);
                        set_drag(PART:"right_dragable", 0, 0);
                        set_drag(PART:"left_dragable", 1, 0);
                        set_int(direct, 0);
                     }
                     //set to right
                     else {
                        set_drag(PART:"right_dragable", 1, 0);
                        set_int(cur_pos, 1);
                        emit("elm,state,left,active", "");
                        emit("elm,state,center,inactive", "");
                     }
                  }
               }
            }
         }
         program { name: "mouse,up,left";
            signal: "mouse,up,1";
            source: "left_dragable";
            script {
               if (get_int(direct) == -1 && get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  new Float:dx, Float:dy;
                  get_drag(PART:"left_dragable", dx, dy);

                  //Left -> Center
                  if (get_int(cur_pos) == -1) {

                     //Roll back the drag position if the drag size is smaller
                     //than threshold.
                     if (dx < DRAWER_THRES) {
                        set_drag(PART:"left_dragable", 0, 0);
                     }
                     //set to center
                     else {
                        set_state(PART:"elm.swallow.center", "default", 0.0);
                        set_state(PART:"elm.swallow.right", "default", 0.0);
                        set_drag(PART:"left_dragable", 1, 0);
                        set_drag(PART:"right_dragable", 0, 0);
                        set_int(cur_pos, 0);
                        set_int(direct, 0);
                        emit("elm,state,center,active", "");
                        emit("elm,state,right,inactive", "");
                     }
                  }
                  //Center -> Left
                  else {
                     if (dx < (1.0 - DRAWER_THRES)) {
                        set_drag(PART:"left_dragable", 0, 0);
                        set_int(cur_pos, -1);
                        emit("elm,state,right,active", "");
                        emit("elm,state,center,inactive", "");
                     }
                     //Roll back the drag position if the drag size is smaller
                     //than threshold.
                     else {
                        set_state(PART:"elm.swallow.center", "default", 0.0);
                        set_state(PART:"elm.swallow.right", "default", 0.0);
                        set_drag(PART:"left_dragable", 1, 0);
                        set_drag(PART:"right_dragable", 0, 0);
                        set_int(direct, 0);
                     }
                  }
               }
            }
         }
         program { name: "mouse,down,left,swallow";
            signal: "mouse,down,1";
            source: "elm.swallow.left";
            script {
               if (get_int(cur_pos) == 1 && get_int(multi_down) == 0 && get_int(mouse_down) == 0) {
                  set_int(mouse_down, 1);
                  new dx, dy;
                  get_mouse(dx, dy);
                  set_int(left_dx, dx);
               }
            }
         }
         program { name: "mouse,up,left,swallow";
            signal: "mouse,up,1";
            source: "elm.swallow.left";
            script {
               if (get_int(cur_pos) == 1 && get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  new dx, dy, dx_down;
                  get_mouse(dx, dy);
                  dx_down = get_int(left_dx);
                  if (dx < dx_down - 100) {
                     set_state(PART:"elm.swallow.center", "default", 0.0);
                     set_state(PART:"elm.swallow.left", "default", 0.0);
                     set_drag(PART:"right_dragable", 0, 0);
                     set_drag(PART:"left_dragable", 1, 0);
                     set_int(cur_pos, 0);
                     set_int(direct, 0);
                     emit("elm,state,center,active", "");
                     emit("elm,state,left,inactive", "");
                  }
               }
            }
         }
         program { name: "mouse,down,right,swallow";
            signal: "mouse,down,1";
            source: "elm.swallow.right";
            script {
               if (get_int(cur_pos) == -1 && get_int(multi_down) == 0 && get_int(mouse_down) == 0) {
                  set_int(mouse_down, 1);
                  new dx, dy;
                  get_mouse(dx, dy);
                  set_int(right_dx, dx);
               }
            }
         }
         program { name: "mouse,up,right,swallow";
            signal: "mouse,up,1";
            source: "elm.swallow.right";
            script {
               if (get_int(cur_pos) == -1 && get_int(mouse_down) == 1) {
                  set_int(mouse_down, 0);
                  new dx, dy, dx_down;
                  get_mouse(dx, dy);
                  dx_down = get_int(right_dx);
                  if (dx > dx_down + 100) {
                     set_state(PART:"elm.swallow.center", "default", 0.0);
                     set_state(PART:"elm.swallow.right", "default", 0.0);
                     set_drag(PART:"right_dragable", 0, 0);
                     set_drag(PART:"left_dragable", 1, 0);
                     set_int(cur_pos, 0);
                     set_int(direct, 0);
                     emit("elm,state,center,active", "");
                     emit("elm,state,right,inactive", "");
                  }
               }
            }
         }
         program {
            name: "multi_down";
            signal: "elm,action,multi,down";
            source: "elm";
            script {
               set_int(multi_down, 1);
            }
         }
         program {
            name: "multi_up";
            signal: "elm,action,multi,up";
            source: "elm";
            script {
               set_int(multi_down, 0);
            }
         }
         program { name: "active_left";
            source: "elm";
            signal: "elm,action,left,active";
            script {
               if (get_int(cur_pos) != 1 && get_int(left_swallowed) == 1) {
                  set_state(PART:"elm.swallow.center", "right", 0.0);
                  set_state(PART:"elm.swallow.right", "default", 0.0);
                  set_state(PART:"elm.swallow.left", "show", 0.0);
                  set_drag(PART:"right_dragable", 1, 0);
                  emit("elm,state,left,active", "");

                  if (get_int(cur_pos) == -1)
                     emit("elm,state,right,inactive", "");
                  else
                     emit("elm,state,center,inactive", "");

                  set_int(cur_pos, 1);
                  set_int(direct, 1);
               }
            }
         }
         program { name: "active_right";
            source: "elm";
            signal: "elm,action,right,active";
            script {
               if (get_int(cur_pos) != -1 && get_int(right_swallowed) == 1) {
                  set_state(PART:"elm.swallow.center", "left", 0.0);
                  set_state(PART:"elm.swallow.right", "show", 0.0);
                  set_state(PART:"elm.swallow.left", "default", 0.0);
                  set_drag(PART:"left_dragable", 0, 0);
                  emit("elm,state,right,active", "");

                  if (get_int(cur_pos) == 1)
                     emit("elm,state,left,inactive", "");
                  else
                     emit("elm,state,center,inactive", "");

                  set_int(direct, -1);
                  set_int(cur_pos, -1);
               }
            }
         }
         program { name: "active_center";
            source: "elm";
            signal: "elm,action,center,active";
            script {
               if (get_int(cur_pos) != 0) {
                  set_state(PART:"elm.swallow.center", "default", 0.0);
                  set_state(PART:"elm.swallow.right", "default", 0.0);
                  set_state(PART:"elm.swallow.left", "default", 0.0);
                  set_drag(PART:"left_dragable", 1, 0);
                  set_drag(PART:"right_dragable", 0, 0);
                  emit("elm,state,center,active", "");

                  if (get_int(cur_pos) == 1)
                     emit("elm,state,left,inactive", "");
                  else
                     emit("elm,state,right,inactive", "");

                  set_int(direct, 0);
                  set_int(cur_pos, 0);
               }
            }
         }
         program { name: "right_swallowed";
            source: "elm";
            signal: "elm,state,tizen,right,show";
            script {
               set_int(right_swallowed, 1);
            }
         }
         program { name: "right_unswallowed";
            source: "elm";
            signal: "elm,state,tizen,right,hide";
            script {
               set_int(right_swallowed, 0);
               if (get_int(cur_pos) == 1) {
                  set_state(PART:"elm.swallow.center", "default", 0.0);
                  set_drag(PART:"right_dragable", 0, 0);
                  set_drag(PART:"left_dragable", 1, 0);
                  set_int(cur_pos, 0);
               }
            }
         }
         program { name: "left_swallowed";
            source: "elm";
            signal: "elm,state,tizen,left,show";
            script {
               set_int(left_swallowed, 1);
            }
         }
         program { name: "left_unswallowed";
            source: "elm";
            signal: "elm,state,tizen,left,hide";
            script {
               set_int(left_swallowed, 0);
               if (get_int(cur_pos) == -1) {
                  set_state(PART:"elm.swallow.center", "default", 0.0);
                  set_drag(PART:"right_dragable", 0, 0);
                  set_drag(PART:"left_dragable", 1, 0);
                  set_int(cur_pos, 0);
               }
            }
         }
         program { name: "dragable_disable";
            source: "elm";
            signal: "elm,action,dragable,disable";
            script {
               new st[31];
               new Float:val;
               get_state(PART:"right_dragable", st, 30, val);
               if (!strcmp(st, "default")) {
                  set_state(PART:"right_dragable", "inactive", 0.0);
                  set_state(PART:"left_dragable", "inactive", 0.0);
               }
               else if (!strcmp(st, "landscape")) {
                  set_state(PART:"right_dragable", "landscape.inactive", 0.0);
                  set_state(PART:"left_dragable", "landscape.inactive", 0.0);
               }
            }
         }
         program { name: "dragable_enable";
            source: "elm";
            signal: "elm,action,dragable,enable";
            script {
               new st[31];
               new Float:val;
               get_state(PART:"right_dragable", st, 30, val);
               if (!strcmp(st, "inactive")) {
                  set_state(PART:"right_dragable", "default", 0.0);
                  set_state(PART:"left_dragable", "default", 0.0);
               }
               else if (!strcmp(st, "landscape.inactive")) {
                  set_state(PART:"right_dragable", "landscape", 0.0);
                  set_state(PART:"left_dragable", "landscape", 0.0);
               }
            }
         }
         program { name: "landscape_mode";
            source: "elm";
            signal: "elm,state,orient,90";
            script {
               new st[31];
               new Float:val;
               get_state(PART:"right_dragable", st, 30, val);
               if (!strcmp(st, "default")) {
                  set_state(PART:"right_dragable", "landscape", 0.0);
                  set_state(PART:"left_dragable", "landscape", 0.0);
               }
               else if (!strcmp(st, "inactive")) {
                  set_state(PART:"right_dragable", "landscape.inactive", 0.0);
                  set_state(PART:"left_dragable", "landscape.inactive", 0.0);
               }
            }
         }
         program { name: "landscape_mode2";
            source: "elm";
            signal: "elm,state,orient,270";
            script {
               new st[31];
               new Float:val;
               get_state(PART:"right_dragable", st, 30, val);
               if (!strcmp(st, "default")) {
                  set_state(PART:"right_dragable", "landscape", 0.0);
                  set_state(PART:"left_dragable", "landscape", 0.0);
               }
               else if (!strcmp(st, "inactive")) {
                  set_state(PART:"right_dragable", "landscape.inactive", 0.0);
                  set_state(PART:"left_dragable", "landscape.inactive", 0.0);
               }
            }
         }
         program { name: "portrait_mode";
            source: "elm";
            signal: "elm,state,orient,0";
            script {
               new st[31];
               new Float:val;
               get_state(PART:"right_dragable", st, 30, val);
               if (!strcmp(st, "landscape")) {
                  set_state(PART:"right_dragable", "default", 0.0);
                  set_state(PART:"left_dragable", "default", 0.0);
               }
               else if (!strcmp(st, "landscape.inactive")) {
                  set_state(PART:"right_dragable", "inactive", 0.0);
                  set_state(PART:"left_dragable", "inactive", 0.0);
               }
            }
         }
         program { name: "portrait_mode2";
            source: "elm";
            signal: "elm,state,orient,180";
            script {
               new st[31];
               new Float:val;
               get_state(PART:"right_dragable", st, 30, val);
               if (!strcmp(st, "landscape")) {
                  set_state(PART:"right_dragable", "default", 0.0);
                  set_state(PART:"left_dragable", "default", 0.0);
               }
               else if (!strcmp(st, "landscape.inactive")) {
                  set_state(PART:"right_dragable", "inactive", 0.0);
                  set_state(PART:"left_dragable", "inactive", 0.0);
               }
            }
         }
      }
   }

