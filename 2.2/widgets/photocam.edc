/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

group { name: "elm/photocam/base/default";
       script {
           public sbvis_v, sbvis_h, sbalways_v, sbalways_h, sbvis_timer;
           public timer0(val) {
               new v;
               v = get_int(sbvis_v);
               if (v) {
                   v = get_int(sbalways_v);
                   if (!v) {
                       emit("do-hide-vbar", "");
                       set_int(sbvis_v, 0);
                   }
               }
               v = get_int(sbvis_h);
               if (v) {
                   v = get_int(sbalways_h);
                   if (!v) {
                       emit("do-hide-hbar", "");
                       set_int(sbvis_h, 0);
                   }
               }
               set_int(sbvis_timer, 0);
               return 0;
           }
       }
       images {
           image: "00_scroll_bar_v.#.png" COMP;
           image: "00_scroll_bar_h.#.png" COMP;
           image: "00_list_process_L_00.png" COMP;
       }
       parts {
           part { name: "bg";
               type: RECT;
               scale: 1;
               description { state: "default" 0.0;
                   rel1.offset: 0 0;
                   rel2.offset: -1 -1;
                   color: 255 255 255 0;
               }
           }
           part { name: "clipper";
               type: RECT;
               mouse_events: 0;
               scale: 1;
               description { state: "default" 0.0;
                   rel1.to: "bg";
                   rel2.to: "bg";
               }
           }
           part { name: "elm.swallow.content";
               clip_to: "clipper";
               type: SWALLOW;
               scale: 1;
               description { state: "default" 0.0;
                   rel1.offset: 0 0;
                   rel2.offset: -1 -1;
               }
           }
           part { name: "conf_over";
               mouse_events: 0;
               scale: 1;
               description { state: "default" 0.0;
                  rel1.offset: 0 0;
                  rel2.offset: -1 -1;
                  visible: 0;
               }
           }
           part { name: "busy_clip";
               type: RECT;
               mouse_events: 0;
               description { state: "default" 0.0;
                   visible: 0;
                   color: 255 255 255 0;
               }
               description { state: "active" 0.0;
                   visible: 1;
                   color: 255 255 255 255;
               }
           }
           part { name: "busy";
              clip_to: "busy_clip";
              mouse_events: 0;
              description { state: "default" 0.0;
                 fixed: 1 1;
                 min: PROCESS_LARGE_IMAGE_WIDTH_INC PROCESS_LARGE_IMAGE_HEIGHT_INC;
                 max: PROCESS_LARGE_IMAGE_WIDTH_INC PROCESS_LARGE_IMAGE_HEIGHT_INC;
                 aspect: 1.0 1.0;
                 align: 1.0 1.0;
                 aspect_preference: BOTH;
                 rel1 {
                    relative: 0.9 0.9;
                    offset:   -9 -9;
                 }
                 rel2 {
                    relative: 0.9 0.9;
                    offset:   -9 -9;
                 }
                 image {
                    normal: "00_list_process_L_00.png";
                 }
              }
              description { state: "pulse" 0.0;
                 inherit: "default" 0.0;
                 map {
                    on: 1;
                    smooth: 0;
                    perspective_on: 1;
                    rotation {
                       z: -360;
                    }
                 }
              }
           }
         part { name: "sb_vbar_clip_master";
            type: RECT;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part { name: "sb_vbar_clip";
            clip_to: "sb_vbar_clip_master";
            type: RECT;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part {name: "vbar.padding";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: SCROLLER_PHOTOCAM_SCROLLBAR_VBAR_PADDING_SIZE 0;
               max: SCROLLER_PHOTOCAM_SCROLLBAR_VBAR_PADDING_SIZE 0;
               align: 1 0.5;
               rel1 {
                  relative: 0.0 0.0;
                  to: "elm.swallow.content";
               }
               rel2 {
                  relative: 1.0 1.0;
                  to: "elm.swallow.content";
               }
            }
         }
         part { name: "sb_vbar";
            type: RECT;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               visible: 0;
               min: SCROLLER_PHOTOCAM_SCROLLBAR_VBAR_MIN_SIZE_INC;
               align: 1.0 0.0;
               rel1 {
                  relative: 1.0 0.0;
                  offset: -1 0;
                  to_y: "elm.swallow.content";
                  to_x: "elm.swallow.content";
               }
               rel2 {
                  relative: 0.0 1.0;
                  offset: -1 -1;
                  to_y: "elm.swallow.content";
                  to_x: "vbar.padding";
               }
            }
         }
         part { name: "elm.dragable.vbar";
            clip_to: "sb_vbar_clip";
            mouse_events: 0;
            scale: 1;
            dragable {
               x: 0 0 0;
               y: 1 1 0;
               confine: "sb_vbar";
            }
            description { state: "default" 0.0;
               fixed: 1 1;
               min: SCROLLER_PHOTOCAM_SCROLLBAR_VBAR_MIN_SIZE_INC;
               max: SCROLLER_PHOTOCAM_SCROLLBAR_VBAR_MAX_SIZE_INC;
               rel1 {
                  relative: 0.5  0.5;
                  offset:   0    0;
                  to: "sb_vbar";
               }
               rel2 {
                  relative: 0.5  0.5;
                  offset:   0    0;
                  to: "sb_vbar";
               }
               image {
                  normal: "00_scroll_bar_v.#.png";
                  middle: DEFAULT;
               }
               color_class: "B071";
            }
         }
         part { name: "sb_hbar_clip_master";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part { name: "sb_hbar_clip";
            clip_to: "sb_hbar_clip_master";
            type: RECT;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
            }
            description { state: "hidden" 0.0;
               visible: 0;
               color: 255 255 255 0;
            }
         }
         part {name: "hbar.padding";
            type: RECT;
            mouse_events: 0;
            description { state: "default" 0.0;
               min: 0 SCROLLER_PHOTOCAM_SCROLLBAR_HBAR_PADDING_SIZE;
               max: 0 SCROLLER_PHOTOCAM_SCROLLBAR_HBAR_PADDING_SIZE;
               align: 1 1;
               rel1 {
                  relative: 0.0 0.0;
                  to: "elm.swallow.content";
               }
               rel2 {
                  relative: 1.0 1.0;
                  to: "elm.swallow.content";
               }
            }
         }
         part { name: "sb_hbar";
            type: RECT;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               fixed: 1 1;
               visible: 0;
               min: SCROLLER_PHOTOCAM_SCROLLBAR_HBAR_MIN_SIZE_INC;
               align: 0.0 1.0;
               rel1 {
                  relative: 0.0 1.0;
                  offset: 0 -1;
                  to_y: "elm.swallow.content";
                  to_x: "elm.swallow.content";
               }
               rel2 {
                  relative: 0.0 1.0;
                  offset: -1 -1;
                  to_x: "sb_vbar";
                  to_y: "hbar.padding";
               }
            }
         }
         part { name: "elm.dragable.hbar";
            clip_to: "sb_hbar_clip";
            mouse_events: 0;
            scale: 1;
            dragable {
               x: 1 1 0;
               y: 0 0 0;
               confine: "sb_hbar";
            }
            description { state: "default" 0.0;
               fixed: 1 1;
               min: SCROLLER_MATCHLIST_SCROLLBAR_HBAR_MIN_SIZE_INC;
               max: SCROLLER_MATCHLIST_SCROLLBAR_HBAR_MAX_SIZE_INC;
               rel1 {
                  relative: 0.5  0.5;
                  offset: 0 0;
                  to: "sb_hbar";
               }
               rel2 {
                  relative: 0.5  0.5;
                  offset: 0 0;
                  to: "sb_hbar";
               }
               color: 255 255 255 0;
               image {
                  normal: "00_scroll_bar_h.#.png";
                  middle: SOLID;
               }
               color_class: "B071";
            }
         }
       }
       programs {
           program { name: "load";
               signal: "load";
               source: "";
               script {
                   set_state(PART:"sb_hbar_clip", "hidden", 0.0);
                   set_state(PART:"sb_vbar_clip", "hidden", 0.0);
                   set_int(sbvis_h, 0);
                   set_int(sbvis_v, 0);
                   set_int(sbalways_v, 0);
                   set_int(sbalways_h, 0);
                   set_int(sbvis_timer, 0);
               }
           }

           program { name: "vbar_show";
               signal: "elm,action,show,vbar";
               source: "elm";
               action:  STATE_SET "default" 0.0;
               target: "sb_vbar_clip_master";
           }
           program { name: "vbar_hide";
               signal: "elm,action,hide,vbar";
               source: "elm";
               action:  STATE_SET "hidden" 0.0;
               target: "sb_vbar_clip_master";
           }
           program { name: "vbar_show_always";
               signal: "elm,action,show_always,vbar";
               source: "elm";
               script {
                   new v;
                   v = get_int(sbalways_v);
                   if (!v) {
                       set_int(sbalways_v, 1);
                       v = get_int(sbvis_v);
                       if (!v) {
                          emit("do-show-vbar", "");
                          set_int(sbvis_v, 1);
                       }
                   }
               }
           }
           program { name: "vbar_show_notalways";
               signal: "elm,action,show_notalways,vbar";
               source: "elm";
               script {
                   new v;
                   v = get_int(sbalways_v);
                   if (v) {
                       set_int(sbalways_v, 0);
                       v = get_int(sbvis_v);
                       if (!v) {
                          emit("do-hide-vbar", "");
                          set_int(sbvis_v, 0);
                       }
                   }
               }
           }
           program { name: "sb_vbar_show";
               signal: "do-show-vbar";
               source: "";
               action:  STATE_SET "default" 0.0;
               transition: LINEAR 1.0;
               target: "sb_vbar_clip";
           }
           program { name: "sb_vbar_hide";
               signal: "do-hide-vbar";
               source: "";
               action:  STATE_SET "hidden" 0.0;
               transition: LINEAR 1.0;
               target: "sb_vbar_clip";
           }

           program { name: "hbar_show";
               signal: "elm,action,show,hbar";
               source: "elm";
               action:  STATE_SET "default" 0.0;
               target: "sb_hbar_clip_master";
           }
           program { name: "hbar_hide";
               signal: "elm,action,hide,hbar";
               source: "elm";
               action:  STATE_SET "hidden" 0.0;
               target: "sb_hbar_clip_master";
           }
           program { name: "hbar_show_always";
               signal: "elm,action,show_always,hbar";
               source: "elm";
               script {
                   new v;
                   v = get_int(sbalways_h);
                   if (!v) {
                       set_int(sbalways_h, 1);
                       v = get_int(sbvis_h);
                       if (!v) {
                          emit("do-show-hbar", "");
                          set_int(sbvis_h, 1);
                       }
                   }
               }
           }
           program { name: "hbar_show_notalways";
               signal: "elm,action,show_notalways,hbar";
               source: "elm";
               script {
                   new v;
                   v = get_int(sbalways_h);
                   if (v) {
                       set_int(sbalways_h, 0);
                       v = get_int(sbvis_h);
                       if (!v) {
                           emit("do-hide-hbar", "");
                           set_int(sbvis_h, 0);
                       }
                   }
               }
           }
           program { name: "sb_hbar_show";
               signal: "do-show-hbar";
               source: "";
               action:  STATE_SET "default" 0.0;
               transition: LINEAR 1.0;
               target: "sb_hbar_clip";
           }
           program { name: "sb_hbar_hide";
               signal: "do-hide-hbar";
               source: "";
               action:  STATE_SET "hidden" 0.0;
               transition: LINEAR 1.0;
               target: "sb_hbar_clip";
           }
           program { name: "scroll";
               signal: "elm,action,scroll";
               source: "elm";
               script {
                   new v;
                   v = get_int(sbvis_v);
                   v |= get_int(sbalways_v);
                   if (!v) {
                       emit("do-show-vbar", "");
                       set_int(sbvis_v, 1);
                   }
                   v = get_int(sbvis_h);
                   v |= get_int(sbalways_h);
                   if (!v) {
                       emit("do-show-hbar", "");
                       set_int(sbvis_h, 1);
                   }
                   v = get_int(sbvis_timer);
                   if (v > 0) cancel_timer(v);
                   v = timer(2.0, "timer0", 0);
                   set_int(sbvis_timer, v);
               }
           }
           program { name: "go1";
               signal: "elm,state,busy,start";
               source: "elm";
               action: STATE_SET "active" 0.0;
               transition: SINUSOIDAL 1.0;
               target:  "busy_clip";
           }
           program { name: "continue_pulse";
               action: STATE_SET "default" 0.0;
               target: "busy";
               transition: LINEAR 1.5;
               after: "start_pulse";
           }
           program { name: "start_pulse";
               signal: "elm,state,busy,start";
               source: "elm";
               action: STATE_SET "pulse" 0.0;
               target: "busy";
               after: "continue_pulse";
           }
           program { name: "init_pulse";
               action: STATE_SET "default" 0.0;
               target: "busy";
           }
           program { name: "stop1";
               signal: "elm,state,busy,stop";
               source: "elm";
               action: STATE_SET "default" 0.0;
               transition: SINUSOIDAL 1.0;
               target: "busy_clip";
               after: "stop2";
           }
           program { name: "stop2";
              signal: "elm,state,busy,stop";
              source: "elm";
              action: ACTION_STOP;
              target: "continue_pulse";
              target: "start_pulse";
              after: "init_pulse";
           }
      }
   }

